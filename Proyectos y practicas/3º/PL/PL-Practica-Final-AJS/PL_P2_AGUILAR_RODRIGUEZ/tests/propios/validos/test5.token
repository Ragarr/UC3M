TYPE type
ID string
ASSIGN =
L_BRACKET {
ID c
TWO_POINTS :
CHARACTER character
R_BRACKET }
SEMICOLON ;
FUNCTION function
ID mostrarError
L_PARENTHESIS (
ID mensaje
TWO_POINTS :
INT int
R_PARENTHESIS )
TWO_POINTS :
INT int
L_BRACKET {
LET let
ID i
ASSIGN =
NUMBER_VALUE 0
SEMICOLON ;
WHILE while
L_PARENTHESIS (
ID i
LESS_THAN <
ID mensaje
R_PARENTHESIS )
L_BRACKET {
ID i
PLUS +
NUMBER_VALUE 2
SEMICOLON ;
R_BRACKET }
RETURN return
NUMBER_VALUE 0
SEMICOLON ;
R_BRACKET }
ID mostrarError
L_PARENTHESIS (
NUMBER_VALUE 10
R_PARENTHESIS )
SEMICOLON ;
FUNCTION function
ID suma
L_PARENTHESIS (
ID a
TWO_POINTS :
INT int
COMMA ,
ID b
TWO_POINTS :
INT int
R_PARENTHESIS )
TWO_POINTS :
INT int
L_BRACKET {
RETURN return
ID a
PLUS +
ID b
SEMICOLON ;
R_BRACKET }
LET let
ID resultado2
ASSIGN =
ID suma
L_PARENTHESIS (
NUMBER_VALUE 10
COMMA ,
NUMBER_VALUE 20
R_PARENTHESIS )
SEMICOLON ;
TYPE type
ID Persona
ASSIGN =
L_BRACKET {
ID nombre
TWO_POINTS :
ID string
COMMA ,
ID edad
TWO_POINTS :
INT int
R_BRACKET }
SEMICOLON ;
FUNCTION function
ID crearPersona
L_PARENTHESIS (
ID nombre
TWO_POINTS :
ID string
COMMA ,
ID edad
TWO_POINTS :
INT int
R_PARENTHESIS )
TWO_POINTS :
ID Persona
L_BRACKET {
RETURN return
L_BRACKET {
ID nombre
TWO_POINTS :
ID nombre
COMMA ,
ID edad
TWO_POINTS :
ID edad
R_BRACKET }
SEMICOLON ;
R_BRACKET }
