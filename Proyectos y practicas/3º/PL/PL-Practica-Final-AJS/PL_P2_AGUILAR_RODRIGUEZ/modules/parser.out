Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     empty -> <empty>
Rule 2     program -> statement_list
Rule 3     statement_list -> statement statement_list
Rule 4     statement_list -> empty
Rule 5     statement -> expression SEMICOLON
Rule 6     statement -> variable_declaration SEMICOLON
Rule 7     statement -> variable_assignment SEMICOLON
Rule 8     statement -> type_declaration SEMICOLON
Rule 9     statement -> function_declaration
Rule 10    statement -> if_statement
Rule 11    statement -> while_statement
Rule 12    expression -> L_PARENTHESIS expression R_PARENTHESIS
Rule 13    expression -> binary_expression
Rule 14    expression -> unary_expression
Rule 15    expression -> value
Rule 16    binary_expression -> expression PLUS expression
Rule 17    binary_expression -> expression MINUS expression
Rule 18    binary_expression -> expression MULTIPLY expression
Rule 19    binary_expression -> expression DIVIDE expression
Rule 20    binary_expression -> expression AND expression
Rule 21    binary_expression -> expression OR expression
Rule 22    binary_expression -> expression EQUALS expression
Rule 23    binary_expression -> expression GREATER_THAN expression
Rule 24    binary_expression -> expression LESS_THAN expression
Rule 25    binary_expression -> expression GREATER_EQUAL expression
Rule 26    binary_expression -> expression LESS_EQUAL expression
Rule 27    unary_expression -> unary_operator L_PARENTHESIS expression R_PARENTHESIS
Rule 28    unary_expression -> unary_operator value
Rule 29    unary_operator -> MINUS
Rule 30    unary_operator -> NOT
Rule 31    unary_operator -> PLUS
Rule 32    value -> NUMBER_VALUE
Rule 33    value -> CHAR_VALUE
Rule 34    value -> BOOL_VALUE
Rule 35    value -> ID
Rule 36    value -> NULL
Rule 37    value -> ID L_PARENTHESIS argument_list R_PARENTHESIS
Rule 38    value -> ID DOT ID recursive_atribute_access
Rule 39    value -> ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access
Rule 40    argument_list -> expression
Rule 41    argument_list -> expression COMMA argument_list
Rule 42    argument_list -> empty
Rule 43    atribute_access -> ID recursive_atribute_access
Rule 44    recursive_atribute_access -> DOT ID recursive_atribute_access
Rule 45    recursive_atribute_access -> L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access
Rule 46    recursive_atribute_access -> empty
Rule 47    variable_declaration -> LET ID recursive_variable_declaration
Rule 48    variable_declaration -> LET ID TWO_POINTS ID recursive_variable_declaration
Rule 49    variable_declaration -> LET ID TWO_POINTS type recursive_variable_declaration
Rule 50    recursive_variable_declaration -> COMMA ID recursive_variable_declaration
Rule 51    recursive_variable_declaration -> COMMA ID TWO_POINTS ID recursive_variable_declaration
Rule 52    recursive_variable_declaration -> empty
Rule 53    variable_assignment -> basic_var_assignment
Rule 54    variable_assignment -> object_var_assignment
Rule 55    basic_var_assignment -> ID ASSIGN expression
Rule 56    basic_var_assignment -> variable_declaration ASSIGN expression
Rule 57    object_var_assignment -> variable_declaration ASSIGN object_body
Rule 58    object_var_assignment -> ID ASSIGN object_body
Rule 59    object_var_assignment -> atribute_access ASSIGN expression
Rule 60    object_var_assignment -> atribute_access ASSIGN object_body
Rule 61    object_body -> L_BRACKET object_body_content R_BRACKET
Rule 62    object_body_content -> ID TWO_POINTS expression recursive_obejct_body_content
Rule 63    object_body_content -> QUOTED_ID TWO_POINTS expression recursive_obejct_body_content
Rule 64    object_body_content -> ID TWO_POINTS object_body recursive_obejct_body_content
Rule 65    object_body_content -> QUOTED_ID TWO_POINTS object_body recursive_obejct_body_content
Rule 66    recursive_obejct_body_content -> COMMA ID TWO_POINTS expression recursive_obejct_body_content
Rule 67    recursive_obejct_body_content -> COMMA QUOTED_ID TWO_POINTS expression recursive_obejct_body_content
Rule 68    recursive_obejct_body_content -> COMMA ID TWO_POINTS object_body recursive_obejct_body_content
Rule 69    recursive_obejct_body_content -> COMMA QUOTED_ID TWO_POINTS object_body recursive_obejct_body_content
Rule 70    recursive_obejct_body_content -> empty
Rule 71    recursive_obejct_body_content -> COMMA empty
Rule 72    type_declaration -> TYPE ID ASSIGN type_body
Rule 73    type_body -> L_BRACKET type_body_content R_BRACKET
Rule 74    type_body_content -> ID TWO_POINTS type type_body_content_recursive
Rule 75    type_body_content -> QUOTED_ID TWO_POINTS type type_body_content_recursive
Rule 76    type_body_content -> ID TWO_POINTS ID type_body_content_recursive
Rule 77    type_body_content -> QUOTED_ID TWO_POINTS ID type_body_content_recursive
Rule 78    type_body_content -> ID TWO_POINTS type_body type_body_content_recursive
Rule 79    type_body_content -> QUOTED_ID TWO_POINTS type_body type_body_content_recursive
Rule 80    type_body_content_recursive -> COMMA ID TWO_POINTS type type_body_content_recursive
Rule 81    type_body_content_recursive -> COMMA QUOTED_ID TWO_POINTS type type_body_content_recursive
Rule 82    type_body_content_recursive -> COMMA ID TWO_POINTS ID type_body_content_recursive
Rule 83    type_body_content_recursive -> COMMA QUOTED_ID TWO_POINTS ID type_body_content_recursive
Rule 84    type_body_content_recursive -> COMMA ID TWO_POINTS type_body type_body_content_recursive
Rule 85    type_body_content_recursive -> COMMA QUOTED_ID TWO_POINTS type_body type_body_content_recursive
Rule 86    type_body_content_recursive -> empty
Rule 87    type_body_content_recursive -> COMMA empty
Rule 88    type -> INT
Rule 89    type -> FLOAT
Rule 90    type -> CHARACTER
Rule 91    type -> BOOLEAN
Rule 92    function_declaration -> function_header function_body
Rule 93    function_header -> FUNCTION ID L_PARENTHESIS function_params R_PARENTHESIS TWO_POINTS return_type
Rule 94    function_body -> L_BRACKET statement_list RETURN return_statement R_BRACKET
Rule 95    function_params -> ID TWO_POINTS type COMMA function_params
Rule 96    function_params -> ID TWO_POINTS type
Rule 97    function_params -> ID TWO_POINTS ID COMMA function_params
Rule 98    function_params -> ID TWO_POINTS ID
Rule 99    function_params -> empty
Rule 100   return_type -> type
Rule 101   return_type -> ID
Rule 102   return_statement -> expression SEMICOLON
Rule 103   return_statement -> object_body SEMICOLON
Rule 104   if_statement -> IF if_evaluation if_statements else_statement
Rule 105   if_evaluation -> L_PARENTHESIS expression R_PARENTHESIS
Rule 106   if_statements -> L_BRACKET statement statement_list R_BRACKET
Rule 107   else_statement -> ELSE L_BRACKET statement statement_list R_BRACKET
Rule 108   else_statement -> empty
Rule 109   while_statement -> while_header while_statements
Rule 110   while_header -> WHILE L_PARENTHESIS expression R_PARENTHESIS
Rule 111   while_statements -> L_BRACKET statement statement_list R_BRACKET

Terminals, with rules where they appear

AND                  : 20
ASSIGN               : 55 56 57 58 59 60 72
BOOLEAN              : 91
BOOL_VALUE           : 34
CHARACTER            : 90
CHAR_VALUE           : 33
COMMA                : 41 50 51 66 67 68 69 71 80 81 82 83 84 85 87 95 97
DIVIDE               : 19
DOT                  : 38 44
ELSE                 : 107
EQUALS               : 22
FLOAT                : 89
FUNCTION             : 93
GREATER_EQUAL        : 25
GREATER_THAN         : 23
ID                   : 35 37 38 38 39 43 44 47 48 48 49 50 51 51 55 58 62 64 66 68 72 74 76 76 77 78 80 82 82 83 84 93 95 96 97 97 98 98 101
IF                   : 104
INT                  : 88
LESS_EQUAL           : 26
LESS_THAN            : 24
LET                  : 47 48 49
L_BRACKET            : 61 73 94 106 107 111
L_PARENTHESIS        : 12 27 37 93 105 110
L_SQ_BRACKET         : 39 45
MINUS                : 17 29
MULTIPLY             : 18
NOT                  : 30
NULL                 : 36
NUMBER_VALUE         : 32
OR                   : 21
PLUS                 : 16 31
QUOTED_ID            : 39 45 63 65 67 69 75 77 79 81 83 85
RETURN               : 94
R_BRACKET            : 61 73 94 106 107 111
R_PARENTHESIS        : 12 27 37 93 105 110
R_SQ_BRACKET         : 39 45
SEMICOLON            : 5 6 7 8 102 103
TWO_POINTS           : 48 49 51 62 63 64 65 66 67 68 69 74 75 76 77 78 79 80 81 82 83 84 85 93 95 96 97 98
TYPE                 : 72
WHILE                : 110
error                : 

Nonterminals, with rules where they appear

argument_list        : 37 41
atribute_access      : 59 60
basic_var_assignment : 53
binary_expression    : 13
else_statement       : 104
empty                : 4 42 46 52 70 71 86 87 99 108
expression           : 5 12 16 16 17 17 18 18 19 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 40 41 55 56 59 62 63 66 67 102 105 110
function_body        : 92
function_declaration : 9
function_header      : 92
function_params      : 93 95 97
if_evaluation        : 104
if_statement         : 10
if_statements        : 104
object_body          : 57 58 60 64 65 68 69 103
object_body_content  : 61
object_var_assignment : 54
program              : 0
recursive_atribute_access : 38 39 43 44 45
recursive_obejct_body_content : 62 63 64 65 66 67 68 69
recursive_variable_declaration : 47 48 49 50 51
return_statement     : 94
return_type          : 93
statement            : 3 106 107 111
statement_list       : 2 3 94 106 107 111
type                 : 49 74 75 80 81 95 96 100
type_body            : 72 78 79 84 85
type_body_content    : 73
type_body_content_recursive : 74 75 76 77 78 79 80 81 82 83 84 85
type_declaration     : 8
unary_expression     : 14
unary_operator       : 27 28
value                : 15 28
variable_assignment  : 7
variable_declaration : 6 56 57
while_header         : 109
while_statement      : 11
while_statements     : 109

Parsing method: LALR

state 0

    (0) S' -> . program
    (2) program -> . statement_list
    (3) statement_list -> . statement statement_list
    (4) statement_list -> . empty
    (5) statement -> . expression SEMICOLON
    (6) statement -> . variable_declaration SEMICOLON
    (7) statement -> . variable_assignment SEMICOLON
    (8) statement -> . type_declaration SEMICOLON
    (9) statement -> . function_declaration
    (10) statement -> . if_statement
    (11) statement -> . while_statement
    (1) empty -> .
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . binary_expression
    (14) expression -> . unary_expression
    (15) expression -> . value
    (47) variable_declaration -> . LET ID recursive_variable_declaration
    (48) variable_declaration -> . LET ID TWO_POINTS ID recursive_variable_declaration
    (49) variable_declaration -> . LET ID TWO_POINTS type recursive_variable_declaration
    (53) variable_assignment -> . basic_var_assignment
    (54) variable_assignment -> . object_var_assignment
    (72) type_declaration -> . TYPE ID ASSIGN type_body
    (92) function_declaration -> . function_header function_body
    (104) if_statement -> . IF if_evaluation if_statements else_statement
    (109) while_statement -> . while_header while_statements
    (16) binary_expression -> . expression PLUS expression
    (17) binary_expression -> . expression MINUS expression
    (18) binary_expression -> . expression MULTIPLY expression
    (19) binary_expression -> . expression DIVIDE expression
    (20) binary_expression -> . expression AND expression
    (21) binary_expression -> . expression OR expression
    (22) binary_expression -> . expression EQUALS expression
    (23) binary_expression -> . expression GREATER_THAN expression
    (24) binary_expression -> . expression LESS_THAN expression
    (25) binary_expression -> . expression GREATER_EQUAL expression
    (26) binary_expression -> . expression LESS_EQUAL expression
    (27) unary_expression -> . unary_operator L_PARENTHESIS expression R_PARENTHESIS
    (28) unary_expression -> . unary_operator value
    (32) value -> . NUMBER_VALUE
    (33) value -> . CHAR_VALUE
    (34) value -> . BOOL_VALUE
    (35) value -> . ID
    (36) value -> . NULL
    (37) value -> . ID L_PARENTHESIS argument_list R_PARENTHESIS
    (38) value -> . ID DOT ID recursive_atribute_access
    (39) value -> . ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access
    (55) basic_var_assignment -> . ID ASSIGN expression
    (56) basic_var_assignment -> . variable_declaration ASSIGN expression
    (57) object_var_assignment -> . variable_declaration ASSIGN object_body
    (58) object_var_assignment -> . ID ASSIGN object_body
    (59) object_var_assignment -> . atribute_access ASSIGN expression
    (60) object_var_assignment -> . atribute_access ASSIGN object_body
    (93) function_header -> . FUNCTION ID L_PARENTHESIS function_params R_PARENTHESIS TWO_POINTS return_type
    (110) while_header -> . WHILE L_PARENTHESIS expression R_PARENTHESIS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . PLUS
    (43) atribute_access -> . ID recursive_atribute_access

    $end            reduce using rule 1 (empty -> .)
    L_PARENTHESIS   shift and go to state 12
    LET             shift and go to state 16
    TYPE            shift and go to state 20
    IF              shift and go to state 22
    NUMBER_VALUE    shift and go to state 27
    CHAR_VALUE      shift and go to state 28
    BOOL_VALUE      shift and go to state 29
    ID              shift and go to state 17
    NULL            shift and go to state 30
    FUNCTION        shift and go to state 32
    WHILE           shift and go to state 33
    MINUS           shift and go to state 25
    NOT             shift and go to state 34
    PLUS            shift and go to state 24

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    expression                     shift and go to state 5
    variable_declaration           shift and go to state 6
    variable_assignment            shift and go to state 7
    type_declaration               shift and go to state 8
    function_declaration           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    binary_expression              shift and go to state 13
    unary_expression               shift and go to state 14
    value                          shift and go to state 15
    basic_var_assignment           shift and go to state 18
    object_var_assignment          shift and go to state 19
    function_header                shift and go to state 21
    while_header                   shift and go to state 23
    unary_operator                 shift and go to state 26
    atribute_access                shift and go to state 31

state 1

    (0) S' -> program .



state 2

    (2) program -> statement_list .

    $end            reduce using rule 2 (program -> statement_list .)


state 3

    (3) statement_list -> statement . statement_list
    (3) statement_list -> . statement statement_list
    (4) statement_list -> . empty
    (5) statement -> . expression SEMICOLON
    (6) statement -> . variable_declaration SEMICOLON
    (7) statement -> . variable_assignment SEMICOLON
    (8) statement -> . type_declaration SEMICOLON
    (9) statement -> . function_declaration
    (10) statement -> . if_statement
    (11) statement -> . while_statement
    (1) empty -> .
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . binary_expression
    (14) expression -> . unary_expression
    (15) expression -> . value
    (47) variable_declaration -> . LET ID recursive_variable_declaration
    (48) variable_declaration -> . LET ID TWO_POINTS ID recursive_variable_declaration
    (49) variable_declaration -> . LET ID TWO_POINTS type recursive_variable_declaration
    (53) variable_assignment -> . basic_var_assignment
    (54) variable_assignment -> . object_var_assignment
    (72) type_declaration -> . TYPE ID ASSIGN type_body
    (92) function_declaration -> . function_header function_body
    (104) if_statement -> . IF if_evaluation if_statements else_statement
    (109) while_statement -> . while_header while_statements
    (16) binary_expression -> . expression PLUS expression
    (17) binary_expression -> . expression MINUS expression
    (18) binary_expression -> . expression MULTIPLY expression
    (19) binary_expression -> . expression DIVIDE expression
    (20) binary_expression -> . expression AND expression
    (21) binary_expression -> . expression OR expression
    (22) binary_expression -> . expression EQUALS expression
    (23) binary_expression -> . expression GREATER_THAN expression
    (24) binary_expression -> . expression LESS_THAN expression
    (25) binary_expression -> . expression GREATER_EQUAL expression
    (26) binary_expression -> . expression LESS_EQUAL expression
    (27) unary_expression -> . unary_operator L_PARENTHESIS expression R_PARENTHESIS
    (28) unary_expression -> . unary_operator value
    (32) value -> . NUMBER_VALUE
    (33) value -> . CHAR_VALUE
    (34) value -> . BOOL_VALUE
    (35) value -> . ID
    (36) value -> . NULL
    (37) value -> . ID L_PARENTHESIS argument_list R_PARENTHESIS
    (38) value -> . ID DOT ID recursive_atribute_access
    (39) value -> . ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access
    (55) basic_var_assignment -> . ID ASSIGN expression
    (56) basic_var_assignment -> . variable_declaration ASSIGN expression
    (57) object_var_assignment -> . variable_declaration ASSIGN object_body
    (58) object_var_assignment -> . ID ASSIGN object_body
    (59) object_var_assignment -> . atribute_access ASSIGN expression
    (60) object_var_assignment -> . atribute_access ASSIGN object_body
    (93) function_header -> . FUNCTION ID L_PARENTHESIS function_params R_PARENTHESIS TWO_POINTS return_type
    (110) while_header -> . WHILE L_PARENTHESIS expression R_PARENTHESIS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . PLUS
    (43) atribute_access -> . ID recursive_atribute_access

    $end            reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    R_BRACKET       reduce using rule 1 (empty -> .)
    L_PARENTHESIS   shift and go to state 12
    LET             shift and go to state 16
    TYPE            shift and go to state 20
    IF              shift and go to state 22
    NUMBER_VALUE    shift and go to state 27
    CHAR_VALUE      shift and go to state 28
    BOOL_VALUE      shift and go to state 29
    ID              shift and go to state 17
    NULL            shift and go to state 30
    FUNCTION        shift and go to state 32
    WHILE           shift and go to state 33
    MINUS           shift and go to state 25
    NOT             shift and go to state 34
    PLUS            shift and go to state 24

    statement                      shift and go to state 3
    statement_list                 shift and go to state 35
    empty                          shift and go to state 4
    expression                     shift and go to state 5
    variable_declaration           shift and go to state 6
    variable_assignment            shift and go to state 7
    type_declaration               shift and go to state 8
    function_declaration           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    binary_expression              shift and go to state 13
    unary_expression               shift and go to state 14
    value                          shift and go to state 15
    basic_var_assignment           shift and go to state 18
    object_var_assignment          shift and go to state 19
    function_header                shift and go to state 21
    while_header                   shift and go to state 23
    unary_operator                 shift and go to state 26
    atribute_access                shift and go to state 31

state 4

    (4) statement_list -> empty .

    $end            reduce using rule 4 (statement_list -> empty .)
    RETURN          reduce using rule 4 (statement_list -> empty .)
    R_BRACKET       reduce using rule 4 (statement_list -> empty .)


state 5

    (5) statement -> expression . SEMICOLON
    (16) binary_expression -> expression . PLUS expression
    (17) binary_expression -> expression . MINUS expression
    (18) binary_expression -> expression . MULTIPLY expression
    (19) binary_expression -> expression . DIVIDE expression
    (20) binary_expression -> expression . AND expression
    (21) binary_expression -> expression . OR expression
    (22) binary_expression -> expression . EQUALS expression
    (23) binary_expression -> expression . GREATER_THAN expression
    (24) binary_expression -> expression . LESS_THAN expression
    (25) binary_expression -> expression . GREATER_EQUAL expression
    (26) binary_expression -> expression . LESS_EQUAL expression

    SEMICOLON       shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    EQUALS          shift and go to state 43
    GREATER_THAN    shift and go to state 44
    LESS_THAN       shift and go to state 45
    GREATER_EQUAL   shift and go to state 46
    LESS_EQUAL      shift and go to state 47


state 6

    (6) statement -> variable_declaration . SEMICOLON
    (56) basic_var_assignment -> variable_declaration . ASSIGN expression
    (57) object_var_assignment -> variable_declaration . ASSIGN object_body

    SEMICOLON       shift and go to state 48
    ASSIGN          shift and go to state 49


state 7

    (7) statement -> variable_assignment . SEMICOLON

    SEMICOLON       shift and go to state 50


state 8

    (8) statement -> type_declaration . SEMICOLON

    SEMICOLON       shift and go to state 51


state 9

    (9) statement -> function_declaration .

    L_PARENTHESIS   reduce using rule 9 (statement -> function_declaration .)
    LET             reduce using rule 9 (statement -> function_declaration .)
    TYPE            reduce using rule 9 (statement -> function_declaration .)
    IF              reduce using rule 9 (statement -> function_declaration .)
    NUMBER_VALUE    reduce using rule 9 (statement -> function_declaration .)
    CHAR_VALUE      reduce using rule 9 (statement -> function_declaration .)
    BOOL_VALUE      reduce using rule 9 (statement -> function_declaration .)
    ID              reduce using rule 9 (statement -> function_declaration .)
    NULL            reduce using rule 9 (statement -> function_declaration .)
    FUNCTION        reduce using rule 9 (statement -> function_declaration .)
    WHILE           reduce using rule 9 (statement -> function_declaration .)
    MINUS           reduce using rule 9 (statement -> function_declaration .)
    NOT             reduce using rule 9 (statement -> function_declaration .)
    PLUS            reduce using rule 9 (statement -> function_declaration .)
    $end            reduce using rule 9 (statement -> function_declaration .)
    RETURN          reduce using rule 9 (statement -> function_declaration .)
    R_BRACKET       reduce using rule 9 (statement -> function_declaration .)


state 10

    (10) statement -> if_statement .

    L_PARENTHESIS   reduce using rule 10 (statement -> if_statement .)
    LET             reduce using rule 10 (statement -> if_statement .)
    TYPE            reduce using rule 10 (statement -> if_statement .)
    IF              reduce using rule 10 (statement -> if_statement .)
    NUMBER_VALUE    reduce using rule 10 (statement -> if_statement .)
    CHAR_VALUE      reduce using rule 10 (statement -> if_statement .)
    BOOL_VALUE      reduce using rule 10 (statement -> if_statement .)
    ID              reduce using rule 10 (statement -> if_statement .)
    NULL            reduce using rule 10 (statement -> if_statement .)
    FUNCTION        reduce using rule 10 (statement -> if_statement .)
    WHILE           reduce using rule 10 (statement -> if_statement .)
    MINUS           reduce using rule 10 (statement -> if_statement .)
    NOT             reduce using rule 10 (statement -> if_statement .)
    PLUS            reduce using rule 10 (statement -> if_statement .)
    $end            reduce using rule 10 (statement -> if_statement .)
    RETURN          reduce using rule 10 (statement -> if_statement .)
    R_BRACKET       reduce using rule 10 (statement -> if_statement .)


state 11

    (11) statement -> while_statement .

    L_PARENTHESIS   reduce using rule 11 (statement -> while_statement .)
    LET             reduce using rule 11 (statement -> while_statement .)
    TYPE            reduce using rule 11 (statement -> while_statement .)
    IF              reduce using rule 11 (statement -> while_statement .)
    NUMBER_VALUE    reduce using rule 11 (statement -> while_statement .)
    CHAR_VALUE      reduce using rule 11 (statement -> while_statement .)
    BOOL_VALUE      reduce using rule 11 (statement -> while_statement .)
    ID              reduce using rule 11 (statement -> while_statement .)
    NULL            reduce using rule 11 (statement -> while_statement .)
    FUNCTION        reduce using rule 11 (statement -> while_statement .)
    WHILE           reduce using rule 11 (statement -> while_statement .)
    MINUS           reduce using rule 11 (statement -> while_statement .)
    NOT             reduce using rule 11 (statement -> while_statement .)
    PLUS            reduce using rule 11 (statement -> while_statement .)
    $end            reduce using rule 11 (statement -> while_statement .)
    RETURN          reduce using rule 11 (statement -> while_statement .)
    R_BRACKET       reduce using rule 11 (statement -> while_statement .)


state 12

    (12) expression -> L_PARENTHESIS . expression R_PARENTHESIS
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . binary_expression
    (14) expression -> . unary_expression
    (15) expression -> . value
    (16) binary_expression -> . expression PLUS expression
    (17) binary_expression -> . expression MINUS expression
    (18) binary_expression -> . expression MULTIPLY expression
    (19) binary_expression -> . expression DIVIDE expression
    (20) binary_expression -> . expression AND expression
    (21) binary_expression -> . expression OR expression
    (22) binary_expression -> . expression EQUALS expression
    (23) binary_expression -> . expression GREATER_THAN expression
    (24) binary_expression -> . expression LESS_THAN expression
    (25) binary_expression -> . expression GREATER_EQUAL expression
    (26) binary_expression -> . expression LESS_EQUAL expression
    (27) unary_expression -> . unary_operator L_PARENTHESIS expression R_PARENTHESIS
    (28) unary_expression -> . unary_operator value
    (32) value -> . NUMBER_VALUE
    (33) value -> . CHAR_VALUE
    (34) value -> . BOOL_VALUE
    (35) value -> . ID
    (36) value -> . NULL
    (37) value -> . ID L_PARENTHESIS argument_list R_PARENTHESIS
    (38) value -> . ID DOT ID recursive_atribute_access
    (39) value -> . ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . PLUS

    L_PARENTHESIS   shift and go to state 12
    NUMBER_VALUE    shift and go to state 27
    CHAR_VALUE      shift and go to state 28
    BOOL_VALUE      shift and go to state 29
    ID              shift and go to state 53
    NULL            shift and go to state 30
    MINUS           shift and go to state 25
    NOT             shift and go to state 34
    PLUS            shift and go to state 24

    expression                     shift and go to state 52
    binary_expression              shift and go to state 13
    unary_expression               shift and go to state 14
    value                          shift and go to state 15
    unary_operator                 shift and go to state 26

state 13

    (13) expression -> binary_expression .

    SEMICOLON       reduce using rule 13 (expression -> binary_expression .)
    PLUS            reduce using rule 13 (expression -> binary_expression .)
    MINUS           reduce using rule 13 (expression -> binary_expression .)
    MULTIPLY        reduce using rule 13 (expression -> binary_expression .)
    DIVIDE          reduce using rule 13 (expression -> binary_expression .)
    AND             reduce using rule 13 (expression -> binary_expression .)
    OR              reduce using rule 13 (expression -> binary_expression .)
    EQUALS          reduce using rule 13 (expression -> binary_expression .)
    GREATER_THAN    reduce using rule 13 (expression -> binary_expression .)
    LESS_THAN       reduce using rule 13 (expression -> binary_expression .)
    GREATER_EQUAL   reduce using rule 13 (expression -> binary_expression .)
    LESS_EQUAL      reduce using rule 13 (expression -> binary_expression .)
    R_PARENTHESIS   reduce using rule 13 (expression -> binary_expression .)
    COMMA           reduce using rule 13 (expression -> binary_expression .)
    R_BRACKET       reduce using rule 13 (expression -> binary_expression .)


state 14

    (14) expression -> unary_expression .

    SEMICOLON       reduce using rule 14 (expression -> unary_expression .)
    PLUS            reduce using rule 14 (expression -> unary_expression .)
    MINUS           reduce using rule 14 (expression -> unary_expression .)
    MULTIPLY        reduce using rule 14 (expression -> unary_expression .)
    DIVIDE          reduce using rule 14 (expression -> unary_expression .)
    AND             reduce using rule 14 (expression -> unary_expression .)
    OR              reduce using rule 14 (expression -> unary_expression .)
    EQUALS          reduce using rule 14 (expression -> unary_expression .)
    GREATER_THAN    reduce using rule 14 (expression -> unary_expression .)
    LESS_THAN       reduce using rule 14 (expression -> unary_expression .)
    GREATER_EQUAL   reduce using rule 14 (expression -> unary_expression .)
    LESS_EQUAL      reduce using rule 14 (expression -> unary_expression .)
    R_PARENTHESIS   reduce using rule 14 (expression -> unary_expression .)
    COMMA           reduce using rule 14 (expression -> unary_expression .)
    R_BRACKET       reduce using rule 14 (expression -> unary_expression .)


state 15

    (15) expression -> value .

    SEMICOLON       reduce using rule 15 (expression -> value .)
    PLUS            reduce using rule 15 (expression -> value .)
    MINUS           reduce using rule 15 (expression -> value .)
    MULTIPLY        reduce using rule 15 (expression -> value .)
    DIVIDE          reduce using rule 15 (expression -> value .)
    AND             reduce using rule 15 (expression -> value .)
    OR              reduce using rule 15 (expression -> value .)
    EQUALS          reduce using rule 15 (expression -> value .)
    GREATER_THAN    reduce using rule 15 (expression -> value .)
    LESS_THAN       reduce using rule 15 (expression -> value .)
    GREATER_EQUAL   reduce using rule 15 (expression -> value .)
    LESS_EQUAL      reduce using rule 15 (expression -> value .)
    R_PARENTHESIS   reduce using rule 15 (expression -> value .)
    COMMA           reduce using rule 15 (expression -> value .)
    R_BRACKET       reduce using rule 15 (expression -> value .)


state 16

    (47) variable_declaration -> LET . ID recursive_variable_declaration
    (48) variable_declaration -> LET . ID TWO_POINTS ID recursive_variable_declaration
    (49) variable_declaration -> LET . ID TWO_POINTS type recursive_variable_declaration

    ID              shift and go to state 54


state 17

    (35) value -> ID .
    (37) value -> ID . L_PARENTHESIS argument_list R_PARENTHESIS
    (38) value -> ID . DOT ID recursive_atribute_access
    (39) value -> ID . L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access
    (55) basic_var_assignment -> ID . ASSIGN expression
    (58) object_var_assignment -> ID . ASSIGN object_body
    (43) atribute_access -> ID . recursive_atribute_access
    (44) recursive_atribute_access -> . DOT ID recursive_atribute_access
    (45) recursive_atribute_access -> . L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access
    (46) recursive_atribute_access -> . empty
    (1) empty -> .

  ! shift/reduce conflict for ASSIGN resolved as shift
    SEMICOLON       reduce using rule 35 (value -> ID .)
    PLUS            reduce using rule 35 (value -> ID .)
    MINUS           reduce using rule 35 (value -> ID .)
    MULTIPLY        reduce using rule 35 (value -> ID .)
    DIVIDE          reduce using rule 35 (value -> ID .)
    AND             reduce using rule 35 (value -> ID .)
    OR              reduce using rule 35 (value -> ID .)
    EQUALS          reduce using rule 35 (value -> ID .)
    GREATER_THAN    reduce using rule 35 (value -> ID .)
    LESS_THAN       reduce using rule 35 (value -> ID .)
    GREATER_EQUAL   reduce using rule 35 (value -> ID .)
    LESS_EQUAL      reduce using rule 35 (value -> ID .)
    L_PARENTHESIS   shift and go to state 55
    DOT             shift and go to state 56
    L_SQ_BRACKET    shift and go to state 58
    ASSIGN          shift and go to state 59

  ! ASSIGN          [ reduce using rule 1 (empty -> .) ]

    recursive_atribute_access      shift and go to state 57
    empty                          shift and go to state 60

state 18

    (53) variable_assignment -> basic_var_assignment .

    SEMICOLON       reduce using rule 53 (variable_assignment -> basic_var_assignment .)


state 19

    (54) variable_assignment -> object_var_assignment .

    SEMICOLON       reduce using rule 54 (variable_assignment -> object_var_assignment .)


state 20

    (72) type_declaration -> TYPE . ID ASSIGN type_body

    ID              shift and go to state 61


state 21

    (92) function_declaration -> function_header . function_body
    (94) function_body -> . L_BRACKET statement_list RETURN return_statement R_BRACKET

    L_BRACKET       shift and go to state 63

    function_body                  shift and go to state 62

state 22

    (104) if_statement -> IF . if_evaluation if_statements else_statement
    (105) if_evaluation -> . L_PARENTHESIS expression R_PARENTHESIS

    L_PARENTHESIS   shift and go to state 65

    if_evaluation                  shift and go to state 64

state 23

    (109) while_statement -> while_header . while_statements
    (111) while_statements -> . L_BRACKET statement statement_list R_BRACKET

    L_BRACKET       shift and go to state 67

    while_statements               shift and go to state 66

state 24

    (31) unary_operator -> PLUS .

    L_PARENTHESIS   reduce using rule 31 (unary_operator -> PLUS .)
    NUMBER_VALUE    reduce using rule 31 (unary_operator -> PLUS .)
    CHAR_VALUE      reduce using rule 31 (unary_operator -> PLUS .)
    BOOL_VALUE      reduce using rule 31 (unary_operator -> PLUS .)
    ID              reduce using rule 31 (unary_operator -> PLUS .)
    NULL            reduce using rule 31 (unary_operator -> PLUS .)


state 25

    (29) unary_operator -> MINUS .

    L_PARENTHESIS   reduce using rule 29 (unary_operator -> MINUS .)
    NUMBER_VALUE    reduce using rule 29 (unary_operator -> MINUS .)
    CHAR_VALUE      reduce using rule 29 (unary_operator -> MINUS .)
    BOOL_VALUE      reduce using rule 29 (unary_operator -> MINUS .)
    ID              reduce using rule 29 (unary_operator -> MINUS .)
    NULL            reduce using rule 29 (unary_operator -> MINUS .)


state 26

    (27) unary_expression -> unary_operator . L_PARENTHESIS expression R_PARENTHESIS
    (28) unary_expression -> unary_operator . value
    (32) value -> . NUMBER_VALUE
    (33) value -> . CHAR_VALUE
    (34) value -> . BOOL_VALUE
    (35) value -> . ID
    (36) value -> . NULL
    (37) value -> . ID L_PARENTHESIS argument_list R_PARENTHESIS
    (38) value -> . ID DOT ID recursive_atribute_access
    (39) value -> . ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access

    L_PARENTHESIS   shift and go to state 68
    NUMBER_VALUE    shift and go to state 27
    CHAR_VALUE      shift and go to state 28
    BOOL_VALUE      shift and go to state 29
    ID              shift and go to state 53
    NULL            shift and go to state 30

    value                          shift and go to state 69

state 27

    (32) value -> NUMBER_VALUE .

    SEMICOLON       reduce using rule 32 (value -> NUMBER_VALUE .)
    PLUS            reduce using rule 32 (value -> NUMBER_VALUE .)
    MINUS           reduce using rule 32 (value -> NUMBER_VALUE .)
    MULTIPLY        reduce using rule 32 (value -> NUMBER_VALUE .)
    DIVIDE          reduce using rule 32 (value -> NUMBER_VALUE .)
    AND             reduce using rule 32 (value -> NUMBER_VALUE .)
    OR              reduce using rule 32 (value -> NUMBER_VALUE .)
    EQUALS          reduce using rule 32 (value -> NUMBER_VALUE .)
    GREATER_THAN    reduce using rule 32 (value -> NUMBER_VALUE .)
    LESS_THAN       reduce using rule 32 (value -> NUMBER_VALUE .)
    GREATER_EQUAL   reduce using rule 32 (value -> NUMBER_VALUE .)
    LESS_EQUAL      reduce using rule 32 (value -> NUMBER_VALUE .)
    R_PARENTHESIS   reduce using rule 32 (value -> NUMBER_VALUE .)
    COMMA           reduce using rule 32 (value -> NUMBER_VALUE .)
    R_BRACKET       reduce using rule 32 (value -> NUMBER_VALUE .)


state 28

    (33) value -> CHAR_VALUE .

    SEMICOLON       reduce using rule 33 (value -> CHAR_VALUE .)
    PLUS            reduce using rule 33 (value -> CHAR_VALUE .)
    MINUS           reduce using rule 33 (value -> CHAR_VALUE .)
    MULTIPLY        reduce using rule 33 (value -> CHAR_VALUE .)
    DIVIDE          reduce using rule 33 (value -> CHAR_VALUE .)
    AND             reduce using rule 33 (value -> CHAR_VALUE .)
    OR              reduce using rule 33 (value -> CHAR_VALUE .)
    EQUALS          reduce using rule 33 (value -> CHAR_VALUE .)
    GREATER_THAN    reduce using rule 33 (value -> CHAR_VALUE .)
    LESS_THAN       reduce using rule 33 (value -> CHAR_VALUE .)
    GREATER_EQUAL   reduce using rule 33 (value -> CHAR_VALUE .)
    LESS_EQUAL      reduce using rule 33 (value -> CHAR_VALUE .)
    R_PARENTHESIS   reduce using rule 33 (value -> CHAR_VALUE .)
    COMMA           reduce using rule 33 (value -> CHAR_VALUE .)
    R_BRACKET       reduce using rule 33 (value -> CHAR_VALUE .)


state 29

    (34) value -> BOOL_VALUE .

    SEMICOLON       reduce using rule 34 (value -> BOOL_VALUE .)
    PLUS            reduce using rule 34 (value -> BOOL_VALUE .)
    MINUS           reduce using rule 34 (value -> BOOL_VALUE .)
    MULTIPLY        reduce using rule 34 (value -> BOOL_VALUE .)
    DIVIDE          reduce using rule 34 (value -> BOOL_VALUE .)
    AND             reduce using rule 34 (value -> BOOL_VALUE .)
    OR              reduce using rule 34 (value -> BOOL_VALUE .)
    EQUALS          reduce using rule 34 (value -> BOOL_VALUE .)
    GREATER_THAN    reduce using rule 34 (value -> BOOL_VALUE .)
    LESS_THAN       reduce using rule 34 (value -> BOOL_VALUE .)
    GREATER_EQUAL   reduce using rule 34 (value -> BOOL_VALUE .)
    LESS_EQUAL      reduce using rule 34 (value -> BOOL_VALUE .)
    R_PARENTHESIS   reduce using rule 34 (value -> BOOL_VALUE .)
    COMMA           reduce using rule 34 (value -> BOOL_VALUE .)
    R_BRACKET       reduce using rule 34 (value -> BOOL_VALUE .)


state 30

    (36) value -> NULL .

    SEMICOLON       reduce using rule 36 (value -> NULL .)
    PLUS            reduce using rule 36 (value -> NULL .)
    MINUS           reduce using rule 36 (value -> NULL .)
    MULTIPLY        reduce using rule 36 (value -> NULL .)
    DIVIDE          reduce using rule 36 (value -> NULL .)
    AND             reduce using rule 36 (value -> NULL .)
    OR              reduce using rule 36 (value -> NULL .)
    EQUALS          reduce using rule 36 (value -> NULL .)
    GREATER_THAN    reduce using rule 36 (value -> NULL .)
    LESS_THAN       reduce using rule 36 (value -> NULL .)
    GREATER_EQUAL   reduce using rule 36 (value -> NULL .)
    LESS_EQUAL      reduce using rule 36 (value -> NULL .)
    R_PARENTHESIS   reduce using rule 36 (value -> NULL .)
    COMMA           reduce using rule 36 (value -> NULL .)
    R_BRACKET       reduce using rule 36 (value -> NULL .)


state 31

    (59) object_var_assignment -> atribute_access . ASSIGN expression
    (60) object_var_assignment -> atribute_access . ASSIGN object_body

    ASSIGN          shift and go to state 70


state 32

    (93) function_header -> FUNCTION . ID L_PARENTHESIS function_params R_PARENTHESIS TWO_POINTS return_type

    ID              shift and go to state 71


state 33

    (110) while_header -> WHILE . L_PARENTHESIS expression R_PARENTHESIS

    L_PARENTHESIS   shift and go to state 72


state 34

    (30) unary_operator -> NOT .

    L_PARENTHESIS   reduce using rule 30 (unary_operator -> NOT .)
    NUMBER_VALUE    reduce using rule 30 (unary_operator -> NOT .)
    CHAR_VALUE      reduce using rule 30 (unary_operator -> NOT .)
    BOOL_VALUE      reduce using rule 30 (unary_operator -> NOT .)
    ID              reduce using rule 30 (unary_operator -> NOT .)
    NULL            reduce using rule 30 (unary_operator -> NOT .)


state 35

    (3) statement_list -> statement statement_list .

    $end            reduce using rule 3 (statement_list -> statement statement_list .)
    RETURN          reduce using rule 3 (statement_list -> statement statement_list .)
    R_BRACKET       reduce using rule 3 (statement_list -> statement statement_list .)


state 36

    (5) statement -> expression SEMICOLON .

    L_PARENTHESIS   reduce using rule 5 (statement -> expression SEMICOLON .)
    LET             reduce using rule 5 (statement -> expression SEMICOLON .)
    TYPE            reduce using rule 5 (statement -> expression SEMICOLON .)
    IF              reduce using rule 5 (statement -> expression SEMICOLON .)
    NUMBER_VALUE    reduce using rule 5 (statement -> expression SEMICOLON .)
    CHAR_VALUE      reduce using rule 5 (statement -> expression SEMICOLON .)
    BOOL_VALUE      reduce using rule 5 (statement -> expression SEMICOLON .)
    ID              reduce using rule 5 (statement -> expression SEMICOLON .)
    NULL            reduce using rule 5 (statement -> expression SEMICOLON .)
    FUNCTION        reduce using rule 5 (statement -> expression SEMICOLON .)
    WHILE           reduce using rule 5 (statement -> expression SEMICOLON .)
    MINUS           reduce using rule 5 (statement -> expression SEMICOLON .)
    NOT             reduce using rule 5 (statement -> expression SEMICOLON .)
    PLUS            reduce using rule 5 (statement -> expression SEMICOLON .)
    $end            reduce using rule 5 (statement -> expression SEMICOLON .)
    RETURN          reduce using rule 5 (statement -> expression SEMICOLON .)
    R_BRACKET       reduce using rule 5 (statement -> expression SEMICOLON .)


state 37

    (16) binary_expression -> expression PLUS . expression
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . binary_expression
    (14) expression -> . unary_expression
    (15) expression -> . value
    (16) binary_expression -> . expression PLUS expression
    (17) binary_expression -> . expression MINUS expression
    (18) binary_expression -> . expression MULTIPLY expression
    (19) binary_expression -> . expression DIVIDE expression
    (20) binary_expression -> . expression AND expression
    (21) binary_expression -> . expression OR expression
    (22) binary_expression -> . expression EQUALS expression
    (23) binary_expression -> . expression GREATER_THAN expression
    (24) binary_expression -> . expression LESS_THAN expression
    (25) binary_expression -> . expression GREATER_EQUAL expression
    (26) binary_expression -> . expression LESS_EQUAL expression
    (27) unary_expression -> . unary_operator L_PARENTHESIS expression R_PARENTHESIS
    (28) unary_expression -> . unary_operator value
    (32) value -> . NUMBER_VALUE
    (33) value -> . CHAR_VALUE
    (34) value -> . BOOL_VALUE
    (35) value -> . ID
    (36) value -> . NULL
    (37) value -> . ID L_PARENTHESIS argument_list R_PARENTHESIS
    (38) value -> . ID DOT ID recursive_atribute_access
    (39) value -> . ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . PLUS

    L_PARENTHESIS   shift and go to state 12
    NUMBER_VALUE    shift and go to state 27
    CHAR_VALUE      shift and go to state 28
    BOOL_VALUE      shift and go to state 29
    ID              shift and go to state 53
    NULL            shift and go to state 30
    MINUS           shift and go to state 25
    NOT             shift and go to state 34
    PLUS            shift and go to state 24

    expression                     shift and go to state 73
    binary_expression              shift and go to state 13
    unary_expression               shift and go to state 14
    value                          shift and go to state 15
    unary_operator                 shift and go to state 26

state 38

    (17) binary_expression -> expression MINUS . expression
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . binary_expression
    (14) expression -> . unary_expression
    (15) expression -> . value
    (16) binary_expression -> . expression PLUS expression
    (17) binary_expression -> . expression MINUS expression
    (18) binary_expression -> . expression MULTIPLY expression
    (19) binary_expression -> . expression DIVIDE expression
    (20) binary_expression -> . expression AND expression
    (21) binary_expression -> . expression OR expression
    (22) binary_expression -> . expression EQUALS expression
    (23) binary_expression -> . expression GREATER_THAN expression
    (24) binary_expression -> . expression LESS_THAN expression
    (25) binary_expression -> . expression GREATER_EQUAL expression
    (26) binary_expression -> . expression LESS_EQUAL expression
    (27) unary_expression -> . unary_operator L_PARENTHESIS expression R_PARENTHESIS
    (28) unary_expression -> . unary_operator value
    (32) value -> . NUMBER_VALUE
    (33) value -> . CHAR_VALUE
    (34) value -> . BOOL_VALUE
    (35) value -> . ID
    (36) value -> . NULL
    (37) value -> . ID L_PARENTHESIS argument_list R_PARENTHESIS
    (38) value -> . ID DOT ID recursive_atribute_access
    (39) value -> . ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . PLUS

    L_PARENTHESIS   shift and go to state 12
    NUMBER_VALUE    shift and go to state 27
    CHAR_VALUE      shift and go to state 28
    BOOL_VALUE      shift and go to state 29
    ID              shift and go to state 53
    NULL            shift and go to state 30
    MINUS           shift and go to state 25
    NOT             shift and go to state 34
    PLUS            shift and go to state 24

    expression                     shift and go to state 74
    binary_expression              shift and go to state 13
    unary_expression               shift and go to state 14
    value                          shift and go to state 15
    unary_operator                 shift and go to state 26

state 39

    (18) binary_expression -> expression MULTIPLY . expression
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . binary_expression
    (14) expression -> . unary_expression
    (15) expression -> . value
    (16) binary_expression -> . expression PLUS expression
    (17) binary_expression -> . expression MINUS expression
    (18) binary_expression -> . expression MULTIPLY expression
    (19) binary_expression -> . expression DIVIDE expression
    (20) binary_expression -> . expression AND expression
    (21) binary_expression -> . expression OR expression
    (22) binary_expression -> . expression EQUALS expression
    (23) binary_expression -> . expression GREATER_THAN expression
    (24) binary_expression -> . expression LESS_THAN expression
    (25) binary_expression -> . expression GREATER_EQUAL expression
    (26) binary_expression -> . expression LESS_EQUAL expression
    (27) unary_expression -> . unary_operator L_PARENTHESIS expression R_PARENTHESIS
    (28) unary_expression -> . unary_operator value
    (32) value -> . NUMBER_VALUE
    (33) value -> . CHAR_VALUE
    (34) value -> . BOOL_VALUE
    (35) value -> . ID
    (36) value -> . NULL
    (37) value -> . ID L_PARENTHESIS argument_list R_PARENTHESIS
    (38) value -> . ID DOT ID recursive_atribute_access
    (39) value -> . ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . PLUS

    L_PARENTHESIS   shift and go to state 12
    NUMBER_VALUE    shift and go to state 27
    CHAR_VALUE      shift and go to state 28
    BOOL_VALUE      shift and go to state 29
    ID              shift and go to state 53
    NULL            shift and go to state 30
    MINUS           shift and go to state 25
    NOT             shift and go to state 34
    PLUS            shift and go to state 24

    expression                     shift and go to state 75
    binary_expression              shift and go to state 13
    unary_expression               shift and go to state 14
    value                          shift and go to state 15
    unary_operator                 shift and go to state 26

state 40

    (19) binary_expression -> expression DIVIDE . expression
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . binary_expression
    (14) expression -> . unary_expression
    (15) expression -> . value
    (16) binary_expression -> . expression PLUS expression
    (17) binary_expression -> . expression MINUS expression
    (18) binary_expression -> . expression MULTIPLY expression
    (19) binary_expression -> . expression DIVIDE expression
    (20) binary_expression -> . expression AND expression
    (21) binary_expression -> . expression OR expression
    (22) binary_expression -> . expression EQUALS expression
    (23) binary_expression -> . expression GREATER_THAN expression
    (24) binary_expression -> . expression LESS_THAN expression
    (25) binary_expression -> . expression GREATER_EQUAL expression
    (26) binary_expression -> . expression LESS_EQUAL expression
    (27) unary_expression -> . unary_operator L_PARENTHESIS expression R_PARENTHESIS
    (28) unary_expression -> . unary_operator value
    (32) value -> . NUMBER_VALUE
    (33) value -> . CHAR_VALUE
    (34) value -> . BOOL_VALUE
    (35) value -> . ID
    (36) value -> . NULL
    (37) value -> . ID L_PARENTHESIS argument_list R_PARENTHESIS
    (38) value -> . ID DOT ID recursive_atribute_access
    (39) value -> . ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . PLUS

    L_PARENTHESIS   shift and go to state 12
    NUMBER_VALUE    shift and go to state 27
    CHAR_VALUE      shift and go to state 28
    BOOL_VALUE      shift and go to state 29
    ID              shift and go to state 53
    NULL            shift and go to state 30
    MINUS           shift and go to state 25
    NOT             shift and go to state 34
    PLUS            shift and go to state 24

    expression                     shift and go to state 76
    binary_expression              shift and go to state 13
    unary_expression               shift and go to state 14
    value                          shift and go to state 15
    unary_operator                 shift and go to state 26

state 41

    (20) binary_expression -> expression AND . expression
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . binary_expression
    (14) expression -> . unary_expression
    (15) expression -> . value
    (16) binary_expression -> . expression PLUS expression
    (17) binary_expression -> . expression MINUS expression
    (18) binary_expression -> . expression MULTIPLY expression
    (19) binary_expression -> . expression DIVIDE expression
    (20) binary_expression -> . expression AND expression
    (21) binary_expression -> . expression OR expression
    (22) binary_expression -> . expression EQUALS expression
    (23) binary_expression -> . expression GREATER_THAN expression
    (24) binary_expression -> . expression LESS_THAN expression
    (25) binary_expression -> . expression GREATER_EQUAL expression
    (26) binary_expression -> . expression LESS_EQUAL expression
    (27) unary_expression -> . unary_operator L_PARENTHESIS expression R_PARENTHESIS
    (28) unary_expression -> . unary_operator value
    (32) value -> . NUMBER_VALUE
    (33) value -> . CHAR_VALUE
    (34) value -> . BOOL_VALUE
    (35) value -> . ID
    (36) value -> . NULL
    (37) value -> . ID L_PARENTHESIS argument_list R_PARENTHESIS
    (38) value -> . ID DOT ID recursive_atribute_access
    (39) value -> . ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . PLUS

    L_PARENTHESIS   shift and go to state 12
    NUMBER_VALUE    shift and go to state 27
    CHAR_VALUE      shift and go to state 28
    BOOL_VALUE      shift and go to state 29
    ID              shift and go to state 53
    NULL            shift and go to state 30
    MINUS           shift and go to state 25
    NOT             shift and go to state 34
    PLUS            shift and go to state 24

    expression                     shift and go to state 77
    binary_expression              shift and go to state 13
    unary_expression               shift and go to state 14
    value                          shift and go to state 15
    unary_operator                 shift and go to state 26

state 42

    (21) binary_expression -> expression OR . expression
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . binary_expression
    (14) expression -> . unary_expression
    (15) expression -> . value
    (16) binary_expression -> . expression PLUS expression
    (17) binary_expression -> . expression MINUS expression
    (18) binary_expression -> . expression MULTIPLY expression
    (19) binary_expression -> . expression DIVIDE expression
    (20) binary_expression -> . expression AND expression
    (21) binary_expression -> . expression OR expression
    (22) binary_expression -> . expression EQUALS expression
    (23) binary_expression -> . expression GREATER_THAN expression
    (24) binary_expression -> . expression LESS_THAN expression
    (25) binary_expression -> . expression GREATER_EQUAL expression
    (26) binary_expression -> . expression LESS_EQUAL expression
    (27) unary_expression -> . unary_operator L_PARENTHESIS expression R_PARENTHESIS
    (28) unary_expression -> . unary_operator value
    (32) value -> . NUMBER_VALUE
    (33) value -> . CHAR_VALUE
    (34) value -> . BOOL_VALUE
    (35) value -> . ID
    (36) value -> . NULL
    (37) value -> . ID L_PARENTHESIS argument_list R_PARENTHESIS
    (38) value -> . ID DOT ID recursive_atribute_access
    (39) value -> . ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . PLUS

    L_PARENTHESIS   shift and go to state 12
    NUMBER_VALUE    shift and go to state 27
    CHAR_VALUE      shift and go to state 28
    BOOL_VALUE      shift and go to state 29
    ID              shift and go to state 53
    NULL            shift and go to state 30
    MINUS           shift and go to state 25
    NOT             shift and go to state 34
    PLUS            shift and go to state 24

    expression                     shift and go to state 78
    binary_expression              shift and go to state 13
    unary_expression               shift and go to state 14
    value                          shift and go to state 15
    unary_operator                 shift and go to state 26

state 43

    (22) binary_expression -> expression EQUALS . expression
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . binary_expression
    (14) expression -> . unary_expression
    (15) expression -> . value
    (16) binary_expression -> . expression PLUS expression
    (17) binary_expression -> . expression MINUS expression
    (18) binary_expression -> . expression MULTIPLY expression
    (19) binary_expression -> . expression DIVIDE expression
    (20) binary_expression -> . expression AND expression
    (21) binary_expression -> . expression OR expression
    (22) binary_expression -> . expression EQUALS expression
    (23) binary_expression -> . expression GREATER_THAN expression
    (24) binary_expression -> . expression LESS_THAN expression
    (25) binary_expression -> . expression GREATER_EQUAL expression
    (26) binary_expression -> . expression LESS_EQUAL expression
    (27) unary_expression -> . unary_operator L_PARENTHESIS expression R_PARENTHESIS
    (28) unary_expression -> . unary_operator value
    (32) value -> . NUMBER_VALUE
    (33) value -> . CHAR_VALUE
    (34) value -> . BOOL_VALUE
    (35) value -> . ID
    (36) value -> . NULL
    (37) value -> . ID L_PARENTHESIS argument_list R_PARENTHESIS
    (38) value -> . ID DOT ID recursive_atribute_access
    (39) value -> . ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . PLUS

    L_PARENTHESIS   shift and go to state 12
    NUMBER_VALUE    shift and go to state 27
    CHAR_VALUE      shift and go to state 28
    BOOL_VALUE      shift and go to state 29
    ID              shift and go to state 53
    NULL            shift and go to state 30
    MINUS           shift and go to state 25
    NOT             shift and go to state 34
    PLUS            shift and go to state 24

    expression                     shift and go to state 79
    binary_expression              shift and go to state 13
    unary_expression               shift and go to state 14
    value                          shift and go to state 15
    unary_operator                 shift and go to state 26

state 44

    (23) binary_expression -> expression GREATER_THAN . expression
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . binary_expression
    (14) expression -> . unary_expression
    (15) expression -> . value
    (16) binary_expression -> . expression PLUS expression
    (17) binary_expression -> . expression MINUS expression
    (18) binary_expression -> . expression MULTIPLY expression
    (19) binary_expression -> . expression DIVIDE expression
    (20) binary_expression -> . expression AND expression
    (21) binary_expression -> . expression OR expression
    (22) binary_expression -> . expression EQUALS expression
    (23) binary_expression -> . expression GREATER_THAN expression
    (24) binary_expression -> . expression LESS_THAN expression
    (25) binary_expression -> . expression GREATER_EQUAL expression
    (26) binary_expression -> . expression LESS_EQUAL expression
    (27) unary_expression -> . unary_operator L_PARENTHESIS expression R_PARENTHESIS
    (28) unary_expression -> . unary_operator value
    (32) value -> . NUMBER_VALUE
    (33) value -> . CHAR_VALUE
    (34) value -> . BOOL_VALUE
    (35) value -> . ID
    (36) value -> . NULL
    (37) value -> . ID L_PARENTHESIS argument_list R_PARENTHESIS
    (38) value -> . ID DOT ID recursive_atribute_access
    (39) value -> . ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . PLUS

    L_PARENTHESIS   shift and go to state 12
    NUMBER_VALUE    shift and go to state 27
    CHAR_VALUE      shift and go to state 28
    BOOL_VALUE      shift and go to state 29
    ID              shift and go to state 53
    NULL            shift and go to state 30
    MINUS           shift and go to state 25
    NOT             shift and go to state 34
    PLUS            shift and go to state 24

    expression                     shift and go to state 80
    binary_expression              shift and go to state 13
    unary_expression               shift and go to state 14
    value                          shift and go to state 15
    unary_operator                 shift and go to state 26

state 45

    (24) binary_expression -> expression LESS_THAN . expression
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . binary_expression
    (14) expression -> . unary_expression
    (15) expression -> . value
    (16) binary_expression -> . expression PLUS expression
    (17) binary_expression -> . expression MINUS expression
    (18) binary_expression -> . expression MULTIPLY expression
    (19) binary_expression -> . expression DIVIDE expression
    (20) binary_expression -> . expression AND expression
    (21) binary_expression -> . expression OR expression
    (22) binary_expression -> . expression EQUALS expression
    (23) binary_expression -> . expression GREATER_THAN expression
    (24) binary_expression -> . expression LESS_THAN expression
    (25) binary_expression -> . expression GREATER_EQUAL expression
    (26) binary_expression -> . expression LESS_EQUAL expression
    (27) unary_expression -> . unary_operator L_PARENTHESIS expression R_PARENTHESIS
    (28) unary_expression -> . unary_operator value
    (32) value -> . NUMBER_VALUE
    (33) value -> . CHAR_VALUE
    (34) value -> . BOOL_VALUE
    (35) value -> . ID
    (36) value -> . NULL
    (37) value -> . ID L_PARENTHESIS argument_list R_PARENTHESIS
    (38) value -> . ID DOT ID recursive_atribute_access
    (39) value -> . ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . PLUS

    L_PARENTHESIS   shift and go to state 12
    NUMBER_VALUE    shift and go to state 27
    CHAR_VALUE      shift and go to state 28
    BOOL_VALUE      shift and go to state 29
    ID              shift and go to state 53
    NULL            shift and go to state 30
    MINUS           shift and go to state 25
    NOT             shift and go to state 34
    PLUS            shift and go to state 24

    expression                     shift and go to state 81
    binary_expression              shift and go to state 13
    unary_expression               shift and go to state 14
    value                          shift and go to state 15
    unary_operator                 shift and go to state 26

state 46

    (25) binary_expression -> expression GREATER_EQUAL . expression
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . binary_expression
    (14) expression -> . unary_expression
    (15) expression -> . value
    (16) binary_expression -> . expression PLUS expression
    (17) binary_expression -> . expression MINUS expression
    (18) binary_expression -> . expression MULTIPLY expression
    (19) binary_expression -> . expression DIVIDE expression
    (20) binary_expression -> . expression AND expression
    (21) binary_expression -> . expression OR expression
    (22) binary_expression -> . expression EQUALS expression
    (23) binary_expression -> . expression GREATER_THAN expression
    (24) binary_expression -> . expression LESS_THAN expression
    (25) binary_expression -> . expression GREATER_EQUAL expression
    (26) binary_expression -> . expression LESS_EQUAL expression
    (27) unary_expression -> . unary_operator L_PARENTHESIS expression R_PARENTHESIS
    (28) unary_expression -> . unary_operator value
    (32) value -> . NUMBER_VALUE
    (33) value -> . CHAR_VALUE
    (34) value -> . BOOL_VALUE
    (35) value -> . ID
    (36) value -> . NULL
    (37) value -> . ID L_PARENTHESIS argument_list R_PARENTHESIS
    (38) value -> . ID DOT ID recursive_atribute_access
    (39) value -> . ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . PLUS

    L_PARENTHESIS   shift and go to state 12
    NUMBER_VALUE    shift and go to state 27
    CHAR_VALUE      shift and go to state 28
    BOOL_VALUE      shift and go to state 29
    ID              shift and go to state 53
    NULL            shift and go to state 30
    MINUS           shift and go to state 25
    NOT             shift and go to state 34
    PLUS            shift and go to state 24

    expression                     shift and go to state 82
    binary_expression              shift and go to state 13
    unary_expression               shift and go to state 14
    value                          shift and go to state 15
    unary_operator                 shift and go to state 26

state 47

    (26) binary_expression -> expression LESS_EQUAL . expression
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . binary_expression
    (14) expression -> . unary_expression
    (15) expression -> . value
    (16) binary_expression -> . expression PLUS expression
    (17) binary_expression -> . expression MINUS expression
    (18) binary_expression -> . expression MULTIPLY expression
    (19) binary_expression -> . expression DIVIDE expression
    (20) binary_expression -> . expression AND expression
    (21) binary_expression -> . expression OR expression
    (22) binary_expression -> . expression EQUALS expression
    (23) binary_expression -> . expression GREATER_THAN expression
    (24) binary_expression -> . expression LESS_THAN expression
    (25) binary_expression -> . expression GREATER_EQUAL expression
    (26) binary_expression -> . expression LESS_EQUAL expression
    (27) unary_expression -> . unary_operator L_PARENTHESIS expression R_PARENTHESIS
    (28) unary_expression -> . unary_operator value
    (32) value -> . NUMBER_VALUE
    (33) value -> . CHAR_VALUE
    (34) value -> . BOOL_VALUE
    (35) value -> . ID
    (36) value -> . NULL
    (37) value -> . ID L_PARENTHESIS argument_list R_PARENTHESIS
    (38) value -> . ID DOT ID recursive_atribute_access
    (39) value -> . ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . PLUS

    L_PARENTHESIS   shift and go to state 12
    NUMBER_VALUE    shift and go to state 27
    CHAR_VALUE      shift and go to state 28
    BOOL_VALUE      shift and go to state 29
    ID              shift and go to state 53
    NULL            shift and go to state 30
    MINUS           shift and go to state 25
    NOT             shift and go to state 34
    PLUS            shift and go to state 24

    expression                     shift and go to state 83
    binary_expression              shift and go to state 13
    unary_expression               shift and go to state 14
    value                          shift and go to state 15
    unary_operator                 shift and go to state 26

state 48

    (6) statement -> variable_declaration SEMICOLON .

    L_PARENTHESIS   reduce using rule 6 (statement -> variable_declaration SEMICOLON .)
    LET             reduce using rule 6 (statement -> variable_declaration SEMICOLON .)
    TYPE            reduce using rule 6 (statement -> variable_declaration SEMICOLON .)
    IF              reduce using rule 6 (statement -> variable_declaration SEMICOLON .)
    NUMBER_VALUE    reduce using rule 6 (statement -> variable_declaration SEMICOLON .)
    CHAR_VALUE      reduce using rule 6 (statement -> variable_declaration SEMICOLON .)
    BOOL_VALUE      reduce using rule 6 (statement -> variable_declaration SEMICOLON .)
    ID              reduce using rule 6 (statement -> variable_declaration SEMICOLON .)
    NULL            reduce using rule 6 (statement -> variable_declaration SEMICOLON .)
    FUNCTION        reduce using rule 6 (statement -> variable_declaration SEMICOLON .)
    WHILE           reduce using rule 6 (statement -> variable_declaration SEMICOLON .)
    MINUS           reduce using rule 6 (statement -> variable_declaration SEMICOLON .)
    NOT             reduce using rule 6 (statement -> variable_declaration SEMICOLON .)
    PLUS            reduce using rule 6 (statement -> variable_declaration SEMICOLON .)
    $end            reduce using rule 6 (statement -> variable_declaration SEMICOLON .)
    RETURN          reduce using rule 6 (statement -> variable_declaration SEMICOLON .)
    R_BRACKET       reduce using rule 6 (statement -> variable_declaration SEMICOLON .)


state 49

    (56) basic_var_assignment -> variable_declaration ASSIGN . expression
    (57) object_var_assignment -> variable_declaration ASSIGN . object_body
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . binary_expression
    (14) expression -> . unary_expression
    (15) expression -> . value
    (61) object_body -> . L_BRACKET object_body_content R_BRACKET
    (16) binary_expression -> . expression PLUS expression
    (17) binary_expression -> . expression MINUS expression
    (18) binary_expression -> . expression MULTIPLY expression
    (19) binary_expression -> . expression DIVIDE expression
    (20) binary_expression -> . expression AND expression
    (21) binary_expression -> . expression OR expression
    (22) binary_expression -> . expression EQUALS expression
    (23) binary_expression -> . expression GREATER_THAN expression
    (24) binary_expression -> . expression LESS_THAN expression
    (25) binary_expression -> . expression GREATER_EQUAL expression
    (26) binary_expression -> . expression LESS_EQUAL expression
    (27) unary_expression -> . unary_operator L_PARENTHESIS expression R_PARENTHESIS
    (28) unary_expression -> . unary_operator value
    (32) value -> . NUMBER_VALUE
    (33) value -> . CHAR_VALUE
    (34) value -> . BOOL_VALUE
    (35) value -> . ID
    (36) value -> . NULL
    (37) value -> . ID L_PARENTHESIS argument_list R_PARENTHESIS
    (38) value -> . ID DOT ID recursive_atribute_access
    (39) value -> . ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . PLUS

    L_PARENTHESIS   shift and go to state 12
    L_BRACKET       shift and go to state 86
    NUMBER_VALUE    shift and go to state 27
    CHAR_VALUE      shift and go to state 28
    BOOL_VALUE      shift and go to state 29
    ID              shift and go to state 53
    NULL            shift and go to state 30
    MINUS           shift and go to state 25
    NOT             shift and go to state 34
    PLUS            shift and go to state 24

    expression                     shift and go to state 84
    object_body                    shift and go to state 85
    binary_expression              shift and go to state 13
    unary_expression               shift and go to state 14
    value                          shift and go to state 15
    unary_operator                 shift and go to state 26

state 50

    (7) statement -> variable_assignment SEMICOLON .

    L_PARENTHESIS   reduce using rule 7 (statement -> variable_assignment SEMICOLON .)
    LET             reduce using rule 7 (statement -> variable_assignment SEMICOLON .)
    TYPE            reduce using rule 7 (statement -> variable_assignment SEMICOLON .)
    IF              reduce using rule 7 (statement -> variable_assignment SEMICOLON .)
    NUMBER_VALUE    reduce using rule 7 (statement -> variable_assignment SEMICOLON .)
    CHAR_VALUE      reduce using rule 7 (statement -> variable_assignment SEMICOLON .)
    BOOL_VALUE      reduce using rule 7 (statement -> variable_assignment SEMICOLON .)
    ID              reduce using rule 7 (statement -> variable_assignment SEMICOLON .)
    NULL            reduce using rule 7 (statement -> variable_assignment SEMICOLON .)
    FUNCTION        reduce using rule 7 (statement -> variable_assignment SEMICOLON .)
    WHILE           reduce using rule 7 (statement -> variable_assignment SEMICOLON .)
    MINUS           reduce using rule 7 (statement -> variable_assignment SEMICOLON .)
    NOT             reduce using rule 7 (statement -> variable_assignment SEMICOLON .)
    PLUS            reduce using rule 7 (statement -> variable_assignment SEMICOLON .)
    $end            reduce using rule 7 (statement -> variable_assignment SEMICOLON .)
    RETURN          reduce using rule 7 (statement -> variable_assignment SEMICOLON .)
    R_BRACKET       reduce using rule 7 (statement -> variable_assignment SEMICOLON .)


state 51

    (8) statement -> type_declaration SEMICOLON .

    L_PARENTHESIS   reduce using rule 8 (statement -> type_declaration SEMICOLON .)
    LET             reduce using rule 8 (statement -> type_declaration SEMICOLON .)
    TYPE            reduce using rule 8 (statement -> type_declaration SEMICOLON .)
    IF              reduce using rule 8 (statement -> type_declaration SEMICOLON .)
    NUMBER_VALUE    reduce using rule 8 (statement -> type_declaration SEMICOLON .)
    CHAR_VALUE      reduce using rule 8 (statement -> type_declaration SEMICOLON .)
    BOOL_VALUE      reduce using rule 8 (statement -> type_declaration SEMICOLON .)
    ID              reduce using rule 8 (statement -> type_declaration SEMICOLON .)
    NULL            reduce using rule 8 (statement -> type_declaration SEMICOLON .)
    FUNCTION        reduce using rule 8 (statement -> type_declaration SEMICOLON .)
    WHILE           reduce using rule 8 (statement -> type_declaration SEMICOLON .)
    MINUS           reduce using rule 8 (statement -> type_declaration SEMICOLON .)
    NOT             reduce using rule 8 (statement -> type_declaration SEMICOLON .)
    PLUS            reduce using rule 8 (statement -> type_declaration SEMICOLON .)
    $end            reduce using rule 8 (statement -> type_declaration SEMICOLON .)
    RETURN          reduce using rule 8 (statement -> type_declaration SEMICOLON .)
    R_BRACKET       reduce using rule 8 (statement -> type_declaration SEMICOLON .)


state 52

    (12) expression -> L_PARENTHESIS expression . R_PARENTHESIS
    (16) binary_expression -> expression . PLUS expression
    (17) binary_expression -> expression . MINUS expression
    (18) binary_expression -> expression . MULTIPLY expression
    (19) binary_expression -> expression . DIVIDE expression
    (20) binary_expression -> expression . AND expression
    (21) binary_expression -> expression . OR expression
    (22) binary_expression -> expression . EQUALS expression
    (23) binary_expression -> expression . GREATER_THAN expression
    (24) binary_expression -> expression . LESS_THAN expression
    (25) binary_expression -> expression . GREATER_EQUAL expression
    (26) binary_expression -> expression . LESS_EQUAL expression

    R_PARENTHESIS   shift and go to state 87
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    EQUALS          shift and go to state 43
    GREATER_THAN    shift and go to state 44
    LESS_THAN       shift and go to state 45
    GREATER_EQUAL   shift and go to state 46
    LESS_EQUAL      shift and go to state 47


state 53

    (35) value -> ID .
    (37) value -> ID . L_PARENTHESIS argument_list R_PARENTHESIS
    (38) value -> ID . DOT ID recursive_atribute_access
    (39) value -> ID . L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access

    R_PARENTHESIS   reduce using rule 35 (value -> ID .)
    PLUS            reduce using rule 35 (value -> ID .)
    MINUS           reduce using rule 35 (value -> ID .)
    MULTIPLY        reduce using rule 35 (value -> ID .)
    DIVIDE          reduce using rule 35 (value -> ID .)
    AND             reduce using rule 35 (value -> ID .)
    OR              reduce using rule 35 (value -> ID .)
    EQUALS          reduce using rule 35 (value -> ID .)
    GREATER_THAN    reduce using rule 35 (value -> ID .)
    LESS_THAN       reduce using rule 35 (value -> ID .)
    GREATER_EQUAL   reduce using rule 35 (value -> ID .)
    LESS_EQUAL      reduce using rule 35 (value -> ID .)
    SEMICOLON       reduce using rule 35 (value -> ID .)
    COMMA           reduce using rule 35 (value -> ID .)
    R_BRACKET       reduce using rule 35 (value -> ID .)
    L_PARENTHESIS   shift and go to state 55
    DOT             shift and go to state 88
    L_SQ_BRACKET    shift and go to state 89


state 54

    (47) variable_declaration -> LET ID . recursive_variable_declaration
    (48) variable_declaration -> LET ID . TWO_POINTS ID recursive_variable_declaration
    (49) variable_declaration -> LET ID . TWO_POINTS type recursive_variable_declaration
    (50) recursive_variable_declaration -> . COMMA ID recursive_variable_declaration
    (51) recursive_variable_declaration -> . COMMA ID TWO_POINTS ID recursive_variable_declaration
    (52) recursive_variable_declaration -> . empty
    (1) empty -> .

    TWO_POINTS      shift and go to state 91
    COMMA           shift and go to state 92
    SEMICOLON       reduce using rule 1 (empty -> .)
    ASSIGN          reduce using rule 1 (empty -> .)

    recursive_variable_declaration shift and go to state 90
    empty                          shift and go to state 93

state 55

    (37) value -> ID L_PARENTHESIS . argument_list R_PARENTHESIS
    (40) argument_list -> . expression
    (41) argument_list -> . expression COMMA argument_list
    (42) argument_list -> . empty
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . binary_expression
    (14) expression -> . unary_expression
    (15) expression -> . value
    (1) empty -> .
    (16) binary_expression -> . expression PLUS expression
    (17) binary_expression -> . expression MINUS expression
    (18) binary_expression -> . expression MULTIPLY expression
    (19) binary_expression -> . expression DIVIDE expression
    (20) binary_expression -> . expression AND expression
    (21) binary_expression -> . expression OR expression
    (22) binary_expression -> . expression EQUALS expression
    (23) binary_expression -> . expression GREATER_THAN expression
    (24) binary_expression -> . expression LESS_THAN expression
    (25) binary_expression -> . expression GREATER_EQUAL expression
    (26) binary_expression -> . expression LESS_EQUAL expression
    (27) unary_expression -> . unary_operator L_PARENTHESIS expression R_PARENTHESIS
    (28) unary_expression -> . unary_operator value
    (32) value -> . NUMBER_VALUE
    (33) value -> . CHAR_VALUE
    (34) value -> . BOOL_VALUE
    (35) value -> . ID
    (36) value -> . NULL
    (37) value -> . ID L_PARENTHESIS argument_list R_PARENTHESIS
    (38) value -> . ID DOT ID recursive_atribute_access
    (39) value -> . ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . PLUS

    L_PARENTHESIS   shift and go to state 12
    R_PARENTHESIS   reduce using rule 1 (empty -> .)
    NUMBER_VALUE    shift and go to state 27
    CHAR_VALUE      shift and go to state 28
    BOOL_VALUE      shift and go to state 29
    ID              shift and go to state 53
    NULL            shift and go to state 30
    MINUS           shift and go to state 25
    NOT             shift and go to state 34
    PLUS            shift and go to state 24

    argument_list                  shift and go to state 94
    expression                     shift and go to state 95
    empty                          shift and go to state 96
    binary_expression              shift and go to state 13
    unary_expression               shift and go to state 14
    value                          shift and go to state 15
    unary_operator                 shift and go to state 26

state 56

    (38) value -> ID DOT . ID recursive_atribute_access
    (44) recursive_atribute_access -> DOT . ID recursive_atribute_access

    ID              shift and go to state 97


state 57

    (43) atribute_access -> ID recursive_atribute_access .

    ASSIGN          reduce using rule 43 (atribute_access -> ID recursive_atribute_access .)


state 58

    (39) value -> ID L_SQ_BRACKET . QUOTED_ID R_SQ_BRACKET recursive_atribute_access
    (45) recursive_atribute_access -> L_SQ_BRACKET . QUOTED_ID R_SQ_BRACKET recursive_atribute_access

    QUOTED_ID       shift and go to state 98


state 59

    (55) basic_var_assignment -> ID ASSIGN . expression
    (58) object_var_assignment -> ID ASSIGN . object_body
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . binary_expression
    (14) expression -> . unary_expression
    (15) expression -> . value
    (61) object_body -> . L_BRACKET object_body_content R_BRACKET
    (16) binary_expression -> . expression PLUS expression
    (17) binary_expression -> . expression MINUS expression
    (18) binary_expression -> . expression MULTIPLY expression
    (19) binary_expression -> . expression DIVIDE expression
    (20) binary_expression -> . expression AND expression
    (21) binary_expression -> . expression OR expression
    (22) binary_expression -> . expression EQUALS expression
    (23) binary_expression -> . expression GREATER_THAN expression
    (24) binary_expression -> . expression LESS_THAN expression
    (25) binary_expression -> . expression GREATER_EQUAL expression
    (26) binary_expression -> . expression LESS_EQUAL expression
    (27) unary_expression -> . unary_operator L_PARENTHESIS expression R_PARENTHESIS
    (28) unary_expression -> . unary_operator value
    (32) value -> . NUMBER_VALUE
    (33) value -> . CHAR_VALUE
    (34) value -> . BOOL_VALUE
    (35) value -> . ID
    (36) value -> . NULL
    (37) value -> . ID L_PARENTHESIS argument_list R_PARENTHESIS
    (38) value -> . ID DOT ID recursive_atribute_access
    (39) value -> . ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . PLUS

    L_PARENTHESIS   shift and go to state 12
    L_BRACKET       shift and go to state 86
    NUMBER_VALUE    shift and go to state 27
    CHAR_VALUE      shift and go to state 28
    BOOL_VALUE      shift and go to state 29
    ID              shift and go to state 53
    NULL            shift and go to state 30
    MINUS           shift and go to state 25
    NOT             shift and go to state 34
    PLUS            shift and go to state 24

    expression                     shift and go to state 99
    object_body                    shift and go to state 100
    binary_expression              shift and go to state 13
    unary_expression               shift and go to state 14
    value                          shift and go to state 15
    unary_operator                 shift and go to state 26

state 60

    (46) recursive_atribute_access -> empty .

    ASSIGN          reduce using rule 46 (recursive_atribute_access -> empty .)
    SEMICOLON       reduce using rule 46 (recursive_atribute_access -> empty .)
    PLUS            reduce using rule 46 (recursive_atribute_access -> empty .)
    MINUS           reduce using rule 46 (recursive_atribute_access -> empty .)
    MULTIPLY        reduce using rule 46 (recursive_atribute_access -> empty .)
    DIVIDE          reduce using rule 46 (recursive_atribute_access -> empty .)
    AND             reduce using rule 46 (recursive_atribute_access -> empty .)
    OR              reduce using rule 46 (recursive_atribute_access -> empty .)
    EQUALS          reduce using rule 46 (recursive_atribute_access -> empty .)
    GREATER_THAN    reduce using rule 46 (recursive_atribute_access -> empty .)
    LESS_THAN       reduce using rule 46 (recursive_atribute_access -> empty .)
    GREATER_EQUAL   reduce using rule 46 (recursive_atribute_access -> empty .)
    LESS_EQUAL      reduce using rule 46 (recursive_atribute_access -> empty .)
    R_PARENTHESIS   reduce using rule 46 (recursive_atribute_access -> empty .)
    COMMA           reduce using rule 46 (recursive_atribute_access -> empty .)
    R_BRACKET       reduce using rule 46 (recursive_atribute_access -> empty .)


state 61

    (72) type_declaration -> TYPE ID . ASSIGN type_body

    ASSIGN          shift and go to state 101


state 62

    (92) function_declaration -> function_header function_body .

    L_PARENTHESIS   reduce using rule 92 (function_declaration -> function_header function_body .)
    LET             reduce using rule 92 (function_declaration -> function_header function_body .)
    TYPE            reduce using rule 92 (function_declaration -> function_header function_body .)
    IF              reduce using rule 92 (function_declaration -> function_header function_body .)
    NUMBER_VALUE    reduce using rule 92 (function_declaration -> function_header function_body .)
    CHAR_VALUE      reduce using rule 92 (function_declaration -> function_header function_body .)
    BOOL_VALUE      reduce using rule 92 (function_declaration -> function_header function_body .)
    ID              reduce using rule 92 (function_declaration -> function_header function_body .)
    NULL            reduce using rule 92 (function_declaration -> function_header function_body .)
    FUNCTION        reduce using rule 92 (function_declaration -> function_header function_body .)
    WHILE           reduce using rule 92 (function_declaration -> function_header function_body .)
    MINUS           reduce using rule 92 (function_declaration -> function_header function_body .)
    NOT             reduce using rule 92 (function_declaration -> function_header function_body .)
    PLUS            reduce using rule 92 (function_declaration -> function_header function_body .)
    $end            reduce using rule 92 (function_declaration -> function_header function_body .)
    RETURN          reduce using rule 92 (function_declaration -> function_header function_body .)
    R_BRACKET       reduce using rule 92 (function_declaration -> function_header function_body .)


state 63

    (94) function_body -> L_BRACKET . statement_list RETURN return_statement R_BRACKET
    (3) statement_list -> . statement statement_list
    (4) statement_list -> . empty
    (5) statement -> . expression SEMICOLON
    (6) statement -> . variable_declaration SEMICOLON
    (7) statement -> . variable_assignment SEMICOLON
    (8) statement -> . type_declaration SEMICOLON
    (9) statement -> . function_declaration
    (10) statement -> . if_statement
    (11) statement -> . while_statement
    (1) empty -> .
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . binary_expression
    (14) expression -> . unary_expression
    (15) expression -> . value
    (47) variable_declaration -> . LET ID recursive_variable_declaration
    (48) variable_declaration -> . LET ID TWO_POINTS ID recursive_variable_declaration
    (49) variable_declaration -> . LET ID TWO_POINTS type recursive_variable_declaration
    (53) variable_assignment -> . basic_var_assignment
    (54) variable_assignment -> . object_var_assignment
    (72) type_declaration -> . TYPE ID ASSIGN type_body
    (92) function_declaration -> . function_header function_body
    (104) if_statement -> . IF if_evaluation if_statements else_statement
    (109) while_statement -> . while_header while_statements
    (16) binary_expression -> . expression PLUS expression
    (17) binary_expression -> . expression MINUS expression
    (18) binary_expression -> . expression MULTIPLY expression
    (19) binary_expression -> . expression DIVIDE expression
    (20) binary_expression -> . expression AND expression
    (21) binary_expression -> . expression OR expression
    (22) binary_expression -> . expression EQUALS expression
    (23) binary_expression -> . expression GREATER_THAN expression
    (24) binary_expression -> . expression LESS_THAN expression
    (25) binary_expression -> . expression GREATER_EQUAL expression
    (26) binary_expression -> . expression LESS_EQUAL expression
    (27) unary_expression -> . unary_operator L_PARENTHESIS expression R_PARENTHESIS
    (28) unary_expression -> . unary_operator value
    (32) value -> . NUMBER_VALUE
    (33) value -> . CHAR_VALUE
    (34) value -> . BOOL_VALUE
    (35) value -> . ID
    (36) value -> . NULL
    (37) value -> . ID L_PARENTHESIS argument_list R_PARENTHESIS
    (38) value -> . ID DOT ID recursive_atribute_access
    (39) value -> . ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access
    (55) basic_var_assignment -> . ID ASSIGN expression
    (56) basic_var_assignment -> . variable_declaration ASSIGN expression
    (57) object_var_assignment -> . variable_declaration ASSIGN object_body
    (58) object_var_assignment -> . ID ASSIGN object_body
    (59) object_var_assignment -> . atribute_access ASSIGN expression
    (60) object_var_assignment -> . atribute_access ASSIGN object_body
    (93) function_header -> . FUNCTION ID L_PARENTHESIS function_params R_PARENTHESIS TWO_POINTS return_type
    (110) while_header -> . WHILE L_PARENTHESIS expression R_PARENTHESIS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . PLUS
    (43) atribute_access -> . ID recursive_atribute_access

    RETURN          reduce using rule 1 (empty -> .)
    L_PARENTHESIS   shift and go to state 12
    LET             shift and go to state 16
    TYPE            shift and go to state 20
    IF              shift and go to state 22
    NUMBER_VALUE    shift and go to state 27
    CHAR_VALUE      shift and go to state 28
    BOOL_VALUE      shift and go to state 29
    ID              shift and go to state 17
    NULL            shift and go to state 30
    FUNCTION        shift and go to state 32
    WHILE           shift and go to state 33
    MINUS           shift and go to state 25
    NOT             shift and go to state 34
    PLUS            shift and go to state 24

    statement_list                 shift and go to state 102
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    expression                     shift and go to state 5
    variable_declaration           shift and go to state 6
    variable_assignment            shift and go to state 7
    type_declaration               shift and go to state 8
    function_declaration           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    binary_expression              shift and go to state 13
    unary_expression               shift and go to state 14
    value                          shift and go to state 15
    basic_var_assignment           shift and go to state 18
    object_var_assignment          shift and go to state 19
    function_header                shift and go to state 21
    while_header                   shift and go to state 23
    unary_operator                 shift and go to state 26
    atribute_access                shift and go to state 31

state 64

    (104) if_statement -> IF if_evaluation . if_statements else_statement
    (106) if_statements -> . L_BRACKET statement statement_list R_BRACKET

    L_BRACKET       shift and go to state 104

    if_statements                  shift and go to state 103

state 65

    (105) if_evaluation -> L_PARENTHESIS . expression R_PARENTHESIS
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . binary_expression
    (14) expression -> . unary_expression
    (15) expression -> . value
    (16) binary_expression -> . expression PLUS expression
    (17) binary_expression -> . expression MINUS expression
    (18) binary_expression -> . expression MULTIPLY expression
    (19) binary_expression -> . expression DIVIDE expression
    (20) binary_expression -> . expression AND expression
    (21) binary_expression -> . expression OR expression
    (22) binary_expression -> . expression EQUALS expression
    (23) binary_expression -> . expression GREATER_THAN expression
    (24) binary_expression -> . expression LESS_THAN expression
    (25) binary_expression -> . expression GREATER_EQUAL expression
    (26) binary_expression -> . expression LESS_EQUAL expression
    (27) unary_expression -> . unary_operator L_PARENTHESIS expression R_PARENTHESIS
    (28) unary_expression -> . unary_operator value
    (32) value -> . NUMBER_VALUE
    (33) value -> . CHAR_VALUE
    (34) value -> . BOOL_VALUE
    (35) value -> . ID
    (36) value -> . NULL
    (37) value -> . ID L_PARENTHESIS argument_list R_PARENTHESIS
    (38) value -> . ID DOT ID recursive_atribute_access
    (39) value -> . ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . PLUS

    L_PARENTHESIS   shift and go to state 12
    NUMBER_VALUE    shift and go to state 27
    CHAR_VALUE      shift and go to state 28
    BOOL_VALUE      shift and go to state 29
    ID              shift and go to state 53
    NULL            shift and go to state 30
    MINUS           shift and go to state 25
    NOT             shift and go to state 34
    PLUS            shift and go to state 24

    expression                     shift and go to state 105
    binary_expression              shift and go to state 13
    unary_expression               shift and go to state 14
    value                          shift and go to state 15
    unary_operator                 shift and go to state 26

state 66

    (109) while_statement -> while_header while_statements .

    L_PARENTHESIS   reduce using rule 109 (while_statement -> while_header while_statements .)
    LET             reduce using rule 109 (while_statement -> while_header while_statements .)
    TYPE            reduce using rule 109 (while_statement -> while_header while_statements .)
    IF              reduce using rule 109 (while_statement -> while_header while_statements .)
    NUMBER_VALUE    reduce using rule 109 (while_statement -> while_header while_statements .)
    CHAR_VALUE      reduce using rule 109 (while_statement -> while_header while_statements .)
    BOOL_VALUE      reduce using rule 109 (while_statement -> while_header while_statements .)
    ID              reduce using rule 109 (while_statement -> while_header while_statements .)
    NULL            reduce using rule 109 (while_statement -> while_header while_statements .)
    FUNCTION        reduce using rule 109 (while_statement -> while_header while_statements .)
    WHILE           reduce using rule 109 (while_statement -> while_header while_statements .)
    MINUS           reduce using rule 109 (while_statement -> while_header while_statements .)
    NOT             reduce using rule 109 (while_statement -> while_header while_statements .)
    PLUS            reduce using rule 109 (while_statement -> while_header while_statements .)
    $end            reduce using rule 109 (while_statement -> while_header while_statements .)
    RETURN          reduce using rule 109 (while_statement -> while_header while_statements .)
    R_BRACKET       reduce using rule 109 (while_statement -> while_header while_statements .)


state 67

    (111) while_statements -> L_BRACKET . statement statement_list R_BRACKET
    (5) statement -> . expression SEMICOLON
    (6) statement -> . variable_declaration SEMICOLON
    (7) statement -> . variable_assignment SEMICOLON
    (8) statement -> . type_declaration SEMICOLON
    (9) statement -> . function_declaration
    (10) statement -> . if_statement
    (11) statement -> . while_statement
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . binary_expression
    (14) expression -> . unary_expression
    (15) expression -> . value
    (47) variable_declaration -> . LET ID recursive_variable_declaration
    (48) variable_declaration -> . LET ID TWO_POINTS ID recursive_variable_declaration
    (49) variable_declaration -> . LET ID TWO_POINTS type recursive_variable_declaration
    (53) variable_assignment -> . basic_var_assignment
    (54) variable_assignment -> . object_var_assignment
    (72) type_declaration -> . TYPE ID ASSIGN type_body
    (92) function_declaration -> . function_header function_body
    (104) if_statement -> . IF if_evaluation if_statements else_statement
    (109) while_statement -> . while_header while_statements
    (16) binary_expression -> . expression PLUS expression
    (17) binary_expression -> . expression MINUS expression
    (18) binary_expression -> . expression MULTIPLY expression
    (19) binary_expression -> . expression DIVIDE expression
    (20) binary_expression -> . expression AND expression
    (21) binary_expression -> . expression OR expression
    (22) binary_expression -> . expression EQUALS expression
    (23) binary_expression -> . expression GREATER_THAN expression
    (24) binary_expression -> . expression LESS_THAN expression
    (25) binary_expression -> . expression GREATER_EQUAL expression
    (26) binary_expression -> . expression LESS_EQUAL expression
    (27) unary_expression -> . unary_operator L_PARENTHESIS expression R_PARENTHESIS
    (28) unary_expression -> . unary_operator value
    (32) value -> . NUMBER_VALUE
    (33) value -> . CHAR_VALUE
    (34) value -> . BOOL_VALUE
    (35) value -> . ID
    (36) value -> . NULL
    (37) value -> . ID L_PARENTHESIS argument_list R_PARENTHESIS
    (38) value -> . ID DOT ID recursive_atribute_access
    (39) value -> . ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access
    (55) basic_var_assignment -> . ID ASSIGN expression
    (56) basic_var_assignment -> . variable_declaration ASSIGN expression
    (57) object_var_assignment -> . variable_declaration ASSIGN object_body
    (58) object_var_assignment -> . ID ASSIGN object_body
    (59) object_var_assignment -> . atribute_access ASSIGN expression
    (60) object_var_assignment -> . atribute_access ASSIGN object_body
    (93) function_header -> . FUNCTION ID L_PARENTHESIS function_params R_PARENTHESIS TWO_POINTS return_type
    (110) while_header -> . WHILE L_PARENTHESIS expression R_PARENTHESIS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . PLUS
    (43) atribute_access -> . ID recursive_atribute_access

    L_PARENTHESIS   shift and go to state 12
    LET             shift and go to state 16
    TYPE            shift and go to state 20
    IF              shift and go to state 22
    NUMBER_VALUE    shift and go to state 27
    CHAR_VALUE      shift and go to state 28
    BOOL_VALUE      shift and go to state 29
    ID              shift and go to state 17
    NULL            shift and go to state 30
    FUNCTION        shift and go to state 32
    WHILE           shift and go to state 33
    MINUS           shift and go to state 25
    NOT             shift and go to state 34
    PLUS            shift and go to state 24

    statement                      shift and go to state 106
    expression                     shift and go to state 5
    variable_declaration           shift and go to state 6
    variable_assignment            shift and go to state 7
    type_declaration               shift and go to state 8
    function_declaration           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    binary_expression              shift and go to state 13
    unary_expression               shift and go to state 14
    value                          shift and go to state 15
    basic_var_assignment           shift and go to state 18
    object_var_assignment          shift and go to state 19
    function_header                shift and go to state 21
    while_header                   shift and go to state 23
    unary_operator                 shift and go to state 26
    atribute_access                shift and go to state 31

state 68

    (27) unary_expression -> unary_operator L_PARENTHESIS . expression R_PARENTHESIS
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . binary_expression
    (14) expression -> . unary_expression
    (15) expression -> . value
    (16) binary_expression -> . expression PLUS expression
    (17) binary_expression -> . expression MINUS expression
    (18) binary_expression -> . expression MULTIPLY expression
    (19) binary_expression -> . expression DIVIDE expression
    (20) binary_expression -> . expression AND expression
    (21) binary_expression -> . expression OR expression
    (22) binary_expression -> . expression EQUALS expression
    (23) binary_expression -> . expression GREATER_THAN expression
    (24) binary_expression -> . expression LESS_THAN expression
    (25) binary_expression -> . expression GREATER_EQUAL expression
    (26) binary_expression -> . expression LESS_EQUAL expression
    (27) unary_expression -> . unary_operator L_PARENTHESIS expression R_PARENTHESIS
    (28) unary_expression -> . unary_operator value
    (32) value -> . NUMBER_VALUE
    (33) value -> . CHAR_VALUE
    (34) value -> . BOOL_VALUE
    (35) value -> . ID
    (36) value -> . NULL
    (37) value -> . ID L_PARENTHESIS argument_list R_PARENTHESIS
    (38) value -> . ID DOT ID recursive_atribute_access
    (39) value -> . ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . PLUS

    L_PARENTHESIS   shift and go to state 12
    NUMBER_VALUE    shift and go to state 27
    CHAR_VALUE      shift and go to state 28
    BOOL_VALUE      shift and go to state 29
    ID              shift and go to state 53
    NULL            shift and go to state 30
    MINUS           shift and go to state 25
    NOT             shift and go to state 34
    PLUS            shift and go to state 24

    unary_operator                 shift and go to state 26
    expression                     shift and go to state 107
    binary_expression              shift and go to state 13
    unary_expression               shift and go to state 14
    value                          shift and go to state 15

state 69

    (28) unary_expression -> unary_operator value .

    SEMICOLON       reduce using rule 28 (unary_expression -> unary_operator value .)
    PLUS            reduce using rule 28 (unary_expression -> unary_operator value .)
    MINUS           reduce using rule 28 (unary_expression -> unary_operator value .)
    MULTIPLY        reduce using rule 28 (unary_expression -> unary_operator value .)
    DIVIDE          reduce using rule 28 (unary_expression -> unary_operator value .)
    AND             reduce using rule 28 (unary_expression -> unary_operator value .)
    OR              reduce using rule 28 (unary_expression -> unary_operator value .)
    EQUALS          reduce using rule 28 (unary_expression -> unary_operator value .)
    GREATER_THAN    reduce using rule 28 (unary_expression -> unary_operator value .)
    LESS_THAN       reduce using rule 28 (unary_expression -> unary_operator value .)
    GREATER_EQUAL   reduce using rule 28 (unary_expression -> unary_operator value .)
    LESS_EQUAL      reduce using rule 28 (unary_expression -> unary_operator value .)
    R_PARENTHESIS   reduce using rule 28 (unary_expression -> unary_operator value .)
    COMMA           reduce using rule 28 (unary_expression -> unary_operator value .)
    R_BRACKET       reduce using rule 28 (unary_expression -> unary_operator value .)


state 70

    (59) object_var_assignment -> atribute_access ASSIGN . expression
    (60) object_var_assignment -> atribute_access ASSIGN . object_body
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . binary_expression
    (14) expression -> . unary_expression
    (15) expression -> . value
    (61) object_body -> . L_BRACKET object_body_content R_BRACKET
    (16) binary_expression -> . expression PLUS expression
    (17) binary_expression -> . expression MINUS expression
    (18) binary_expression -> . expression MULTIPLY expression
    (19) binary_expression -> . expression DIVIDE expression
    (20) binary_expression -> . expression AND expression
    (21) binary_expression -> . expression OR expression
    (22) binary_expression -> . expression EQUALS expression
    (23) binary_expression -> . expression GREATER_THAN expression
    (24) binary_expression -> . expression LESS_THAN expression
    (25) binary_expression -> . expression GREATER_EQUAL expression
    (26) binary_expression -> . expression LESS_EQUAL expression
    (27) unary_expression -> . unary_operator L_PARENTHESIS expression R_PARENTHESIS
    (28) unary_expression -> . unary_operator value
    (32) value -> . NUMBER_VALUE
    (33) value -> . CHAR_VALUE
    (34) value -> . BOOL_VALUE
    (35) value -> . ID
    (36) value -> . NULL
    (37) value -> . ID L_PARENTHESIS argument_list R_PARENTHESIS
    (38) value -> . ID DOT ID recursive_atribute_access
    (39) value -> . ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . PLUS

    L_PARENTHESIS   shift and go to state 12
    L_BRACKET       shift and go to state 86
    NUMBER_VALUE    shift and go to state 27
    CHAR_VALUE      shift and go to state 28
    BOOL_VALUE      shift and go to state 29
    ID              shift and go to state 53
    NULL            shift and go to state 30
    MINUS           shift and go to state 25
    NOT             shift and go to state 34
    PLUS            shift and go to state 24

    expression                     shift and go to state 108
    object_body                    shift and go to state 109
    binary_expression              shift and go to state 13
    unary_expression               shift and go to state 14
    value                          shift and go to state 15
    unary_operator                 shift and go to state 26

state 71

    (93) function_header -> FUNCTION ID . L_PARENTHESIS function_params R_PARENTHESIS TWO_POINTS return_type

    L_PARENTHESIS   shift and go to state 110


state 72

    (110) while_header -> WHILE L_PARENTHESIS . expression R_PARENTHESIS
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . binary_expression
    (14) expression -> . unary_expression
    (15) expression -> . value
    (16) binary_expression -> . expression PLUS expression
    (17) binary_expression -> . expression MINUS expression
    (18) binary_expression -> . expression MULTIPLY expression
    (19) binary_expression -> . expression DIVIDE expression
    (20) binary_expression -> . expression AND expression
    (21) binary_expression -> . expression OR expression
    (22) binary_expression -> . expression EQUALS expression
    (23) binary_expression -> . expression GREATER_THAN expression
    (24) binary_expression -> . expression LESS_THAN expression
    (25) binary_expression -> . expression GREATER_EQUAL expression
    (26) binary_expression -> . expression LESS_EQUAL expression
    (27) unary_expression -> . unary_operator L_PARENTHESIS expression R_PARENTHESIS
    (28) unary_expression -> . unary_operator value
    (32) value -> . NUMBER_VALUE
    (33) value -> . CHAR_VALUE
    (34) value -> . BOOL_VALUE
    (35) value -> . ID
    (36) value -> . NULL
    (37) value -> . ID L_PARENTHESIS argument_list R_PARENTHESIS
    (38) value -> . ID DOT ID recursive_atribute_access
    (39) value -> . ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . PLUS

    L_PARENTHESIS   shift and go to state 12
    NUMBER_VALUE    shift and go to state 27
    CHAR_VALUE      shift and go to state 28
    BOOL_VALUE      shift and go to state 29
    ID              shift and go to state 53
    NULL            shift and go to state 30
    MINUS           shift and go to state 25
    NOT             shift and go to state 34
    PLUS            shift and go to state 24

    expression                     shift and go to state 111
    binary_expression              shift and go to state 13
    unary_expression               shift and go to state 14
    value                          shift and go to state 15
    unary_operator                 shift and go to state 26

state 73

    (16) binary_expression -> expression PLUS expression .
    (16) binary_expression -> expression . PLUS expression
    (17) binary_expression -> expression . MINUS expression
    (18) binary_expression -> expression . MULTIPLY expression
    (19) binary_expression -> expression . DIVIDE expression
    (20) binary_expression -> expression . AND expression
    (21) binary_expression -> expression . OR expression
    (22) binary_expression -> expression . EQUALS expression
    (23) binary_expression -> expression . GREATER_THAN expression
    (24) binary_expression -> expression . LESS_THAN expression
    (25) binary_expression -> expression . GREATER_EQUAL expression
    (26) binary_expression -> expression . LESS_EQUAL expression

    SEMICOLON       reduce using rule 16 (binary_expression -> expression PLUS expression .)
    PLUS            reduce using rule 16 (binary_expression -> expression PLUS expression .)
    MINUS           reduce using rule 16 (binary_expression -> expression PLUS expression .)
    AND             reduce using rule 16 (binary_expression -> expression PLUS expression .)
    OR              reduce using rule 16 (binary_expression -> expression PLUS expression .)
    EQUALS          reduce using rule 16 (binary_expression -> expression PLUS expression .)
    GREATER_THAN    reduce using rule 16 (binary_expression -> expression PLUS expression .)
    LESS_THAN       reduce using rule 16 (binary_expression -> expression PLUS expression .)
    GREATER_EQUAL   reduce using rule 16 (binary_expression -> expression PLUS expression .)
    LESS_EQUAL      reduce using rule 16 (binary_expression -> expression PLUS expression .)
    R_PARENTHESIS   reduce using rule 16 (binary_expression -> expression PLUS expression .)
    COMMA           reduce using rule 16 (binary_expression -> expression PLUS expression .)
    R_BRACKET       reduce using rule 16 (binary_expression -> expression PLUS expression .)
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40

  ! MULTIPLY        [ reduce using rule 16 (binary_expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 16 (binary_expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 37 ]
  ! MINUS           [ shift and go to state 38 ]
  ! AND             [ shift and go to state 41 ]
  ! OR              [ shift and go to state 42 ]
  ! EQUALS          [ shift and go to state 43 ]
  ! GREATER_THAN    [ shift and go to state 44 ]
  ! LESS_THAN       [ shift and go to state 45 ]
  ! GREATER_EQUAL   [ shift and go to state 46 ]
  ! LESS_EQUAL      [ shift and go to state 47 ]


state 74

    (17) binary_expression -> expression MINUS expression .
    (16) binary_expression -> expression . PLUS expression
    (17) binary_expression -> expression . MINUS expression
    (18) binary_expression -> expression . MULTIPLY expression
    (19) binary_expression -> expression . DIVIDE expression
    (20) binary_expression -> expression . AND expression
    (21) binary_expression -> expression . OR expression
    (22) binary_expression -> expression . EQUALS expression
    (23) binary_expression -> expression . GREATER_THAN expression
    (24) binary_expression -> expression . LESS_THAN expression
    (25) binary_expression -> expression . GREATER_EQUAL expression
    (26) binary_expression -> expression . LESS_EQUAL expression

    SEMICOLON       reduce using rule 17 (binary_expression -> expression MINUS expression .)
    PLUS            reduce using rule 17 (binary_expression -> expression MINUS expression .)
    MINUS           reduce using rule 17 (binary_expression -> expression MINUS expression .)
    AND             reduce using rule 17 (binary_expression -> expression MINUS expression .)
    OR              reduce using rule 17 (binary_expression -> expression MINUS expression .)
    EQUALS          reduce using rule 17 (binary_expression -> expression MINUS expression .)
    GREATER_THAN    reduce using rule 17 (binary_expression -> expression MINUS expression .)
    LESS_THAN       reduce using rule 17 (binary_expression -> expression MINUS expression .)
    GREATER_EQUAL   reduce using rule 17 (binary_expression -> expression MINUS expression .)
    LESS_EQUAL      reduce using rule 17 (binary_expression -> expression MINUS expression .)
    R_PARENTHESIS   reduce using rule 17 (binary_expression -> expression MINUS expression .)
    COMMA           reduce using rule 17 (binary_expression -> expression MINUS expression .)
    R_BRACKET       reduce using rule 17 (binary_expression -> expression MINUS expression .)
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40

  ! MULTIPLY        [ reduce using rule 17 (binary_expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 17 (binary_expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 37 ]
  ! MINUS           [ shift and go to state 38 ]
  ! AND             [ shift and go to state 41 ]
  ! OR              [ shift and go to state 42 ]
  ! EQUALS          [ shift and go to state 43 ]
  ! GREATER_THAN    [ shift and go to state 44 ]
  ! LESS_THAN       [ shift and go to state 45 ]
  ! GREATER_EQUAL   [ shift and go to state 46 ]
  ! LESS_EQUAL      [ shift and go to state 47 ]


state 75

    (18) binary_expression -> expression MULTIPLY expression .
    (16) binary_expression -> expression . PLUS expression
    (17) binary_expression -> expression . MINUS expression
    (18) binary_expression -> expression . MULTIPLY expression
    (19) binary_expression -> expression . DIVIDE expression
    (20) binary_expression -> expression . AND expression
    (21) binary_expression -> expression . OR expression
    (22) binary_expression -> expression . EQUALS expression
    (23) binary_expression -> expression . GREATER_THAN expression
    (24) binary_expression -> expression . LESS_THAN expression
    (25) binary_expression -> expression . GREATER_EQUAL expression
    (26) binary_expression -> expression . LESS_EQUAL expression

    SEMICOLON       reduce using rule 18 (binary_expression -> expression MULTIPLY expression .)
    PLUS            reduce using rule 18 (binary_expression -> expression MULTIPLY expression .)
    MINUS           reduce using rule 18 (binary_expression -> expression MULTIPLY expression .)
    MULTIPLY        reduce using rule 18 (binary_expression -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 18 (binary_expression -> expression MULTIPLY expression .)
    AND             reduce using rule 18 (binary_expression -> expression MULTIPLY expression .)
    OR              reduce using rule 18 (binary_expression -> expression MULTIPLY expression .)
    EQUALS          reduce using rule 18 (binary_expression -> expression MULTIPLY expression .)
    GREATER_THAN    reduce using rule 18 (binary_expression -> expression MULTIPLY expression .)
    LESS_THAN       reduce using rule 18 (binary_expression -> expression MULTIPLY expression .)
    GREATER_EQUAL   reduce using rule 18 (binary_expression -> expression MULTIPLY expression .)
    LESS_EQUAL      reduce using rule 18 (binary_expression -> expression MULTIPLY expression .)
    R_PARENTHESIS   reduce using rule 18 (binary_expression -> expression MULTIPLY expression .)
    COMMA           reduce using rule 18 (binary_expression -> expression MULTIPLY expression .)
    R_BRACKET       reduce using rule 18 (binary_expression -> expression MULTIPLY expression .)

  ! PLUS            [ shift and go to state 37 ]
  ! MINUS           [ shift and go to state 38 ]
  ! MULTIPLY        [ shift and go to state 39 ]
  ! DIVIDE          [ shift and go to state 40 ]
  ! AND             [ shift and go to state 41 ]
  ! OR              [ shift and go to state 42 ]
  ! EQUALS          [ shift and go to state 43 ]
  ! GREATER_THAN    [ shift and go to state 44 ]
  ! LESS_THAN       [ shift and go to state 45 ]
  ! GREATER_EQUAL   [ shift and go to state 46 ]
  ! LESS_EQUAL      [ shift and go to state 47 ]


state 76

    (19) binary_expression -> expression DIVIDE expression .
    (16) binary_expression -> expression . PLUS expression
    (17) binary_expression -> expression . MINUS expression
    (18) binary_expression -> expression . MULTIPLY expression
    (19) binary_expression -> expression . DIVIDE expression
    (20) binary_expression -> expression . AND expression
    (21) binary_expression -> expression . OR expression
    (22) binary_expression -> expression . EQUALS expression
    (23) binary_expression -> expression . GREATER_THAN expression
    (24) binary_expression -> expression . LESS_THAN expression
    (25) binary_expression -> expression . GREATER_EQUAL expression
    (26) binary_expression -> expression . LESS_EQUAL expression

    SEMICOLON       reduce using rule 19 (binary_expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 19 (binary_expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 19 (binary_expression -> expression DIVIDE expression .)
    MULTIPLY        reduce using rule 19 (binary_expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 19 (binary_expression -> expression DIVIDE expression .)
    AND             reduce using rule 19 (binary_expression -> expression DIVIDE expression .)
    OR              reduce using rule 19 (binary_expression -> expression DIVIDE expression .)
    EQUALS          reduce using rule 19 (binary_expression -> expression DIVIDE expression .)
    GREATER_THAN    reduce using rule 19 (binary_expression -> expression DIVIDE expression .)
    LESS_THAN       reduce using rule 19 (binary_expression -> expression DIVIDE expression .)
    GREATER_EQUAL   reduce using rule 19 (binary_expression -> expression DIVIDE expression .)
    LESS_EQUAL      reduce using rule 19 (binary_expression -> expression DIVIDE expression .)
    R_PARENTHESIS   reduce using rule 19 (binary_expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 19 (binary_expression -> expression DIVIDE expression .)
    R_BRACKET       reduce using rule 19 (binary_expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 37 ]
  ! MINUS           [ shift and go to state 38 ]
  ! MULTIPLY        [ shift and go to state 39 ]
  ! DIVIDE          [ shift and go to state 40 ]
  ! AND             [ shift and go to state 41 ]
  ! OR              [ shift and go to state 42 ]
  ! EQUALS          [ shift and go to state 43 ]
  ! GREATER_THAN    [ shift and go to state 44 ]
  ! LESS_THAN       [ shift and go to state 45 ]
  ! GREATER_EQUAL   [ shift and go to state 46 ]
  ! LESS_EQUAL      [ shift and go to state 47 ]


state 77

    (20) binary_expression -> expression AND expression .
    (16) binary_expression -> expression . PLUS expression
    (17) binary_expression -> expression . MINUS expression
    (18) binary_expression -> expression . MULTIPLY expression
    (19) binary_expression -> expression . DIVIDE expression
    (20) binary_expression -> expression . AND expression
    (21) binary_expression -> expression . OR expression
    (22) binary_expression -> expression . EQUALS expression
    (23) binary_expression -> expression . GREATER_THAN expression
    (24) binary_expression -> expression . LESS_THAN expression
    (25) binary_expression -> expression . GREATER_EQUAL expression
    (26) binary_expression -> expression . LESS_EQUAL expression

    SEMICOLON       reduce using rule 20 (binary_expression -> expression AND expression .)
    AND             reduce using rule 20 (binary_expression -> expression AND expression .)
    OR              reduce using rule 20 (binary_expression -> expression AND expression .)
    R_PARENTHESIS   reduce using rule 20 (binary_expression -> expression AND expression .)
    COMMA           reduce using rule 20 (binary_expression -> expression AND expression .)
    R_BRACKET       reduce using rule 20 (binary_expression -> expression AND expression .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    EQUALS          shift and go to state 43
    GREATER_THAN    shift and go to state 44
    LESS_THAN       shift and go to state 45
    GREATER_EQUAL   shift and go to state 46
    LESS_EQUAL      shift and go to state 47

  ! PLUS            [ reduce using rule 20 (binary_expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 20 (binary_expression -> expression AND expression .) ]
  ! MULTIPLY        [ reduce using rule 20 (binary_expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 20 (binary_expression -> expression AND expression .) ]
  ! EQUALS          [ reduce using rule 20 (binary_expression -> expression AND expression .) ]
  ! GREATER_THAN    [ reduce using rule 20 (binary_expression -> expression AND expression .) ]
  ! LESS_THAN       [ reduce using rule 20 (binary_expression -> expression AND expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 20 (binary_expression -> expression AND expression .) ]
  ! LESS_EQUAL      [ reduce using rule 20 (binary_expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 41 ]
  ! OR              [ shift and go to state 42 ]


state 78

    (21) binary_expression -> expression OR expression .
    (16) binary_expression -> expression . PLUS expression
    (17) binary_expression -> expression . MINUS expression
    (18) binary_expression -> expression . MULTIPLY expression
    (19) binary_expression -> expression . DIVIDE expression
    (20) binary_expression -> expression . AND expression
    (21) binary_expression -> expression . OR expression
    (22) binary_expression -> expression . EQUALS expression
    (23) binary_expression -> expression . GREATER_THAN expression
    (24) binary_expression -> expression . LESS_THAN expression
    (25) binary_expression -> expression . GREATER_EQUAL expression
    (26) binary_expression -> expression . LESS_EQUAL expression

    SEMICOLON       reduce using rule 21 (binary_expression -> expression OR expression .)
    OR              reduce using rule 21 (binary_expression -> expression OR expression .)
    R_PARENTHESIS   reduce using rule 21 (binary_expression -> expression OR expression .)
    COMMA           reduce using rule 21 (binary_expression -> expression OR expression .)
    R_BRACKET       reduce using rule 21 (binary_expression -> expression OR expression .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    AND             shift and go to state 41
    EQUALS          shift and go to state 43
    GREATER_THAN    shift and go to state 44
    LESS_THAN       shift and go to state 45
    GREATER_EQUAL   shift and go to state 46
    LESS_EQUAL      shift and go to state 47

  ! PLUS            [ reduce using rule 21 (binary_expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 21 (binary_expression -> expression OR expression .) ]
  ! MULTIPLY        [ reduce using rule 21 (binary_expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 21 (binary_expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 21 (binary_expression -> expression OR expression .) ]
  ! EQUALS          [ reduce using rule 21 (binary_expression -> expression OR expression .) ]
  ! GREATER_THAN    [ reduce using rule 21 (binary_expression -> expression OR expression .) ]
  ! LESS_THAN       [ reduce using rule 21 (binary_expression -> expression OR expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 21 (binary_expression -> expression OR expression .) ]
  ! LESS_EQUAL      [ reduce using rule 21 (binary_expression -> expression OR expression .) ]
  ! OR              [ shift and go to state 42 ]


state 79

    (22) binary_expression -> expression EQUALS expression .
    (16) binary_expression -> expression . PLUS expression
    (17) binary_expression -> expression . MINUS expression
    (18) binary_expression -> expression . MULTIPLY expression
    (19) binary_expression -> expression . DIVIDE expression
    (20) binary_expression -> expression . AND expression
    (21) binary_expression -> expression . OR expression
    (22) binary_expression -> expression . EQUALS expression
    (23) binary_expression -> expression . GREATER_THAN expression
    (24) binary_expression -> expression . LESS_THAN expression
    (25) binary_expression -> expression . GREATER_EQUAL expression
    (26) binary_expression -> expression . LESS_EQUAL expression

    SEMICOLON       reduce using rule 22 (binary_expression -> expression EQUALS expression .)
    AND             reduce using rule 22 (binary_expression -> expression EQUALS expression .)
    OR              reduce using rule 22 (binary_expression -> expression EQUALS expression .)
    EQUALS          reduce using rule 22 (binary_expression -> expression EQUALS expression .)
    GREATER_THAN    reduce using rule 22 (binary_expression -> expression EQUALS expression .)
    LESS_THAN       reduce using rule 22 (binary_expression -> expression EQUALS expression .)
    GREATER_EQUAL   reduce using rule 22 (binary_expression -> expression EQUALS expression .)
    LESS_EQUAL      reduce using rule 22 (binary_expression -> expression EQUALS expression .)
    R_PARENTHESIS   reduce using rule 22 (binary_expression -> expression EQUALS expression .)
    COMMA           reduce using rule 22 (binary_expression -> expression EQUALS expression .)
    R_BRACKET       reduce using rule 22 (binary_expression -> expression EQUALS expression .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40

  ! PLUS            [ reduce using rule 22 (binary_expression -> expression EQUALS expression .) ]
  ! MINUS           [ reduce using rule 22 (binary_expression -> expression EQUALS expression .) ]
  ! MULTIPLY        [ reduce using rule 22 (binary_expression -> expression EQUALS expression .) ]
  ! DIVIDE          [ reduce using rule 22 (binary_expression -> expression EQUALS expression .) ]
  ! AND             [ shift and go to state 41 ]
  ! OR              [ shift and go to state 42 ]
  ! EQUALS          [ shift and go to state 43 ]
  ! GREATER_THAN    [ shift and go to state 44 ]
  ! LESS_THAN       [ shift and go to state 45 ]
  ! GREATER_EQUAL   [ shift and go to state 46 ]
  ! LESS_EQUAL      [ shift and go to state 47 ]


state 80

    (23) binary_expression -> expression GREATER_THAN expression .
    (16) binary_expression -> expression . PLUS expression
    (17) binary_expression -> expression . MINUS expression
    (18) binary_expression -> expression . MULTIPLY expression
    (19) binary_expression -> expression . DIVIDE expression
    (20) binary_expression -> expression . AND expression
    (21) binary_expression -> expression . OR expression
    (22) binary_expression -> expression . EQUALS expression
    (23) binary_expression -> expression . GREATER_THAN expression
    (24) binary_expression -> expression . LESS_THAN expression
    (25) binary_expression -> expression . GREATER_EQUAL expression
    (26) binary_expression -> expression . LESS_EQUAL expression

    SEMICOLON       reduce using rule 23 (binary_expression -> expression GREATER_THAN expression .)
    AND             reduce using rule 23 (binary_expression -> expression GREATER_THAN expression .)
    OR              reduce using rule 23 (binary_expression -> expression GREATER_THAN expression .)
    EQUALS          reduce using rule 23 (binary_expression -> expression GREATER_THAN expression .)
    GREATER_THAN    reduce using rule 23 (binary_expression -> expression GREATER_THAN expression .)
    LESS_THAN       reduce using rule 23 (binary_expression -> expression GREATER_THAN expression .)
    GREATER_EQUAL   reduce using rule 23 (binary_expression -> expression GREATER_THAN expression .)
    LESS_EQUAL      reduce using rule 23 (binary_expression -> expression GREATER_THAN expression .)
    R_PARENTHESIS   reduce using rule 23 (binary_expression -> expression GREATER_THAN expression .)
    COMMA           reduce using rule 23 (binary_expression -> expression GREATER_THAN expression .)
    R_BRACKET       reduce using rule 23 (binary_expression -> expression GREATER_THAN expression .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40

  ! PLUS            [ reduce using rule 23 (binary_expression -> expression GREATER_THAN expression .) ]
  ! MINUS           [ reduce using rule 23 (binary_expression -> expression GREATER_THAN expression .) ]
  ! MULTIPLY        [ reduce using rule 23 (binary_expression -> expression GREATER_THAN expression .) ]
  ! DIVIDE          [ reduce using rule 23 (binary_expression -> expression GREATER_THAN expression .) ]
  ! AND             [ shift and go to state 41 ]
  ! OR              [ shift and go to state 42 ]
  ! EQUALS          [ shift and go to state 43 ]
  ! GREATER_THAN    [ shift and go to state 44 ]
  ! LESS_THAN       [ shift and go to state 45 ]
  ! GREATER_EQUAL   [ shift and go to state 46 ]
  ! LESS_EQUAL      [ shift and go to state 47 ]


state 81

    (24) binary_expression -> expression LESS_THAN expression .
    (16) binary_expression -> expression . PLUS expression
    (17) binary_expression -> expression . MINUS expression
    (18) binary_expression -> expression . MULTIPLY expression
    (19) binary_expression -> expression . DIVIDE expression
    (20) binary_expression -> expression . AND expression
    (21) binary_expression -> expression . OR expression
    (22) binary_expression -> expression . EQUALS expression
    (23) binary_expression -> expression . GREATER_THAN expression
    (24) binary_expression -> expression . LESS_THAN expression
    (25) binary_expression -> expression . GREATER_EQUAL expression
    (26) binary_expression -> expression . LESS_EQUAL expression

    SEMICOLON       reduce using rule 24 (binary_expression -> expression LESS_THAN expression .)
    AND             reduce using rule 24 (binary_expression -> expression LESS_THAN expression .)
    OR              reduce using rule 24 (binary_expression -> expression LESS_THAN expression .)
    EQUALS          reduce using rule 24 (binary_expression -> expression LESS_THAN expression .)
    GREATER_THAN    reduce using rule 24 (binary_expression -> expression LESS_THAN expression .)
    LESS_THAN       reduce using rule 24 (binary_expression -> expression LESS_THAN expression .)
    GREATER_EQUAL   reduce using rule 24 (binary_expression -> expression LESS_THAN expression .)
    LESS_EQUAL      reduce using rule 24 (binary_expression -> expression LESS_THAN expression .)
    R_PARENTHESIS   reduce using rule 24 (binary_expression -> expression LESS_THAN expression .)
    COMMA           reduce using rule 24 (binary_expression -> expression LESS_THAN expression .)
    R_BRACKET       reduce using rule 24 (binary_expression -> expression LESS_THAN expression .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40

  ! PLUS            [ reduce using rule 24 (binary_expression -> expression LESS_THAN expression .) ]
  ! MINUS           [ reduce using rule 24 (binary_expression -> expression LESS_THAN expression .) ]
  ! MULTIPLY        [ reduce using rule 24 (binary_expression -> expression LESS_THAN expression .) ]
  ! DIVIDE          [ reduce using rule 24 (binary_expression -> expression LESS_THAN expression .) ]
  ! AND             [ shift and go to state 41 ]
  ! OR              [ shift and go to state 42 ]
  ! EQUALS          [ shift and go to state 43 ]
  ! GREATER_THAN    [ shift and go to state 44 ]
  ! LESS_THAN       [ shift and go to state 45 ]
  ! GREATER_EQUAL   [ shift and go to state 46 ]
  ! LESS_EQUAL      [ shift and go to state 47 ]


state 82

    (25) binary_expression -> expression GREATER_EQUAL expression .
    (16) binary_expression -> expression . PLUS expression
    (17) binary_expression -> expression . MINUS expression
    (18) binary_expression -> expression . MULTIPLY expression
    (19) binary_expression -> expression . DIVIDE expression
    (20) binary_expression -> expression . AND expression
    (21) binary_expression -> expression . OR expression
    (22) binary_expression -> expression . EQUALS expression
    (23) binary_expression -> expression . GREATER_THAN expression
    (24) binary_expression -> expression . LESS_THAN expression
    (25) binary_expression -> expression . GREATER_EQUAL expression
    (26) binary_expression -> expression . LESS_EQUAL expression

    SEMICOLON       reduce using rule 25 (binary_expression -> expression GREATER_EQUAL expression .)
    AND             reduce using rule 25 (binary_expression -> expression GREATER_EQUAL expression .)
    OR              reduce using rule 25 (binary_expression -> expression GREATER_EQUAL expression .)
    EQUALS          reduce using rule 25 (binary_expression -> expression GREATER_EQUAL expression .)
    GREATER_THAN    reduce using rule 25 (binary_expression -> expression GREATER_EQUAL expression .)
    LESS_THAN       reduce using rule 25 (binary_expression -> expression GREATER_EQUAL expression .)
    GREATER_EQUAL   reduce using rule 25 (binary_expression -> expression GREATER_EQUAL expression .)
    LESS_EQUAL      reduce using rule 25 (binary_expression -> expression GREATER_EQUAL expression .)
    R_PARENTHESIS   reduce using rule 25 (binary_expression -> expression GREATER_EQUAL expression .)
    COMMA           reduce using rule 25 (binary_expression -> expression GREATER_EQUAL expression .)
    R_BRACKET       reduce using rule 25 (binary_expression -> expression GREATER_EQUAL expression .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40

  ! PLUS            [ reduce using rule 25 (binary_expression -> expression GREATER_EQUAL expression .) ]
  ! MINUS           [ reduce using rule 25 (binary_expression -> expression GREATER_EQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 25 (binary_expression -> expression GREATER_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 25 (binary_expression -> expression GREATER_EQUAL expression .) ]
  ! AND             [ shift and go to state 41 ]
  ! OR              [ shift and go to state 42 ]
  ! EQUALS          [ shift and go to state 43 ]
  ! GREATER_THAN    [ shift and go to state 44 ]
  ! LESS_THAN       [ shift and go to state 45 ]
  ! GREATER_EQUAL   [ shift and go to state 46 ]
  ! LESS_EQUAL      [ shift and go to state 47 ]


state 83

    (26) binary_expression -> expression LESS_EQUAL expression .
    (16) binary_expression -> expression . PLUS expression
    (17) binary_expression -> expression . MINUS expression
    (18) binary_expression -> expression . MULTIPLY expression
    (19) binary_expression -> expression . DIVIDE expression
    (20) binary_expression -> expression . AND expression
    (21) binary_expression -> expression . OR expression
    (22) binary_expression -> expression . EQUALS expression
    (23) binary_expression -> expression . GREATER_THAN expression
    (24) binary_expression -> expression . LESS_THAN expression
    (25) binary_expression -> expression . GREATER_EQUAL expression
    (26) binary_expression -> expression . LESS_EQUAL expression

    SEMICOLON       reduce using rule 26 (binary_expression -> expression LESS_EQUAL expression .)
    AND             reduce using rule 26 (binary_expression -> expression LESS_EQUAL expression .)
    OR              reduce using rule 26 (binary_expression -> expression LESS_EQUAL expression .)
    EQUALS          reduce using rule 26 (binary_expression -> expression LESS_EQUAL expression .)
    GREATER_THAN    reduce using rule 26 (binary_expression -> expression LESS_EQUAL expression .)
    LESS_THAN       reduce using rule 26 (binary_expression -> expression LESS_EQUAL expression .)
    GREATER_EQUAL   reduce using rule 26 (binary_expression -> expression LESS_EQUAL expression .)
    LESS_EQUAL      reduce using rule 26 (binary_expression -> expression LESS_EQUAL expression .)
    R_PARENTHESIS   reduce using rule 26 (binary_expression -> expression LESS_EQUAL expression .)
    COMMA           reduce using rule 26 (binary_expression -> expression LESS_EQUAL expression .)
    R_BRACKET       reduce using rule 26 (binary_expression -> expression LESS_EQUAL expression .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40

  ! PLUS            [ reduce using rule 26 (binary_expression -> expression LESS_EQUAL expression .) ]
  ! MINUS           [ reduce using rule 26 (binary_expression -> expression LESS_EQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 26 (binary_expression -> expression LESS_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 26 (binary_expression -> expression LESS_EQUAL expression .) ]
  ! AND             [ shift and go to state 41 ]
  ! OR              [ shift and go to state 42 ]
  ! EQUALS          [ shift and go to state 43 ]
  ! GREATER_THAN    [ shift and go to state 44 ]
  ! LESS_THAN       [ shift and go to state 45 ]
  ! GREATER_EQUAL   [ shift and go to state 46 ]
  ! LESS_EQUAL      [ shift and go to state 47 ]


state 84

    (56) basic_var_assignment -> variable_declaration ASSIGN expression .
    (16) binary_expression -> expression . PLUS expression
    (17) binary_expression -> expression . MINUS expression
    (18) binary_expression -> expression . MULTIPLY expression
    (19) binary_expression -> expression . DIVIDE expression
    (20) binary_expression -> expression . AND expression
    (21) binary_expression -> expression . OR expression
    (22) binary_expression -> expression . EQUALS expression
    (23) binary_expression -> expression . GREATER_THAN expression
    (24) binary_expression -> expression . LESS_THAN expression
    (25) binary_expression -> expression . GREATER_EQUAL expression
    (26) binary_expression -> expression . LESS_EQUAL expression

    SEMICOLON       reduce using rule 56 (basic_var_assignment -> variable_declaration ASSIGN expression .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    EQUALS          shift and go to state 43
    GREATER_THAN    shift and go to state 44
    LESS_THAN       shift and go to state 45
    GREATER_EQUAL   shift and go to state 46
    LESS_EQUAL      shift and go to state 47


state 85

    (57) object_var_assignment -> variable_declaration ASSIGN object_body .

    SEMICOLON       reduce using rule 57 (object_var_assignment -> variable_declaration ASSIGN object_body .)


state 86

    (61) object_body -> L_BRACKET . object_body_content R_BRACKET
    (62) object_body_content -> . ID TWO_POINTS expression recursive_obejct_body_content
    (63) object_body_content -> . QUOTED_ID TWO_POINTS expression recursive_obejct_body_content
    (64) object_body_content -> . ID TWO_POINTS object_body recursive_obejct_body_content
    (65) object_body_content -> . QUOTED_ID TWO_POINTS object_body recursive_obejct_body_content

    ID              shift and go to state 113
    QUOTED_ID       shift and go to state 114

    object_body_content            shift and go to state 112

state 87

    (12) expression -> L_PARENTHESIS expression R_PARENTHESIS .

    SEMICOLON       reduce using rule 12 (expression -> L_PARENTHESIS expression R_PARENTHESIS .)
    PLUS            reduce using rule 12 (expression -> L_PARENTHESIS expression R_PARENTHESIS .)
    MINUS           reduce using rule 12 (expression -> L_PARENTHESIS expression R_PARENTHESIS .)
    MULTIPLY        reduce using rule 12 (expression -> L_PARENTHESIS expression R_PARENTHESIS .)
    DIVIDE          reduce using rule 12 (expression -> L_PARENTHESIS expression R_PARENTHESIS .)
    AND             reduce using rule 12 (expression -> L_PARENTHESIS expression R_PARENTHESIS .)
    OR              reduce using rule 12 (expression -> L_PARENTHESIS expression R_PARENTHESIS .)
    EQUALS          reduce using rule 12 (expression -> L_PARENTHESIS expression R_PARENTHESIS .)
    GREATER_THAN    reduce using rule 12 (expression -> L_PARENTHESIS expression R_PARENTHESIS .)
    LESS_THAN       reduce using rule 12 (expression -> L_PARENTHESIS expression R_PARENTHESIS .)
    GREATER_EQUAL   reduce using rule 12 (expression -> L_PARENTHESIS expression R_PARENTHESIS .)
    LESS_EQUAL      reduce using rule 12 (expression -> L_PARENTHESIS expression R_PARENTHESIS .)
    R_PARENTHESIS   reduce using rule 12 (expression -> L_PARENTHESIS expression R_PARENTHESIS .)
    COMMA           reduce using rule 12 (expression -> L_PARENTHESIS expression R_PARENTHESIS .)
    R_BRACKET       reduce using rule 12 (expression -> L_PARENTHESIS expression R_PARENTHESIS .)


state 88

    (38) value -> ID DOT . ID recursive_atribute_access

    ID              shift and go to state 115


state 89

    (39) value -> ID L_SQ_BRACKET . QUOTED_ID R_SQ_BRACKET recursive_atribute_access

    QUOTED_ID       shift and go to state 116


state 90

    (47) variable_declaration -> LET ID recursive_variable_declaration .

    SEMICOLON       reduce using rule 47 (variable_declaration -> LET ID recursive_variable_declaration .)
    ASSIGN          reduce using rule 47 (variable_declaration -> LET ID recursive_variable_declaration .)


state 91

    (48) variable_declaration -> LET ID TWO_POINTS . ID recursive_variable_declaration
    (49) variable_declaration -> LET ID TWO_POINTS . type recursive_variable_declaration
    (88) type -> . INT
    (89) type -> . FLOAT
    (90) type -> . CHARACTER
    (91) type -> . BOOLEAN

    ID              shift and go to state 117
    INT             shift and go to state 119
    FLOAT           shift and go to state 120
    CHARACTER       shift and go to state 121
    BOOLEAN         shift and go to state 122

    type                           shift and go to state 118

state 92

    (50) recursive_variable_declaration -> COMMA . ID recursive_variable_declaration
    (51) recursive_variable_declaration -> COMMA . ID TWO_POINTS ID recursive_variable_declaration

    ID              shift and go to state 123


state 93

    (52) recursive_variable_declaration -> empty .

    SEMICOLON       reduce using rule 52 (recursive_variable_declaration -> empty .)
    ASSIGN          reduce using rule 52 (recursive_variable_declaration -> empty .)


state 94

    (37) value -> ID L_PARENTHESIS argument_list . R_PARENTHESIS

    R_PARENTHESIS   shift and go to state 124


state 95

    (40) argument_list -> expression .
    (41) argument_list -> expression . COMMA argument_list
    (16) binary_expression -> expression . PLUS expression
    (17) binary_expression -> expression . MINUS expression
    (18) binary_expression -> expression . MULTIPLY expression
    (19) binary_expression -> expression . DIVIDE expression
    (20) binary_expression -> expression . AND expression
    (21) binary_expression -> expression . OR expression
    (22) binary_expression -> expression . EQUALS expression
    (23) binary_expression -> expression . GREATER_THAN expression
    (24) binary_expression -> expression . LESS_THAN expression
    (25) binary_expression -> expression . GREATER_EQUAL expression
    (26) binary_expression -> expression . LESS_EQUAL expression

    R_PARENTHESIS   reduce using rule 40 (argument_list -> expression .)
    COMMA           shift and go to state 125
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    EQUALS          shift and go to state 43
    GREATER_THAN    shift and go to state 44
    LESS_THAN       shift and go to state 45
    GREATER_EQUAL   shift and go to state 46
    LESS_EQUAL      shift and go to state 47


state 96

    (42) argument_list -> empty .

    R_PARENTHESIS   reduce using rule 42 (argument_list -> empty .)


state 97

    (38) value -> ID DOT ID . recursive_atribute_access
    (44) recursive_atribute_access -> DOT ID . recursive_atribute_access
    (44) recursive_atribute_access -> . DOT ID recursive_atribute_access
    (45) recursive_atribute_access -> . L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access
    (46) recursive_atribute_access -> . empty
    (1) empty -> .

    DOT             shift and go to state 126
    L_SQ_BRACKET    shift and go to state 128
    SEMICOLON       reduce using rule 1 (empty -> .)
    PLUS            reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    MULTIPLY        reduce using rule 1 (empty -> .)
    DIVIDE          reduce using rule 1 (empty -> .)
    AND             reduce using rule 1 (empty -> .)
    OR              reduce using rule 1 (empty -> .)
    EQUALS          reduce using rule 1 (empty -> .)
    GREATER_THAN    reduce using rule 1 (empty -> .)
    LESS_THAN       reduce using rule 1 (empty -> .)
    GREATER_EQUAL   reduce using rule 1 (empty -> .)
    LESS_EQUAL      reduce using rule 1 (empty -> .)
    ASSIGN          reduce using rule 1 (empty -> .)

    recursive_atribute_access      shift and go to state 127
    empty                          shift and go to state 60

state 98

    (39) value -> ID L_SQ_BRACKET QUOTED_ID . R_SQ_BRACKET recursive_atribute_access
    (45) recursive_atribute_access -> L_SQ_BRACKET QUOTED_ID . R_SQ_BRACKET recursive_atribute_access

    R_SQ_BRACKET    shift and go to state 129


state 99

    (55) basic_var_assignment -> ID ASSIGN expression .
    (16) binary_expression -> expression . PLUS expression
    (17) binary_expression -> expression . MINUS expression
    (18) binary_expression -> expression . MULTIPLY expression
    (19) binary_expression -> expression . DIVIDE expression
    (20) binary_expression -> expression . AND expression
    (21) binary_expression -> expression . OR expression
    (22) binary_expression -> expression . EQUALS expression
    (23) binary_expression -> expression . GREATER_THAN expression
    (24) binary_expression -> expression . LESS_THAN expression
    (25) binary_expression -> expression . GREATER_EQUAL expression
    (26) binary_expression -> expression . LESS_EQUAL expression

    SEMICOLON       reduce using rule 55 (basic_var_assignment -> ID ASSIGN expression .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    EQUALS          shift and go to state 43
    GREATER_THAN    shift and go to state 44
    LESS_THAN       shift and go to state 45
    GREATER_EQUAL   shift and go to state 46
    LESS_EQUAL      shift and go to state 47


state 100

    (58) object_var_assignment -> ID ASSIGN object_body .

    SEMICOLON       reduce using rule 58 (object_var_assignment -> ID ASSIGN object_body .)


state 101

    (72) type_declaration -> TYPE ID ASSIGN . type_body
    (73) type_body -> . L_BRACKET type_body_content R_BRACKET

    L_BRACKET       shift and go to state 131

    type_body                      shift and go to state 130

state 102

    (94) function_body -> L_BRACKET statement_list . RETURN return_statement R_BRACKET

    RETURN          shift and go to state 132


state 103

    (104) if_statement -> IF if_evaluation if_statements . else_statement
    (107) else_statement -> . ELSE L_BRACKET statement statement_list R_BRACKET
    (108) else_statement -> . empty
    (1) empty -> .

    ELSE            shift and go to state 134
    L_PARENTHESIS   reduce using rule 1 (empty -> .)
    LET             reduce using rule 1 (empty -> .)
    TYPE            reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    NUMBER_VALUE    reduce using rule 1 (empty -> .)
    CHAR_VALUE      reduce using rule 1 (empty -> .)
    BOOL_VALUE      reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    NULL            reduce using rule 1 (empty -> .)
    FUNCTION        reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    NOT             reduce using rule 1 (empty -> .)
    PLUS            reduce using rule 1 (empty -> .)
    $end            reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    R_BRACKET       reduce using rule 1 (empty -> .)

    else_statement                 shift and go to state 133
    empty                          shift and go to state 135

state 104

    (106) if_statements -> L_BRACKET . statement statement_list R_BRACKET
    (5) statement -> . expression SEMICOLON
    (6) statement -> . variable_declaration SEMICOLON
    (7) statement -> . variable_assignment SEMICOLON
    (8) statement -> . type_declaration SEMICOLON
    (9) statement -> . function_declaration
    (10) statement -> . if_statement
    (11) statement -> . while_statement
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . binary_expression
    (14) expression -> . unary_expression
    (15) expression -> . value
    (47) variable_declaration -> . LET ID recursive_variable_declaration
    (48) variable_declaration -> . LET ID TWO_POINTS ID recursive_variable_declaration
    (49) variable_declaration -> . LET ID TWO_POINTS type recursive_variable_declaration
    (53) variable_assignment -> . basic_var_assignment
    (54) variable_assignment -> . object_var_assignment
    (72) type_declaration -> . TYPE ID ASSIGN type_body
    (92) function_declaration -> . function_header function_body
    (104) if_statement -> . IF if_evaluation if_statements else_statement
    (109) while_statement -> . while_header while_statements
    (16) binary_expression -> . expression PLUS expression
    (17) binary_expression -> . expression MINUS expression
    (18) binary_expression -> . expression MULTIPLY expression
    (19) binary_expression -> . expression DIVIDE expression
    (20) binary_expression -> . expression AND expression
    (21) binary_expression -> . expression OR expression
    (22) binary_expression -> . expression EQUALS expression
    (23) binary_expression -> . expression GREATER_THAN expression
    (24) binary_expression -> . expression LESS_THAN expression
    (25) binary_expression -> . expression GREATER_EQUAL expression
    (26) binary_expression -> . expression LESS_EQUAL expression
    (27) unary_expression -> . unary_operator L_PARENTHESIS expression R_PARENTHESIS
    (28) unary_expression -> . unary_operator value
    (32) value -> . NUMBER_VALUE
    (33) value -> . CHAR_VALUE
    (34) value -> . BOOL_VALUE
    (35) value -> . ID
    (36) value -> . NULL
    (37) value -> . ID L_PARENTHESIS argument_list R_PARENTHESIS
    (38) value -> . ID DOT ID recursive_atribute_access
    (39) value -> . ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access
    (55) basic_var_assignment -> . ID ASSIGN expression
    (56) basic_var_assignment -> . variable_declaration ASSIGN expression
    (57) object_var_assignment -> . variable_declaration ASSIGN object_body
    (58) object_var_assignment -> . ID ASSIGN object_body
    (59) object_var_assignment -> . atribute_access ASSIGN expression
    (60) object_var_assignment -> . atribute_access ASSIGN object_body
    (93) function_header -> . FUNCTION ID L_PARENTHESIS function_params R_PARENTHESIS TWO_POINTS return_type
    (110) while_header -> . WHILE L_PARENTHESIS expression R_PARENTHESIS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . PLUS
    (43) atribute_access -> . ID recursive_atribute_access

    L_PARENTHESIS   shift and go to state 12
    LET             shift and go to state 16
    TYPE            shift and go to state 20
    IF              shift and go to state 22
    NUMBER_VALUE    shift and go to state 27
    CHAR_VALUE      shift and go to state 28
    BOOL_VALUE      shift and go to state 29
    ID              shift and go to state 17
    NULL            shift and go to state 30
    FUNCTION        shift and go to state 32
    WHILE           shift and go to state 33
    MINUS           shift and go to state 25
    NOT             shift and go to state 34
    PLUS            shift and go to state 24

    statement                      shift and go to state 136
    expression                     shift and go to state 5
    variable_declaration           shift and go to state 6
    variable_assignment            shift and go to state 7
    type_declaration               shift and go to state 8
    function_declaration           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    binary_expression              shift and go to state 13
    unary_expression               shift and go to state 14
    value                          shift and go to state 15
    basic_var_assignment           shift and go to state 18
    object_var_assignment          shift and go to state 19
    function_header                shift and go to state 21
    while_header                   shift and go to state 23
    unary_operator                 shift and go to state 26
    atribute_access                shift and go to state 31

state 105

    (105) if_evaluation -> L_PARENTHESIS expression . R_PARENTHESIS
    (16) binary_expression -> expression . PLUS expression
    (17) binary_expression -> expression . MINUS expression
    (18) binary_expression -> expression . MULTIPLY expression
    (19) binary_expression -> expression . DIVIDE expression
    (20) binary_expression -> expression . AND expression
    (21) binary_expression -> expression . OR expression
    (22) binary_expression -> expression . EQUALS expression
    (23) binary_expression -> expression . GREATER_THAN expression
    (24) binary_expression -> expression . LESS_THAN expression
    (25) binary_expression -> expression . GREATER_EQUAL expression
    (26) binary_expression -> expression . LESS_EQUAL expression

    R_PARENTHESIS   shift and go to state 137
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    EQUALS          shift and go to state 43
    GREATER_THAN    shift and go to state 44
    LESS_THAN       shift and go to state 45
    GREATER_EQUAL   shift and go to state 46
    LESS_EQUAL      shift and go to state 47


state 106

    (111) while_statements -> L_BRACKET statement . statement_list R_BRACKET
    (3) statement_list -> . statement statement_list
    (4) statement_list -> . empty
    (5) statement -> . expression SEMICOLON
    (6) statement -> . variable_declaration SEMICOLON
    (7) statement -> . variable_assignment SEMICOLON
    (8) statement -> . type_declaration SEMICOLON
    (9) statement -> . function_declaration
    (10) statement -> . if_statement
    (11) statement -> . while_statement
    (1) empty -> .
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . binary_expression
    (14) expression -> . unary_expression
    (15) expression -> . value
    (47) variable_declaration -> . LET ID recursive_variable_declaration
    (48) variable_declaration -> . LET ID TWO_POINTS ID recursive_variable_declaration
    (49) variable_declaration -> . LET ID TWO_POINTS type recursive_variable_declaration
    (53) variable_assignment -> . basic_var_assignment
    (54) variable_assignment -> . object_var_assignment
    (72) type_declaration -> . TYPE ID ASSIGN type_body
    (92) function_declaration -> . function_header function_body
    (104) if_statement -> . IF if_evaluation if_statements else_statement
    (109) while_statement -> . while_header while_statements
    (16) binary_expression -> . expression PLUS expression
    (17) binary_expression -> . expression MINUS expression
    (18) binary_expression -> . expression MULTIPLY expression
    (19) binary_expression -> . expression DIVIDE expression
    (20) binary_expression -> . expression AND expression
    (21) binary_expression -> . expression OR expression
    (22) binary_expression -> . expression EQUALS expression
    (23) binary_expression -> . expression GREATER_THAN expression
    (24) binary_expression -> . expression LESS_THAN expression
    (25) binary_expression -> . expression GREATER_EQUAL expression
    (26) binary_expression -> . expression LESS_EQUAL expression
    (27) unary_expression -> . unary_operator L_PARENTHESIS expression R_PARENTHESIS
    (28) unary_expression -> . unary_operator value
    (32) value -> . NUMBER_VALUE
    (33) value -> . CHAR_VALUE
    (34) value -> . BOOL_VALUE
    (35) value -> . ID
    (36) value -> . NULL
    (37) value -> . ID L_PARENTHESIS argument_list R_PARENTHESIS
    (38) value -> . ID DOT ID recursive_atribute_access
    (39) value -> . ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access
    (55) basic_var_assignment -> . ID ASSIGN expression
    (56) basic_var_assignment -> . variable_declaration ASSIGN expression
    (57) object_var_assignment -> . variable_declaration ASSIGN object_body
    (58) object_var_assignment -> . ID ASSIGN object_body
    (59) object_var_assignment -> . atribute_access ASSIGN expression
    (60) object_var_assignment -> . atribute_access ASSIGN object_body
    (93) function_header -> . FUNCTION ID L_PARENTHESIS function_params R_PARENTHESIS TWO_POINTS return_type
    (110) while_header -> . WHILE L_PARENTHESIS expression R_PARENTHESIS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . PLUS
    (43) atribute_access -> . ID recursive_atribute_access

    R_BRACKET       reduce using rule 1 (empty -> .)
    L_PARENTHESIS   shift and go to state 12
    LET             shift and go to state 16
    TYPE            shift and go to state 20
    IF              shift and go to state 22
    NUMBER_VALUE    shift and go to state 27
    CHAR_VALUE      shift and go to state 28
    BOOL_VALUE      shift and go to state 29
    ID              shift and go to state 17
    NULL            shift and go to state 30
    FUNCTION        shift and go to state 32
    WHILE           shift and go to state 33
    MINUS           shift and go to state 25
    NOT             shift and go to state 34
    PLUS            shift and go to state 24

    statement                      shift and go to state 3
    statement_list                 shift and go to state 138
    empty                          shift and go to state 4
    expression                     shift and go to state 5
    variable_declaration           shift and go to state 6
    variable_assignment            shift and go to state 7
    type_declaration               shift and go to state 8
    function_declaration           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    binary_expression              shift and go to state 13
    unary_expression               shift and go to state 14
    value                          shift and go to state 15
    basic_var_assignment           shift and go to state 18
    object_var_assignment          shift and go to state 19
    function_header                shift and go to state 21
    while_header                   shift and go to state 23
    unary_operator                 shift and go to state 26
    atribute_access                shift and go to state 31

state 107

    (27) unary_expression -> unary_operator L_PARENTHESIS expression . R_PARENTHESIS
    (16) binary_expression -> expression . PLUS expression
    (17) binary_expression -> expression . MINUS expression
    (18) binary_expression -> expression . MULTIPLY expression
    (19) binary_expression -> expression . DIVIDE expression
    (20) binary_expression -> expression . AND expression
    (21) binary_expression -> expression . OR expression
    (22) binary_expression -> expression . EQUALS expression
    (23) binary_expression -> expression . GREATER_THAN expression
    (24) binary_expression -> expression . LESS_THAN expression
    (25) binary_expression -> expression . GREATER_EQUAL expression
    (26) binary_expression -> expression . LESS_EQUAL expression

    R_PARENTHESIS   shift and go to state 139
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    EQUALS          shift and go to state 43
    GREATER_THAN    shift and go to state 44
    LESS_THAN       shift and go to state 45
    GREATER_EQUAL   shift and go to state 46
    LESS_EQUAL      shift and go to state 47


state 108

    (59) object_var_assignment -> atribute_access ASSIGN expression .
    (16) binary_expression -> expression . PLUS expression
    (17) binary_expression -> expression . MINUS expression
    (18) binary_expression -> expression . MULTIPLY expression
    (19) binary_expression -> expression . DIVIDE expression
    (20) binary_expression -> expression . AND expression
    (21) binary_expression -> expression . OR expression
    (22) binary_expression -> expression . EQUALS expression
    (23) binary_expression -> expression . GREATER_THAN expression
    (24) binary_expression -> expression . LESS_THAN expression
    (25) binary_expression -> expression . GREATER_EQUAL expression
    (26) binary_expression -> expression . LESS_EQUAL expression

    SEMICOLON       reduce using rule 59 (object_var_assignment -> atribute_access ASSIGN expression .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    EQUALS          shift and go to state 43
    GREATER_THAN    shift and go to state 44
    LESS_THAN       shift and go to state 45
    GREATER_EQUAL   shift and go to state 46
    LESS_EQUAL      shift and go to state 47


state 109

    (60) object_var_assignment -> atribute_access ASSIGN object_body .

    SEMICOLON       reduce using rule 60 (object_var_assignment -> atribute_access ASSIGN object_body .)


state 110

    (93) function_header -> FUNCTION ID L_PARENTHESIS . function_params R_PARENTHESIS TWO_POINTS return_type
    (95) function_params -> . ID TWO_POINTS type COMMA function_params
    (96) function_params -> . ID TWO_POINTS type
    (97) function_params -> . ID TWO_POINTS ID COMMA function_params
    (98) function_params -> . ID TWO_POINTS ID
    (99) function_params -> . empty
    (1) empty -> .

    ID              shift and go to state 140
    R_PARENTHESIS   reduce using rule 1 (empty -> .)

    function_params                shift and go to state 141
    empty                          shift and go to state 142

state 111

    (110) while_header -> WHILE L_PARENTHESIS expression . R_PARENTHESIS
    (16) binary_expression -> expression . PLUS expression
    (17) binary_expression -> expression . MINUS expression
    (18) binary_expression -> expression . MULTIPLY expression
    (19) binary_expression -> expression . DIVIDE expression
    (20) binary_expression -> expression . AND expression
    (21) binary_expression -> expression . OR expression
    (22) binary_expression -> expression . EQUALS expression
    (23) binary_expression -> expression . GREATER_THAN expression
    (24) binary_expression -> expression . LESS_THAN expression
    (25) binary_expression -> expression . GREATER_EQUAL expression
    (26) binary_expression -> expression . LESS_EQUAL expression

    R_PARENTHESIS   shift and go to state 143
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    EQUALS          shift and go to state 43
    GREATER_THAN    shift and go to state 44
    LESS_THAN       shift and go to state 45
    GREATER_EQUAL   shift and go to state 46
    LESS_EQUAL      shift and go to state 47


state 112

    (61) object_body -> L_BRACKET object_body_content . R_BRACKET

    R_BRACKET       shift and go to state 144


state 113

    (62) object_body_content -> ID . TWO_POINTS expression recursive_obejct_body_content
    (64) object_body_content -> ID . TWO_POINTS object_body recursive_obejct_body_content

    TWO_POINTS      shift and go to state 145


state 114

    (63) object_body_content -> QUOTED_ID . TWO_POINTS expression recursive_obejct_body_content
    (65) object_body_content -> QUOTED_ID . TWO_POINTS object_body recursive_obejct_body_content

    TWO_POINTS      shift and go to state 146


state 115

    (38) value -> ID DOT ID . recursive_atribute_access
    (44) recursive_atribute_access -> . DOT ID recursive_atribute_access
    (45) recursive_atribute_access -> . L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access
    (46) recursive_atribute_access -> . empty
    (1) empty -> .

    DOT             shift and go to state 126
    L_SQ_BRACKET    shift and go to state 128
    R_PARENTHESIS   reduce using rule 1 (empty -> .)
    PLUS            reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    MULTIPLY        reduce using rule 1 (empty -> .)
    DIVIDE          reduce using rule 1 (empty -> .)
    AND             reduce using rule 1 (empty -> .)
    OR              reduce using rule 1 (empty -> .)
    EQUALS          reduce using rule 1 (empty -> .)
    GREATER_THAN    reduce using rule 1 (empty -> .)
    LESS_THAN       reduce using rule 1 (empty -> .)
    GREATER_EQUAL   reduce using rule 1 (empty -> .)
    LESS_EQUAL      reduce using rule 1 (empty -> .)
    SEMICOLON       reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)
    R_BRACKET       reduce using rule 1 (empty -> .)

    recursive_atribute_access      shift and go to state 147
    empty                          shift and go to state 60

state 116

    (39) value -> ID L_SQ_BRACKET QUOTED_ID . R_SQ_BRACKET recursive_atribute_access

    R_SQ_BRACKET    shift and go to state 148


state 117

    (48) variable_declaration -> LET ID TWO_POINTS ID . recursive_variable_declaration
    (50) recursive_variable_declaration -> . COMMA ID recursive_variable_declaration
    (51) recursive_variable_declaration -> . COMMA ID TWO_POINTS ID recursive_variable_declaration
    (52) recursive_variable_declaration -> . empty
    (1) empty -> .

    COMMA           shift and go to state 92
    SEMICOLON       reduce using rule 1 (empty -> .)
    ASSIGN          reduce using rule 1 (empty -> .)

    recursive_variable_declaration shift and go to state 149
    empty                          shift and go to state 93

state 118

    (49) variable_declaration -> LET ID TWO_POINTS type . recursive_variable_declaration
    (50) recursive_variable_declaration -> . COMMA ID recursive_variable_declaration
    (51) recursive_variable_declaration -> . COMMA ID TWO_POINTS ID recursive_variable_declaration
    (52) recursive_variable_declaration -> . empty
    (1) empty -> .

    COMMA           shift and go to state 92
    SEMICOLON       reduce using rule 1 (empty -> .)
    ASSIGN          reduce using rule 1 (empty -> .)

    recursive_variable_declaration shift and go to state 150
    empty                          shift and go to state 93

state 119

    (88) type -> INT .

    COMMA           reduce using rule 88 (type -> INT .)
    SEMICOLON       reduce using rule 88 (type -> INT .)
    ASSIGN          reduce using rule 88 (type -> INT .)
    R_PARENTHESIS   reduce using rule 88 (type -> INT .)
    R_BRACKET       reduce using rule 88 (type -> INT .)
    L_BRACKET       reduce using rule 88 (type -> INT .)


state 120

    (89) type -> FLOAT .

    COMMA           reduce using rule 89 (type -> FLOAT .)
    SEMICOLON       reduce using rule 89 (type -> FLOAT .)
    ASSIGN          reduce using rule 89 (type -> FLOAT .)
    R_PARENTHESIS   reduce using rule 89 (type -> FLOAT .)
    R_BRACKET       reduce using rule 89 (type -> FLOAT .)
    L_BRACKET       reduce using rule 89 (type -> FLOAT .)


state 121

    (90) type -> CHARACTER .

    COMMA           reduce using rule 90 (type -> CHARACTER .)
    SEMICOLON       reduce using rule 90 (type -> CHARACTER .)
    ASSIGN          reduce using rule 90 (type -> CHARACTER .)
    R_PARENTHESIS   reduce using rule 90 (type -> CHARACTER .)
    R_BRACKET       reduce using rule 90 (type -> CHARACTER .)
    L_BRACKET       reduce using rule 90 (type -> CHARACTER .)


state 122

    (91) type -> BOOLEAN .

    COMMA           reduce using rule 91 (type -> BOOLEAN .)
    SEMICOLON       reduce using rule 91 (type -> BOOLEAN .)
    ASSIGN          reduce using rule 91 (type -> BOOLEAN .)
    R_PARENTHESIS   reduce using rule 91 (type -> BOOLEAN .)
    R_BRACKET       reduce using rule 91 (type -> BOOLEAN .)
    L_BRACKET       reduce using rule 91 (type -> BOOLEAN .)


state 123

    (50) recursive_variable_declaration -> COMMA ID . recursive_variable_declaration
    (51) recursive_variable_declaration -> COMMA ID . TWO_POINTS ID recursive_variable_declaration
    (50) recursive_variable_declaration -> . COMMA ID recursive_variable_declaration
    (51) recursive_variable_declaration -> . COMMA ID TWO_POINTS ID recursive_variable_declaration
    (52) recursive_variable_declaration -> . empty
    (1) empty -> .

    TWO_POINTS      shift and go to state 152
    COMMA           shift and go to state 92
    SEMICOLON       reduce using rule 1 (empty -> .)
    ASSIGN          reduce using rule 1 (empty -> .)

    recursive_variable_declaration shift and go to state 151
    empty                          shift and go to state 93

state 124

    (37) value -> ID L_PARENTHESIS argument_list R_PARENTHESIS .

    SEMICOLON       reduce using rule 37 (value -> ID L_PARENTHESIS argument_list R_PARENTHESIS .)
    PLUS            reduce using rule 37 (value -> ID L_PARENTHESIS argument_list R_PARENTHESIS .)
    MINUS           reduce using rule 37 (value -> ID L_PARENTHESIS argument_list R_PARENTHESIS .)
    MULTIPLY        reduce using rule 37 (value -> ID L_PARENTHESIS argument_list R_PARENTHESIS .)
    DIVIDE          reduce using rule 37 (value -> ID L_PARENTHESIS argument_list R_PARENTHESIS .)
    AND             reduce using rule 37 (value -> ID L_PARENTHESIS argument_list R_PARENTHESIS .)
    OR              reduce using rule 37 (value -> ID L_PARENTHESIS argument_list R_PARENTHESIS .)
    EQUALS          reduce using rule 37 (value -> ID L_PARENTHESIS argument_list R_PARENTHESIS .)
    GREATER_THAN    reduce using rule 37 (value -> ID L_PARENTHESIS argument_list R_PARENTHESIS .)
    LESS_THAN       reduce using rule 37 (value -> ID L_PARENTHESIS argument_list R_PARENTHESIS .)
    GREATER_EQUAL   reduce using rule 37 (value -> ID L_PARENTHESIS argument_list R_PARENTHESIS .)
    LESS_EQUAL      reduce using rule 37 (value -> ID L_PARENTHESIS argument_list R_PARENTHESIS .)
    R_PARENTHESIS   reduce using rule 37 (value -> ID L_PARENTHESIS argument_list R_PARENTHESIS .)
    COMMA           reduce using rule 37 (value -> ID L_PARENTHESIS argument_list R_PARENTHESIS .)
    R_BRACKET       reduce using rule 37 (value -> ID L_PARENTHESIS argument_list R_PARENTHESIS .)


state 125

    (41) argument_list -> expression COMMA . argument_list
    (40) argument_list -> . expression
    (41) argument_list -> . expression COMMA argument_list
    (42) argument_list -> . empty
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . binary_expression
    (14) expression -> . unary_expression
    (15) expression -> . value
    (1) empty -> .
    (16) binary_expression -> . expression PLUS expression
    (17) binary_expression -> . expression MINUS expression
    (18) binary_expression -> . expression MULTIPLY expression
    (19) binary_expression -> . expression DIVIDE expression
    (20) binary_expression -> . expression AND expression
    (21) binary_expression -> . expression OR expression
    (22) binary_expression -> . expression EQUALS expression
    (23) binary_expression -> . expression GREATER_THAN expression
    (24) binary_expression -> . expression LESS_THAN expression
    (25) binary_expression -> . expression GREATER_EQUAL expression
    (26) binary_expression -> . expression LESS_EQUAL expression
    (27) unary_expression -> . unary_operator L_PARENTHESIS expression R_PARENTHESIS
    (28) unary_expression -> . unary_operator value
    (32) value -> . NUMBER_VALUE
    (33) value -> . CHAR_VALUE
    (34) value -> . BOOL_VALUE
    (35) value -> . ID
    (36) value -> . NULL
    (37) value -> . ID L_PARENTHESIS argument_list R_PARENTHESIS
    (38) value -> . ID DOT ID recursive_atribute_access
    (39) value -> . ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . PLUS

    L_PARENTHESIS   shift and go to state 12
    R_PARENTHESIS   reduce using rule 1 (empty -> .)
    NUMBER_VALUE    shift and go to state 27
    CHAR_VALUE      shift and go to state 28
    BOOL_VALUE      shift and go to state 29
    ID              shift and go to state 53
    NULL            shift and go to state 30
    MINUS           shift and go to state 25
    NOT             shift and go to state 34
    PLUS            shift and go to state 24

    expression                     shift and go to state 95
    argument_list                  shift and go to state 153
    empty                          shift and go to state 96
    binary_expression              shift and go to state 13
    unary_expression               shift and go to state 14
    value                          shift and go to state 15
    unary_operator                 shift and go to state 26

state 126

    (44) recursive_atribute_access -> DOT . ID recursive_atribute_access

    ID              shift and go to state 154


state 127

    (38) value -> ID DOT ID recursive_atribute_access .
    (44) recursive_atribute_access -> DOT ID recursive_atribute_access .

    SEMICOLON       reduce using rule 38 (value -> ID DOT ID recursive_atribute_access .)
    PLUS            reduce using rule 38 (value -> ID DOT ID recursive_atribute_access .)
    MINUS           reduce using rule 38 (value -> ID DOT ID recursive_atribute_access .)
    MULTIPLY        reduce using rule 38 (value -> ID DOT ID recursive_atribute_access .)
    DIVIDE          reduce using rule 38 (value -> ID DOT ID recursive_atribute_access .)
    AND             reduce using rule 38 (value -> ID DOT ID recursive_atribute_access .)
    OR              reduce using rule 38 (value -> ID DOT ID recursive_atribute_access .)
    EQUALS          reduce using rule 38 (value -> ID DOT ID recursive_atribute_access .)
    GREATER_THAN    reduce using rule 38 (value -> ID DOT ID recursive_atribute_access .)
    LESS_THAN       reduce using rule 38 (value -> ID DOT ID recursive_atribute_access .)
    GREATER_EQUAL   reduce using rule 38 (value -> ID DOT ID recursive_atribute_access .)
    LESS_EQUAL      reduce using rule 38 (value -> ID DOT ID recursive_atribute_access .)
    ASSIGN          reduce using rule 44 (recursive_atribute_access -> DOT ID recursive_atribute_access .)


state 128

    (45) recursive_atribute_access -> L_SQ_BRACKET . QUOTED_ID R_SQ_BRACKET recursive_atribute_access

    QUOTED_ID       shift and go to state 155


state 129

    (39) value -> ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET . recursive_atribute_access
    (45) recursive_atribute_access -> L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET . recursive_atribute_access
    (44) recursive_atribute_access -> . DOT ID recursive_atribute_access
    (45) recursive_atribute_access -> . L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access
    (46) recursive_atribute_access -> . empty
    (1) empty -> .

    DOT             shift and go to state 126
    L_SQ_BRACKET    shift and go to state 128
    SEMICOLON       reduce using rule 1 (empty -> .)
    PLUS            reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    MULTIPLY        reduce using rule 1 (empty -> .)
    DIVIDE          reduce using rule 1 (empty -> .)
    AND             reduce using rule 1 (empty -> .)
    OR              reduce using rule 1 (empty -> .)
    EQUALS          reduce using rule 1 (empty -> .)
    GREATER_THAN    reduce using rule 1 (empty -> .)
    LESS_THAN       reduce using rule 1 (empty -> .)
    GREATER_EQUAL   reduce using rule 1 (empty -> .)
    LESS_EQUAL      reduce using rule 1 (empty -> .)
    ASSIGN          reduce using rule 1 (empty -> .)

    recursive_atribute_access      shift and go to state 156
    empty                          shift and go to state 60

state 130

    (72) type_declaration -> TYPE ID ASSIGN type_body .

    SEMICOLON       reduce using rule 72 (type_declaration -> TYPE ID ASSIGN type_body .)


state 131

    (73) type_body -> L_BRACKET . type_body_content R_BRACKET
    (74) type_body_content -> . ID TWO_POINTS type type_body_content_recursive
    (75) type_body_content -> . QUOTED_ID TWO_POINTS type type_body_content_recursive
    (76) type_body_content -> . ID TWO_POINTS ID type_body_content_recursive
    (77) type_body_content -> . QUOTED_ID TWO_POINTS ID type_body_content_recursive
    (78) type_body_content -> . ID TWO_POINTS type_body type_body_content_recursive
    (79) type_body_content -> . QUOTED_ID TWO_POINTS type_body type_body_content_recursive

    ID              shift and go to state 158
    QUOTED_ID       shift and go to state 159

    type_body_content              shift and go to state 157

state 132

    (94) function_body -> L_BRACKET statement_list RETURN . return_statement R_BRACKET
    (102) return_statement -> . expression SEMICOLON
    (103) return_statement -> . object_body SEMICOLON
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . binary_expression
    (14) expression -> . unary_expression
    (15) expression -> . value
    (61) object_body -> . L_BRACKET object_body_content R_BRACKET
    (16) binary_expression -> . expression PLUS expression
    (17) binary_expression -> . expression MINUS expression
    (18) binary_expression -> . expression MULTIPLY expression
    (19) binary_expression -> . expression DIVIDE expression
    (20) binary_expression -> . expression AND expression
    (21) binary_expression -> . expression OR expression
    (22) binary_expression -> . expression EQUALS expression
    (23) binary_expression -> . expression GREATER_THAN expression
    (24) binary_expression -> . expression LESS_THAN expression
    (25) binary_expression -> . expression GREATER_EQUAL expression
    (26) binary_expression -> . expression LESS_EQUAL expression
    (27) unary_expression -> . unary_operator L_PARENTHESIS expression R_PARENTHESIS
    (28) unary_expression -> . unary_operator value
    (32) value -> . NUMBER_VALUE
    (33) value -> . CHAR_VALUE
    (34) value -> . BOOL_VALUE
    (35) value -> . ID
    (36) value -> . NULL
    (37) value -> . ID L_PARENTHESIS argument_list R_PARENTHESIS
    (38) value -> . ID DOT ID recursive_atribute_access
    (39) value -> . ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . PLUS

    L_PARENTHESIS   shift and go to state 12
    L_BRACKET       shift and go to state 86
    NUMBER_VALUE    shift and go to state 27
    CHAR_VALUE      shift and go to state 28
    BOOL_VALUE      shift and go to state 29
    ID              shift and go to state 53
    NULL            shift and go to state 30
    MINUS           shift and go to state 25
    NOT             shift and go to state 34
    PLUS            shift and go to state 24

    return_statement               shift and go to state 160
    expression                     shift and go to state 161
    object_body                    shift and go to state 162
    binary_expression              shift and go to state 13
    unary_expression               shift and go to state 14
    value                          shift and go to state 15
    unary_operator                 shift and go to state 26

state 133

    (104) if_statement -> IF if_evaluation if_statements else_statement .

    L_PARENTHESIS   reduce using rule 104 (if_statement -> IF if_evaluation if_statements else_statement .)
    LET             reduce using rule 104 (if_statement -> IF if_evaluation if_statements else_statement .)
    TYPE            reduce using rule 104 (if_statement -> IF if_evaluation if_statements else_statement .)
    IF              reduce using rule 104 (if_statement -> IF if_evaluation if_statements else_statement .)
    NUMBER_VALUE    reduce using rule 104 (if_statement -> IF if_evaluation if_statements else_statement .)
    CHAR_VALUE      reduce using rule 104 (if_statement -> IF if_evaluation if_statements else_statement .)
    BOOL_VALUE      reduce using rule 104 (if_statement -> IF if_evaluation if_statements else_statement .)
    ID              reduce using rule 104 (if_statement -> IF if_evaluation if_statements else_statement .)
    NULL            reduce using rule 104 (if_statement -> IF if_evaluation if_statements else_statement .)
    FUNCTION        reduce using rule 104 (if_statement -> IF if_evaluation if_statements else_statement .)
    WHILE           reduce using rule 104 (if_statement -> IF if_evaluation if_statements else_statement .)
    MINUS           reduce using rule 104 (if_statement -> IF if_evaluation if_statements else_statement .)
    NOT             reduce using rule 104 (if_statement -> IF if_evaluation if_statements else_statement .)
    PLUS            reduce using rule 104 (if_statement -> IF if_evaluation if_statements else_statement .)
    $end            reduce using rule 104 (if_statement -> IF if_evaluation if_statements else_statement .)
    RETURN          reduce using rule 104 (if_statement -> IF if_evaluation if_statements else_statement .)
    R_BRACKET       reduce using rule 104 (if_statement -> IF if_evaluation if_statements else_statement .)


state 134

    (107) else_statement -> ELSE . L_BRACKET statement statement_list R_BRACKET

    L_BRACKET       shift and go to state 163


state 135

    (108) else_statement -> empty .

    L_PARENTHESIS   reduce using rule 108 (else_statement -> empty .)
    LET             reduce using rule 108 (else_statement -> empty .)
    TYPE            reduce using rule 108 (else_statement -> empty .)
    IF              reduce using rule 108 (else_statement -> empty .)
    NUMBER_VALUE    reduce using rule 108 (else_statement -> empty .)
    CHAR_VALUE      reduce using rule 108 (else_statement -> empty .)
    BOOL_VALUE      reduce using rule 108 (else_statement -> empty .)
    ID              reduce using rule 108 (else_statement -> empty .)
    NULL            reduce using rule 108 (else_statement -> empty .)
    FUNCTION        reduce using rule 108 (else_statement -> empty .)
    WHILE           reduce using rule 108 (else_statement -> empty .)
    MINUS           reduce using rule 108 (else_statement -> empty .)
    NOT             reduce using rule 108 (else_statement -> empty .)
    PLUS            reduce using rule 108 (else_statement -> empty .)
    $end            reduce using rule 108 (else_statement -> empty .)
    RETURN          reduce using rule 108 (else_statement -> empty .)
    R_BRACKET       reduce using rule 108 (else_statement -> empty .)


state 136

    (106) if_statements -> L_BRACKET statement . statement_list R_BRACKET
    (3) statement_list -> . statement statement_list
    (4) statement_list -> . empty
    (5) statement -> . expression SEMICOLON
    (6) statement -> . variable_declaration SEMICOLON
    (7) statement -> . variable_assignment SEMICOLON
    (8) statement -> . type_declaration SEMICOLON
    (9) statement -> . function_declaration
    (10) statement -> . if_statement
    (11) statement -> . while_statement
    (1) empty -> .
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . binary_expression
    (14) expression -> . unary_expression
    (15) expression -> . value
    (47) variable_declaration -> . LET ID recursive_variable_declaration
    (48) variable_declaration -> . LET ID TWO_POINTS ID recursive_variable_declaration
    (49) variable_declaration -> . LET ID TWO_POINTS type recursive_variable_declaration
    (53) variable_assignment -> . basic_var_assignment
    (54) variable_assignment -> . object_var_assignment
    (72) type_declaration -> . TYPE ID ASSIGN type_body
    (92) function_declaration -> . function_header function_body
    (104) if_statement -> . IF if_evaluation if_statements else_statement
    (109) while_statement -> . while_header while_statements
    (16) binary_expression -> . expression PLUS expression
    (17) binary_expression -> . expression MINUS expression
    (18) binary_expression -> . expression MULTIPLY expression
    (19) binary_expression -> . expression DIVIDE expression
    (20) binary_expression -> . expression AND expression
    (21) binary_expression -> . expression OR expression
    (22) binary_expression -> . expression EQUALS expression
    (23) binary_expression -> . expression GREATER_THAN expression
    (24) binary_expression -> . expression LESS_THAN expression
    (25) binary_expression -> . expression GREATER_EQUAL expression
    (26) binary_expression -> . expression LESS_EQUAL expression
    (27) unary_expression -> . unary_operator L_PARENTHESIS expression R_PARENTHESIS
    (28) unary_expression -> . unary_operator value
    (32) value -> . NUMBER_VALUE
    (33) value -> . CHAR_VALUE
    (34) value -> . BOOL_VALUE
    (35) value -> . ID
    (36) value -> . NULL
    (37) value -> . ID L_PARENTHESIS argument_list R_PARENTHESIS
    (38) value -> . ID DOT ID recursive_atribute_access
    (39) value -> . ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access
    (55) basic_var_assignment -> . ID ASSIGN expression
    (56) basic_var_assignment -> . variable_declaration ASSIGN expression
    (57) object_var_assignment -> . variable_declaration ASSIGN object_body
    (58) object_var_assignment -> . ID ASSIGN object_body
    (59) object_var_assignment -> . atribute_access ASSIGN expression
    (60) object_var_assignment -> . atribute_access ASSIGN object_body
    (93) function_header -> . FUNCTION ID L_PARENTHESIS function_params R_PARENTHESIS TWO_POINTS return_type
    (110) while_header -> . WHILE L_PARENTHESIS expression R_PARENTHESIS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . PLUS
    (43) atribute_access -> . ID recursive_atribute_access

    R_BRACKET       reduce using rule 1 (empty -> .)
    L_PARENTHESIS   shift and go to state 12
    LET             shift and go to state 16
    TYPE            shift and go to state 20
    IF              shift and go to state 22
    NUMBER_VALUE    shift and go to state 27
    CHAR_VALUE      shift and go to state 28
    BOOL_VALUE      shift and go to state 29
    ID              shift and go to state 17
    NULL            shift and go to state 30
    FUNCTION        shift and go to state 32
    WHILE           shift and go to state 33
    MINUS           shift and go to state 25
    NOT             shift and go to state 34
    PLUS            shift and go to state 24

    statement                      shift and go to state 3
    statement_list                 shift and go to state 164
    empty                          shift and go to state 4
    expression                     shift and go to state 5
    variable_declaration           shift and go to state 6
    variable_assignment            shift and go to state 7
    type_declaration               shift and go to state 8
    function_declaration           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    binary_expression              shift and go to state 13
    unary_expression               shift and go to state 14
    value                          shift and go to state 15
    basic_var_assignment           shift and go to state 18
    object_var_assignment          shift and go to state 19
    function_header                shift and go to state 21
    while_header                   shift and go to state 23
    unary_operator                 shift and go to state 26
    atribute_access                shift and go to state 31

state 137

    (105) if_evaluation -> L_PARENTHESIS expression R_PARENTHESIS .

    L_BRACKET       reduce using rule 105 (if_evaluation -> L_PARENTHESIS expression R_PARENTHESIS .)


state 138

    (111) while_statements -> L_BRACKET statement statement_list . R_BRACKET

    R_BRACKET       shift and go to state 165


state 139

    (27) unary_expression -> unary_operator L_PARENTHESIS expression R_PARENTHESIS .

    SEMICOLON       reduce using rule 27 (unary_expression -> unary_operator L_PARENTHESIS expression R_PARENTHESIS .)
    PLUS            reduce using rule 27 (unary_expression -> unary_operator L_PARENTHESIS expression R_PARENTHESIS .)
    MINUS           reduce using rule 27 (unary_expression -> unary_operator L_PARENTHESIS expression R_PARENTHESIS .)
    MULTIPLY        reduce using rule 27 (unary_expression -> unary_operator L_PARENTHESIS expression R_PARENTHESIS .)
    DIVIDE          reduce using rule 27 (unary_expression -> unary_operator L_PARENTHESIS expression R_PARENTHESIS .)
    AND             reduce using rule 27 (unary_expression -> unary_operator L_PARENTHESIS expression R_PARENTHESIS .)
    OR              reduce using rule 27 (unary_expression -> unary_operator L_PARENTHESIS expression R_PARENTHESIS .)
    EQUALS          reduce using rule 27 (unary_expression -> unary_operator L_PARENTHESIS expression R_PARENTHESIS .)
    GREATER_THAN    reduce using rule 27 (unary_expression -> unary_operator L_PARENTHESIS expression R_PARENTHESIS .)
    LESS_THAN       reduce using rule 27 (unary_expression -> unary_operator L_PARENTHESIS expression R_PARENTHESIS .)
    GREATER_EQUAL   reduce using rule 27 (unary_expression -> unary_operator L_PARENTHESIS expression R_PARENTHESIS .)
    LESS_EQUAL      reduce using rule 27 (unary_expression -> unary_operator L_PARENTHESIS expression R_PARENTHESIS .)
    R_PARENTHESIS   reduce using rule 27 (unary_expression -> unary_operator L_PARENTHESIS expression R_PARENTHESIS .)
    COMMA           reduce using rule 27 (unary_expression -> unary_operator L_PARENTHESIS expression R_PARENTHESIS .)
    R_BRACKET       reduce using rule 27 (unary_expression -> unary_operator L_PARENTHESIS expression R_PARENTHESIS .)


state 140

    (95) function_params -> ID . TWO_POINTS type COMMA function_params
    (96) function_params -> ID . TWO_POINTS type
    (97) function_params -> ID . TWO_POINTS ID COMMA function_params
    (98) function_params -> ID . TWO_POINTS ID

    TWO_POINTS      shift and go to state 166


state 141

    (93) function_header -> FUNCTION ID L_PARENTHESIS function_params . R_PARENTHESIS TWO_POINTS return_type

    R_PARENTHESIS   shift and go to state 167


state 142

    (99) function_params -> empty .

    R_PARENTHESIS   reduce using rule 99 (function_params -> empty .)


state 143

    (110) while_header -> WHILE L_PARENTHESIS expression R_PARENTHESIS .

    L_BRACKET       reduce using rule 110 (while_header -> WHILE L_PARENTHESIS expression R_PARENTHESIS .)


state 144

    (61) object_body -> L_BRACKET object_body_content R_BRACKET .

    SEMICOLON       reduce using rule 61 (object_body -> L_BRACKET object_body_content R_BRACKET .)
    COMMA           reduce using rule 61 (object_body -> L_BRACKET object_body_content R_BRACKET .)
    R_BRACKET       reduce using rule 61 (object_body -> L_BRACKET object_body_content R_BRACKET .)


state 145

    (62) object_body_content -> ID TWO_POINTS . expression recursive_obejct_body_content
    (64) object_body_content -> ID TWO_POINTS . object_body recursive_obejct_body_content
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . binary_expression
    (14) expression -> . unary_expression
    (15) expression -> . value
    (61) object_body -> . L_BRACKET object_body_content R_BRACKET
    (16) binary_expression -> . expression PLUS expression
    (17) binary_expression -> . expression MINUS expression
    (18) binary_expression -> . expression MULTIPLY expression
    (19) binary_expression -> . expression DIVIDE expression
    (20) binary_expression -> . expression AND expression
    (21) binary_expression -> . expression OR expression
    (22) binary_expression -> . expression EQUALS expression
    (23) binary_expression -> . expression GREATER_THAN expression
    (24) binary_expression -> . expression LESS_THAN expression
    (25) binary_expression -> . expression GREATER_EQUAL expression
    (26) binary_expression -> . expression LESS_EQUAL expression
    (27) unary_expression -> . unary_operator L_PARENTHESIS expression R_PARENTHESIS
    (28) unary_expression -> . unary_operator value
    (32) value -> . NUMBER_VALUE
    (33) value -> . CHAR_VALUE
    (34) value -> . BOOL_VALUE
    (35) value -> . ID
    (36) value -> . NULL
    (37) value -> . ID L_PARENTHESIS argument_list R_PARENTHESIS
    (38) value -> . ID DOT ID recursive_atribute_access
    (39) value -> . ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . PLUS

    L_PARENTHESIS   shift and go to state 12
    L_BRACKET       shift and go to state 86
    NUMBER_VALUE    shift and go to state 27
    CHAR_VALUE      shift and go to state 28
    BOOL_VALUE      shift and go to state 29
    ID              shift and go to state 53
    NULL            shift and go to state 30
    MINUS           shift and go to state 25
    NOT             shift and go to state 34
    PLUS            shift and go to state 24

    expression                     shift and go to state 168
    object_body                    shift and go to state 169
    binary_expression              shift and go to state 13
    unary_expression               shift and go to state 14
    value                          shift and go to state 15
    unary_operator                 shift and go to state 26

state 146

    (63) object_body_content -> QUOTED_ID TWO_POINTS . expression recursive_obejct_body_content
    (65) object_body_content -> QUOTED_ID TWO_POINTS . object_body recursive_obejct_body_content
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . binary_expression
    (14) expression -> . unary_expression
    (15) expression -> . value
    (61) object_body -> . L_BRACKET object_body_content R_BRACKET
    (16) binary_expression -> . expression PLUS expression
    (17) binary_expression -> . expression MINUS expression
    (18) binary_expression -> . expression MULTIPLY expression
    (19) binary_expression -> . expression DIVIDE expression
    (20) binary_expression -> . expression AND expression
    (21) binary_expression -> . expression OR expression
    (22) binary_expression -> . expression EQUALS expression
    (23) binary_expression -> . expression GREATER_THAN expression
    (24) binary_expression -> . expression LESS_THAN expression
    (25) binary_expression -> . expression GREATER_EQUAL expression
    (26) binary_expression -> . expression LESS_EQUAL expression
    (27) unary_expression -> . unary_operator L_PARENTHESIS expression R_PARENTHESIS
    (28) unary_expression -> . unary_operator value
    (32) value -> . NUMBER_VALUE
    (33) value -> . CHAR_VALUE
    (34) value -> . BOOL_VALUE
    (35) value -> . ID
    (36) value -> . NULL
    (37) value -> . ID L_PARENTHESIS argument_list R_PARENTHESIS
    (38) value -> . ID DOT ID recursive_atribute_access
    (39) value -> . ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . PLUS

    L_PARENTHESIS   shift and go to state 12
    L_BRACKET       shift and go to state 86
    NUMBER_VALUE    shift and go to state 27
    CHAR_VALUE      shift and go to state 28
    BOOL_VALUE      shift and go to state 29
    ID              shift and go to state 53
    NULL            shift and go to state 30
    MINUS           shift and go to state 25
    NOT             shift and go to state 34
    PLUS            shift and go to state 24

    expression                     shift and go to state 170
    object_body                    shift and go to state 171
    binary_expression              shift and go to state 13
    unary_expression               shift and go to state 14
    value                          shift and go to state 15
    unary_operator                 shift and go to state 26

state 147

    (38) value -> ID DOT ID recursive_atribute_access .

    R_PARENTHESIS   reduce using rule 38 (value -> ID DOT ID recursive_atribute_access .)
    PLUS            reduce using rule 38 (value -> ID DOT ID recursive_atribute_access .)
    MINUS           reduce using rule 38 (value -> ID DOT ID recursive_atribute_access .)
    MULTIPLY        reduce using rule 38 (value -> ID DOT ID recursive_atribute_access .)
    DIVIDE          reduce using rule 38 (value -> ID DOT ID recursive_atribute_access .)
    AND             reduce using rule 38 (value -> ID DOT ID recursive_atribute_access .)
    OR              reduce using rule 38 (value -> ID DOT ID recursive_atribute_access .)
    EQUALS          reduce using rule 38 (value -> ID DOT ID recursive_atribute_access .)
    GREATER_THAN    reduce using rule 38 (value -> ID DOT ID recursive_atribute_access .)
    LESS_THAN       reduce using rule 38 (value -> ID DOT ID recursive_atribute_access .)
    GREATER_EQUAL   reduce using rule 38 (value -> ID DOT ID recursive_atribute_access .)
    LESS_EQUAL      reduce using rule 38 (value -> ID DOT ID recursive_atribute_access .)
    SEMICOLON       reduce using rule 38 (value -> ID DOT ID recursive_atribute_access .)
    COMMA           reduce using rule 38 (value -> ID DOT ID recursive_atribute_access .)
    R_BRACKET       reduce using rule 38 (value -> ID DOT ID recursive_atribute_access .)


state 148

    (39) value -> ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET . recursive_atribute_access
    (44) recursive_atribute_access -> . DOT ID recursive_atribute_access
    (45) recursive_atribute_access -> . L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access
    (46) recursive_atribute_access -> . empty
    (1) empty -> .

    DOT             shift and go to state 126
    L_SQ_BRACKET    shift and go to state 128
    R_PARENTHESIS   reduce using rule 1 (empty -> .)
    PLUS            reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    MULTIPLY        reduce using rule 1 (empty -> .)
    DIVIDE          reduce using rule 1 (empty -> .)
    AND             reduce using rule 1 (empty -> .)
    OR              reduce using rule 1 (empty -> .)
    EQUALS          reduce using rule 1 (empty -> .)
    GREATER_THAN    reduce using rule 1 (empty -> .)
    LESS_THAN       reduce using rule 1 (empty -> .)
    GREATER_EQUAL   reduce using rule 1 (empty -> .)
    LESS_EQUAL      reduce using rule 1 (empty -> .)
    SEMICOLON       reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)
    R_BRACKET       reduce using rule 1 (empty -> .)

    recursive_atribute_access      shift and go to state 172
    empty                          shift and go to state 60

state 149

    (48) variable_declaration -> LET ID TWO_POINTS ID recursive_variable_declaration .

    SEMICOLON       reduce using rule 48 (variable_declaration -> LET ID TWO_POINTS ID recursive_variable_declaration .)
    ASSIGN          reduce using rule 48 (variable_declaration -> LET ID TWO_POINTS ID recursive_variable_declaration .)


state 150

    (49) variable_declaration -> LET ID TWO_POINTS type recursive_variable_declaration .

    SEMICOLON       reduce using rule 49 (variable_declaration -> LET ID TWO_POINTS type recursive_variable_declaration .)
    ASSIGN          reduce using rule 49 (variable_declaration -> LET ID TWO_POINTS type recursive_variable_declaration .)


state 151

    (50) recursive_variable_declaration -> COMMA ID recursive_variable_declaration .

    SEMICOLON       reduce using rule 50 (recursive_variable_declaration -> COMMA ID recursive_variable_declaration .)
    ASSIGN          reduce using rule 50 (recursive_variable_declaration -> COMMA ID recursive_variable_declaration .)


state 152

    (51) recursive_variable_declaration -> COMMA ID TWO_POINTS . ID recursive_variable_declaration

    ID              shift and go to state 173


state 153

    (41) argument_list -> expression COMMA argument_list .

    R_PARENTHESIS   reduce using rule 41 (argument_list -> expression COMMA argument_list .)


state 154

    (44) recursive_atribute_access -> DOT ID . recursive_atribute_access
    (44) recursive_atribute_access -> . DOT ID recursive_atribute_access
    (45) recursive_atribute_access -> . L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access
    (46) recursive_atribute_access -> . empty
    (1) empty -> .

    DOT             shift and go to state 126
    L_SQ_BRACKET    shift and go to state 128
    SEMICOLON       reduce using rule 1 (empty -> .)
    PLUS            reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    MULTIPLY        reduce using rule 1 (empty -> .)
    DIVIDE          reduce using rule 1 (empty -> .)
    AND             reduce using rule 1 (empty -> .)
    OR              reduce using rule 1 (empty -> .)
    EQUALS          reduce using rule 1 (empty -> .)
    GREATER_THAN    reduce using rule 1 (empty -> .)
    LESS_THAN       reduce using rule 1 (empty -> .)
    GREATER_EQUAL   reduce using rule 1 (empty -> .)
    LESS_EQUAL      reduce using rule 1 (empty -> .)
    ASSIGN          reduce using rule 1 (empty -> .)
    R_PARENTHESIS   reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)
    R_BRACKET       reduce using rule 1 (empty -> .)

    recursive_atribute_access      shift and go to state 174
    empty                          shift and go to state 60

state 155

    (45) recursive_atribute_access -> L_SQ_BRACKET QUOTED_ID . R_SQ_BRACKET recursive_atribute_access

    R_SQ_BRACKET    shift and go to state 175


state 156

    (39) value -> ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access .
    (45) recursive_atribute_access -> L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access .

    SEMICOLON       reduce using rule 39 (value -> ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access .)
    PLUS            reduce using rule 39 (value -> ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access .)
    MINUS           reduce using rule 39 (value -> ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access .)
    MULTIPLY        reduce using rule 39 (value -> ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access .)
    DIVIDE          reduce using rule 39 (value -> ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access .)
    AND             reduce using rule 39 (value -> ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access .)
    OR              reduce using rule 39 (value -> ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access .)
    EQUALS          reduce using rule 39 (value -> ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access .)
    GREATER_THAN    reduce using rule 39 (value -> ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access .)
    LESS_THAN       reduce using rule 39 (value -> ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access .)
    GREATER_EQUAL   reduce using rule 39 (value -> ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access .)
    LESS_EQUAL      reduce using rule 39 (value -> ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access .)
    ASSIGN          reduce using rule 45 (recursive_atribute_access -> L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access .)


state 157

    (73) type_body -> L_BRACKET type_body_content . R_BRACKET

    R_BRACKET       shift and go to state 176


state 158

    (74) type_body_content -> ID . TWO_POINTS type type_body_content_recursive
    (76) type_body_content -> ID . TWO_POINTS ID type_body_content_recursive
    (78) type_body_content -> ID . TWO_POINTS type_body type_body_content_recursive

    TWO_POINTS      shift and go to state 177


state 159

    (75) type_body_content -> QUOTED_ID . TWO_POINTS type type_body_content_recursive
    (77) type_body_content -> QUOTED_ID . TWO_POINTS ID type_body_content_recursive
    (79) type_body_content -> QUOTED_ID . TWO_POINTS type_body type_body_content_recursive

    TWO_POINTS      shift and go to state 178


state 160

    (94) function_body -> L_BRACKET statement_list RETURN return_statement . R_BRACKET

    R_BRACKET       shift and go to state 179


state 161

    (102) return_statement -> expression . SEMICOLON
    (16) binary_expression -> expression . PLUS expression
    (17) binary_expression -> expression . MINUS expression
    (18) binary_expression -> expression . MULTIPLY expression
    (19) binary_expression -> expression . DIVIDE expression
    (20) binary_expression -> expression . AND expression
    (21) binary_expression -> expression . OR expression
    (22) binary_expression -> expression . EQUALS expression
    (23) binary_expression -> expression . GREATER_THAN expression
    (24) binary_expression -> expression . LESS_THAN expression
    (25) binary_expression -> expression . GREATER_EQUAL expression
    (26) binary_expression -> expression . LESS_EQUAL expression

    SEMICOLON       shift and go to state 180
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    EQUALS          shift and go to state 43
    GREATER_THAN    shift and go to state 44
    LESS_THAN       shift and go to state 45
    GREATER_EQUAL   shift and go to state 46
    LESS_EQUAL      shift and go to state 47


state 162

    (103) return_statement -> object_body . SEMICOLON

    SEMICOLON       shift and go to state 181


state 163

    (107) else_statement -> ELSE L_BRACKET . statement statement_list R_BRACKET
    (5) statement -> . expression SEMICOLON
    (6) statement -> . variable_declaration SEMICOLON
    (7) statement -> . variable_assignment SEMICOLON
    (8) statement -> . type_declaration SEMICOLON
    (9) statement -> . function_declaration
    (10) statement -> . if_statement
    (11) statement -> . while_statement
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . binary_expression
    (14) expression -> . unary_expression
    (15) expression -> . value
    (47) variable_declaration -> . LET ID recursive_variable_declaration
    (48) variable_declaration -> . LET ID TWO_POINTS ID recursive_variable_declaration
    (49) variable_declaration -> . LET ID TWO_POINTS type recursive_variable_declaration
    (53) variable_assignment -> . basic_var_assignment
    (54) variable_assignment -> . object_var_assignment
    (72) type_declaration -> . TYPE ID ASSIGN type_body
    (92) function_declaration -> . function_header function_body
    (104) if_statement -> . IF if_evaluation if_statements else_statement
    (109) while_statement -> . while_header while_statements
    (16) binary_expression -> . expression PLUS expression
    (17) binary_expression -> . expression MINUS expression
    (18) binary_expression -> . expression MULTIPLY expression
    (19) binary_expression -> . expression DIVIDE expression
    (20) binary_expression -> . expression AND expression
    (21) binary_expression -> . expression OR expression
    (22) binary_expression -> . expression EQUALS expression
    (23) binary_expression -> . expression GREATER_THAN expression
    (24) binary_expression -> . expression LESS_THAN expression
    (25) binary_expression -> . expression GREATER_EQUAL expression
    (26) binary_expression -> . expression LESS_EQUAL expression
    (27) unary_expression -> . unary_operator L_PARENTHESIS expression R_PARENTHESIS
    (28) unary_expression -> . unary_operator value
    (32) value -> . NUMBER_VALUE
    (33) value -> . CHAR_VALUE
    (34) value -> . BOOL_VALUE
    (35) value -> . ID
    (36) value -> . NULL
    (37) value -> . ID L_PARENTHESIS argument_list R_PARENTHESIS
    (38) value -> . ID DOT ID recursive_atribute_access
    (39) value -> . ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access
    (55) basic_var_assignment -> . ID ASSIGN expression
    (56) basic_var_assignment -> . variable_declaration ASSIGN expression
    (57) object_var_assignment -> . variable_declaration ASSIGN object_body
    (58) object_var_assignment -> . ID ASSIGN object_body
    (59) object_var_assignment -> . atribute_access ASSIGN expression
    (60) object_var_assignment -> . atribute_access ASSIGN object_body
    (93) function_header -> . FUNCTION ID L_PARENTHESIS function_params R_PARENTHESIS TWO_POINTS return_type
    (110) while_header -> . WHILE L_PARENTHESIS expression R_PARENTHESIS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . PLUS
    (43) atribute_access -> . ID recursive_atribute_access

    L_PARENTHESIS   shift and go to state 12
    LET             shift and go to state 16
    TYPE            shift and go to state 20
    IF              shift and go to state 22
    NUMBER_VALUE    shift and go to state 27
    CHAR_VALUE      shift and go to state 28
    BOOL_VALUE      shift and go to state 29
    ID              shift and go to state 17
    NULL            shift and go to state 30
    FUNCTION        shift and go to state 32
    WHILE           shift and go to state 33
    MINUS           shift and go to state 25
    NOT             shift and go to state 34
    PLUS            shift and go to state 24

    statement                      shift and go to state 182
    expression                     shift and go to state 5
    variable_declaration           shift and go to state 6
    variable_assignment            shift and go to state 7
    type_declaration               shift and go to state 8
    function_declaration           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    binary_expression              shift and go to state 13
    unary_expression               shift and go to state 14
    value                          shift and go to state 15
    basic_var_assignment           shift and go to state 18
    object_var_assignment          shift and go to state 19
    function_header                shift and go to state 21
    while_header                   shift and go to state 23
    unary_operator                 shift and go to state 26
    atribute_access                shift and go to state 31

state 164

    (106) if_statements -> L_BRACKET statement statement_list . R_BRACKET

    R_BRACKET       shift and go to state 183


state 165

    (111) while_statements -> L_BRACKET statement statement_list R_BRACKET .

    L_PARENTHESIS   reduce using rule 111 (while_statements -> L_BRACKET statement statement_list R_BRACKET .)
    LET             reduce using rule 111 (while_statements -> L_BRACKET statement statement_list R_BRACKET .)
    TYPE            reduce using rule 111 (while_statements -> L_BRACKET statement statement_list R_BRACKET .)
    IF              reduce using rule 111 (while_statements -> L_BRACKET statement statement_list R_BRACKET .)
    NUMBER_VALUE    reduce using rule 111 (while_statements -> L_BRACKET statement statement_list R_BRACKET .)
    CHAR_VALUE      reduce using rule 111 (while_statements -> L_BRACKET statement statement_list R_BRACKET .)
    BOOL_VALUE      reduce using rule 111 (while_statements -> L_BRACKET statement statement_list R_BRACKET .)
    ID              reduce using rule 111 (while_statements -> L_BRACKET statement statement_list R_BRACKET .)
    NULL            reduce using rule 111 (while_statements -> L_BRACKET statement statement_list R_BRACKET .)
    FUNCTION        reduce using rule 111 (while_statements -> L_BRACKET statement statement_list R_BRACKET .)
    WHILE           reduce using rule 111 (while_statements -> L_BRACKET statement statement_list R_BRACKET .)
    MINUS           reduce using rule 111 (while_statements -> L_BRACKET statement statement_list R_BRACKET .)
    NOT             reduce using rule 111 (while_statements -> L_BRACKET statement statement_list R_BRACKET .)
    PLUS            reduce using rule 111 (while_statements -> L_BRACKET statement statement_list R_BRACKET .)
    $end            reduce using rule 111 (while_statements -> L_BRACKET statement statement_list R_BRACKET .)
    RETURN          reduce using rule 111 (while_statements -> L_BRACKET statement statement_list R_BRACKET .)
    R_BRACKET       reduce using rule 111 (while_statements -> L_BRACKET statement statement_list R_BRACKET .)


state 166

    (95) function_params -> ID TWO_POINTS . type COMMA function_params
    (96) function_params -> ID TWO_POINTS . type
    (97) function_params -> ID TWO_POINTS . ID COMMA function_params
    (98) function_params -> ID TWO_POINTS . ID
    (88) type -> . INT
    (89) type -> . FLOAT
    (90) type -> . CHARACTER
    (91) type -> . BOOLEAN

    ID              shift and go to state 184
    INT             shift and go to state 119
    FLOAT           shift and go to state 120
    CHARACTER       shift and go to state 121
    BOOLEAN         shift and go to state 122

    type                           shift and go to state 185

state 167

    (93) function_header -> FUNCTION ID L_PARENTHESIS function_params R_PARENTHESIS . TWO_POINTS return_type

    TWO_POINTS      shift and go to state 186


state 168

    (62) object_body_content -> ID TWO_POINTS expression . recursive_obejct_body_content
    (16) binary_expression -> expression . PLUS expression
    (17) binary_expression -> expression . MINUS expression
    (18) binary_expression -> expression . MULTIPLY expression
    (19) binary_expression -> expression . DIVIDE expression
    (20) binary_expression -> expression . AND expression
    (21) binary_expression -> expression . OR expression
    (22) binary_expression -> expression . EQUALS expression
    (23) binary_expression -> expression . GREATER_THAN expression
    (24) binary_expression -> expression . LESS_THAN expression
    (25) binary_expression -> expression . GREATER_EQUAL expression
    (26) binary_expression -> expression . LESS_EQUAL expression
    (66) recursive_obejct_body_content -> . COMMA ID TWO_POINTS expression recursive_obejct_body_content
    (67) recursive_obejct_body_content -> . COMMA QUOTED_ID TWO_POINTS expression recursive_obejct_body_content
    (68) recursive_obejct_body_content -> . COMMA ID TWO_POINTS object_body recursive_obejct_body_content
    (69) recursive_obejct_body_content -> . COMMA QUOTED_ID TWO_POINTS object_body recursive_obejct_body_content
    (70) recursive_obejct_body_content -> . empty
    (71) recursive_obejct_body_content -> . COMMA empty
    (1) empty -> .

    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    EQUALS          shift and go to state 43
    GREATER_THAN    shift and go to state 44
    LESS_THAN       shift and go to state 45
    GREATER_EQUAL   shift and go to state 46
    LESS_EQUAL      shift and go to state 47
    COMMA           shift and go to state 188
    R_BRACKET       reduce using rule 1 (empty -> .)

    recursive_obejct_body_content  shift and go to state 187
    empty                          shift and go to state 189

state 169

    (64) object_body_content -> ID TWO_POINTS object_body . recursive_obejct_body_content
    (66) recursive_obejct_body_content -> . COMMA ID TWO_POINTS expression recursive_obejct_body_content
    (67) recursive_obejct_body_content -> . COMMA QUOTED_ID TWO_POINTS expression recursive_obejct_body_content
    (68) recursive_obejct_body_content -> . COMMA ID TWO_POINTS object_body recursive_obejct_body_content
    (69) recursive_obejct_body_content -> . COMMA QUOTED_ID TWO_POINTS object_body recursive_obejct_body_content
    (70) recursive_obejct_body_content -> . empty
    (71) recursive_obejct_body_content -> . COMMA empty
    (1) empty -> .

    COMMA           shift and go to state 188
    R_BRACKET       reduce using rule 1 (empty -> .)

    recursive_obejct_body_content  shift and go to state 190
    empty                          shift and go to state 189

state 170

    (63) object_body_content -> QUOTED_ID TWO_POINTS expression . recursive_obejct_body_content
    (16) binary_expression -> expression . PLUS expression
    (17) binary_expression -> expression . MINUS expression
    (18) binary_expression -> expression . MULTIPLY expression
    (19) binary_expression -> expression . DIVIDE expression
    (20) binary_expression -> expression . AND expression
    (21) binary_expression -> expression . OR expression
    (22) binary_expression -> expression . EQUALS expression
    (23) binary_expression -> expression . GREATER_THAN expression
    (24) binary_expression -> expression . LESS_THAN expression
    (25) binary_expression -> expression . GREATER_EQUAL expression
    (26) binary_expression -> expression . LESS_EQUAL expression
    (66) recursive_obejct_body_content -> . COMMA ID TWO_POINTS expression recursive_obejct_body_content
    (67) recursive_obejct_body_content -> . COMMA QUOTED_ID TWO_POINTS expression recursive_obejct_body_content
    (68) recursive_obejct_body_content -> . COMMA ID TWO_POINTS object_body recursive_obejct_body_content
    (69) recursive_obejct_body_content -> . COMMA QUOTED_ID TWO_POINTS object_body recursive_obejct_body_content
    (70) recursive_obejct_body_content -> . empty
    (71) recursive_obejct_body_content -> . COMMA empty
    (1) empty -> .

    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    EQUALS          shift and go to state 43
    GREATER_THAN    shift and go to state 44
    LESS_THAN       shift and go to state 45
    GREATER_EQUAL   shift and go to state 46
    LESS_EQUAL      shift and go to state 47
    COMMA           shift and go to state 188
    R_BRACKET       reduce using rule 1 (empty -> .)

    recursive_obejct_body_content  shift and go to state 191
    empty                          shift and go to state 189

state 171

    (65) object_body_content -> QUOTED_ID TWO_POINTS object_body . recursive_obejct_body_content
    (66) recursive_obejct_body_content -> . COMMA ID TWO_POINTS expression recursive_obejct_body_content
    (67) recursive_obejct_body_content -> . COMMA QUOTED_ID TWO_POINTS expression recursive_obejct_body_content
    (68) recursive_obejct_body_content -> . COMMA ID TWO_POINTS object_body recursive_obejct_body_content
    (69) recursive_obejct_body_content -> . COMMA QUOTED_ID TWO_POINTS object_body recursive_obejct_body_content
    (70) recursive_obejct_body_content -> . empty
    (71) recursive_obejct_body_content -> . COMMA empty
    (1) empty -> .

    COMMA           shift and go to state 188
    R_BRACKET       reduce using rule 1 (empty -> .)

    recursive_obejct_body_content  shift and go to state 192
    empty                          shift and go to state 189

state 172

    (39) value -> ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access .

    R_PARENTHESIS   reduce using rule 39 (value -> ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access .)
    PLUS            reduce using rule 39 (value -> ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access .)
    MINUS           reduce using rule 39 (value -> ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access .)
    MULTIPLY        reduce using rule 39 (value -> ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access .)
    DIVIDE          reduce using rule 39 (value -> ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access .)
    AND             reduce using rule 39 (value -> ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access .)
    OR              reduce using rule 39 (value -> ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access .)
    EQUALS          reduce using rule 39 (value -> ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access .)
    GREATER_THAN    reduce using rule 39 (value -> ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access .)
    LESS_THAN       reduce using rule 39 (value -> ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access .)
    GREATER_EQUAL   reduce using rule 39 (value -> ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access .)
    LESS_EQUAL      reduce using rule 39 (value -> ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access .)
    SEMICOLON       reduce using rule 39 (value -> ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access .)
    COMMA           reduce using rule 39 (value -> ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access .)
    R_BRACKET       reduce using rule 39 (value -> ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access .)


state 173

    (51) recursive_variable_declaration -> COMMA ID TWO_POINTS ID . recursive_variable_declaration
    (50) recursive_variable_declaration -> . COMMA ID recursive_variable_declaration
    (51) recursive_variable_declaration -> . COMMA ID TWO_POINTS ID recursive_variable_declaration
    (52) recursive_variable_declaration -> . empty
    (1) empty -> .

    COMMA           shift and go to state 92
    SEMICOLON       reduce using rule 1 (empty -> .)
    ASSIGN          reduce using rule 1 (empty -> .)

    recursive_variable_declaration shift and go to state 193
    empty                          shift and go to state 93

state 174

    (44) recursive_atribute_access -> DOT ID recursive_atribute_access .

    SEMICOLON       reduce using rule 44 (recursive_atribute_access -> DOT ID recursive_atribute_access .)
    PLUS            reduce using rule 44 (recursive_atribute_access -> DOT ID recursive_atribute_access .)
    MINUS           reduce using rule 44 (recursive_atribute_access -> DOT ID recursive_atribute_access .)
    MULTIPLY        reduce using rule 44 (recursive_atribute_access -> DOT ID recursive_atribute_access .)
    DIVIDE          reduce using rule 44 (recursive_atribute_access -> DOT ID recursive_atribute_access .)
    AND             reduce using rule 44 (recursive_atribute_access -> DOT ID recursive_atribute_access .)
    OR              reduce using rule 44 (recursive_atribute_access -> DOT ID recursive_atribute_access .)
    EQUALS          reduce using rule 44 (recursive_atribute_access -> DOT ID recursive_atribute_access .)
    GREATER_THAN    reduce using rule 44 (recursive_atribute_access -> DOT ID recursive_atribute_access .)
    LESS_THAN       reduce using rule 44 (recursive_atribute_access -> DOT ID recursive_atribute_access .)
    GREATER_EQUAL   reduce using rule 44 (recursive_atribute_access -> DOT ID recursive_atribute_access .)
    LESS_EQUAL      reduce using rule 44 (recursive_atribute_access -> DOT ID recursive_atribute_access .)
    ASSIGN          reduce using rule 44 (recursive_atribute_access -> DOT ID recursive_atribute_access .)
    R_PARENTHESIS   reduce using rule 44 (recursive_atribute_access -> DOT ID recursive_atribute_access .)
    COMMA           reduce using rule 44 (recursive_atribute_access -> DOT ID recursive_atribute_access .)
    R_BRACKET       reduce using rule 44 (recursive_atribute_access -> DOT ID recursive_atribute_access .)


state 175

    (45) recursive_atribute_access -> L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET . recursive_atribute_access
    (44) recursive_atribute_access -> . DOT ID recursive_atribute_access
    (45) recursive_atribute_access -> . L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access
    (46) recursive_atribute_access -> . empty
    (1) empty -> .

    DOT             shift and go to state 126
    L_SQ_BRACKET    shift and go to state 128
    SEMICOLON       reduce using rule 1 (empty -> .)
    PLUS            reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    MULTIPLY        reduce using rule 1 (empty -> .)
    DIVIDE          reduce using rule 1 (empty -> .)
    AND             reduce using rule 1 (empty -> .)
    OR              reduce using rule 1 (empty -> .)
    EQUALS          reduce using rule 1 (empty -> .)
    GREATER_THAN    reduce using rule 1 (empty -> .)
    LESS_THAN       reduce using rule 1 (empty -> .)
    GREATER_EQUAL   reduce using rule 1 (empty -> .)
    LESS_EQUAL      reduce using rule 1 (empty -> .)
    ASSIGN          reduce using rule 1 (empty -> .)
    R_PARENTHESIS   reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)
    R_BRACKET       reduce using rule 1 (empty -> .)

    recursive_atribute_access      shift and go to state 194
    empty                          shift and go to state 60

state 176

    (73) type_body -> L_BRACKET type_body_content R_BRACKET .

    SEMICOLON       reduce using rule 73 (type_body -> L_BRACKET type_body_content R_BRACKET .)
    COMMA           reduce using rule 73 (type_body -> L_BRACKET type_body_content R_BRACKET .)
    R_BRACKET       reduce using rule 73 (type_body -> L_BRACKET type_body_content R_BRACKET .)


state 177

    (74) type_body_content -> ID TWO_POINTS . type type_body_content_recursive
    (76) type_body_content -> ID TWO_POINTS . ID type_body_content_recursive
    (78) type_body_content -> ID TWO_POINTS . type_body type_body_content_recursive
    (88) type -> . INT
    (89) type -> . FLOAT
    (90) type -> . CHARACTER
    (91) type -> . BOOLEAN
    (73) type_body -> . L_BRACKET type_body_content R_BRACKET

    ID              shift and go to state 195
    INT             shift and go to state 119
    FLOAT           shift and go to state 120
    CHARACTER       shift and go to state 121
    BOOLEAN         shift and go to state 122
    L_BRACKET       shift and go to state 131

    type                           shift and go to state 196
    type_body                      shift and go to state 197

state 178

    (75) type_body_content -> QUOTED_ID TWO_POINTS . type type_body_content_recursive
    (77) type_body_content -> QUOTED_ID TWO_POINTS . ID type_body_content_recursive
    (79) type_body_content -> QUOTED_ID TWO_POINTS . type_body type_body_content_recursive
    (88) type -> . INT
    (89) type -> . FLOAT
    (90) type -> . CHARACTER
    (91) type -> . BOOLEAN
    (73) type_body -> . L_BRACKET type_body_content R_BRACKET

    ID              shift and go to state 199
    INT             shift and go to state 119
    FLOAT           shift and go to state 120
    CHARACTER       shift and go to state 121
    BOOLEAN         shift and go to state 122
    L_BRACKET       shift and go to state 131

    type                           shift and go to state 198
    type_body                      shift and go to state 200

state 179

    (94) function_body -> L_BRACKET statement_list RETURN return_statement R_BRACKET .

    L_PARENTHESIS   reduce using rule 94 (function_body -> L_BRACKET statement_list RETURN return_statement R_BRACKET .)
    LET             reduce using rule 94 (function_body -> L_BRACKET statement_list RETURN return_statement R_BRACKET .)
    TYPE            reduce using rule 94 (function_body -> L_BRACKET statement_list RETURN return_statement R_BRACKET .)
    IF              reduce using rule 94 (function_body -> L_BRACKET statement_list RETURN return_statement R_BRACKET .)
    NUMBER_VALUE    reduce using rule 94 (function_body -> L_BRACKET statement_list RETURN return_statement R_BRACKET .)
    CHAR_VALUE      reduce using rule 94 (function_body -> L_BRACKET statement_list RETURN return_statement R_BRACKET .)
    BOOL_VALUE      reduce using rule 94 (function_body -> L_BRACKET statement_list RETURN return_statement R_BRACKET .)
    ID              reduce using rule 94 (function_body -> L_BRACKET statement_list RETURN return_statement R_BRACKET .)
    NULL            reduce using rule 94 (function_body -> L_BRACKET statement_list RETURN return_statement R_BRACKET .)
    FUNCTION        reduce using rule 94 (function_body -> L_BRACKET statement_list RETURN return_statement R_BRACKET .)
    WHILE           reduce using rule 94 (function_body -> L_BRACKET statement_list RETURN return_statement R_BRACKET .)
    MINUS           reduce using rule 94 (function_body -> L_BRACKET statement_list RETURN return_statement R_BRACKET .)
    NOT             reduce using rule 94 (function_body -> L_BRACKET statement_list RETURN return_statement R_BRACKET .)
    PLUS            reduce using rule 94 (function_body -> L_BRACKET statement_list RETURN return_statement R_BRACKET .)
    $end            reduce using rule 94 (function_body -> L_BRACKET statement_list RETURN return_statement R_BRACKET .)
    RETURN          reduce using rule 94 (function_body -> L_BRACKET statement_list RETURN return_statement R_BRACKET .)
    R_BRACKET       reduce using rule 94 (function_body -> L_BRACKET statement_list RETURN return_statement R_BRACKET .)


state 180

    (102) return_statement -> expression SEMICOLON .

    R_BRACKET       reduce using rule 102 (return_statement -> expression SEMICOLON .)


state 181

    (103) return_statement -> object_body SEMICOLON .

    R_BRACKET       reduce using rule 103 (return_statement -> object_body SEMICOLON .)


state 182

    (107) else_statement -> ELSE L_BRACKET statement . statement_list R_BRACKET
    (3) statement_list -> . statement statement_list
    (4) statement_list -> . empty
    (5) statement -> . expression SEMICOLON
    (6) statement -> . variable_declaration SEMICOLON
    (7) statement -> . variable_assignment SEMICOLON
    (8) statement -> . type_declaration SEMICOLON
    (9) statement -> . function_declaration
    (10) statement -> . if_statement
    (11) statement -> . while_statement
    (1) empty -> .
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . binary_expression
    (14) expression -> . unary_expression
    (15) expression -> . value
    (47) variable_declaration -> . LET ID recursive_variable_declaration
    (48) variable_declaration -> . LET ID TWO_POINTS ID recursive_variable_declaration
    (49) variable_declaration -> . LET ID TWO_POINTS type recursive_variable_declaration
    (53) variable_assignment -> . basic_var_assignment
    (54) variable_assignment -> . object_var_assignment
    (72) type_declaration -> . TYPE ID ASSIGN type_body
    (92) function_declaration -> . function_header function_body
    (104) if_statement -> . IF if_evaluation if_statements else_statement
    (109) while_statement -> . while_header while_statements
    (16) binary_expression -> . expression PLUS expression
    (17) binary_expression -> . expression MINUS expression
    (18) binary_expression -> . expression MULTIPLY expression
    (19) binary_expression -> . expression DIVIDE expression
    (20) binary_expression -> . expression AND expression
    (21) binary_expression -> . expression OR expression
    (22) binary_expression -> . expression EQUALS expression
    (23) binary_expression -> . expression GREATER_THAN expression
    (24) binary_expression -> . expression LESS_THAN expression
    (25) binary_expression -> . expression GREATER_EQUAL expression
    (26) binary_expression -> . expression LESS_EQUAL expression
    (27) unary_expression -> . unary_operator L_PARENTHESIS expression R_PARENTHESIS
    (28) unary_expression -> . unary_operator value
    (32) value -> . NUMBER_VALUE
    (33) value -> . CHAR_VALUE
    (34) value -> . BOOL_VALUE
    (35) value -> . ID
    (36) value -> . NULL
    (37) value -> . ID L_PARENTHESIS argument_list R_PARENTHESIS
    (38) value -> . ID DOT ID recursive_atribute_access
    (39) value -> . ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access
    (55) basic_var_assignment -> . ID ASSIGN expression
    (56) basic_var_assignment -> . variable_declaration ASSIGN expression
    (57) object_var_assignment -> . variable_declaration ASSIGN object_body
    (58) object_var_assignment -> . ID ASSIGN object_body
    (59) object_var_assignment -> . atribute_access ASSIGN expression
    (60) object_var_assignment -> . atribute_access ASSIGN object_body
    (93) function_header -> . FUNCTION ID L_PARENTHESIS function_params R_PARENTHESIS TWO_POINTS return_type
    (110) while_header -> . WHILE L_PARENTHESIS expression R_PARENTHESIS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . PLUS
    (43) atribute_access -> . ID recursive_atribute_access

    R_BRACKET       reduce using rule 1 (empty -> .)
    L_PARENTHESIS   shift and go to state 12
    LET             shift and go to state 16
    TYPE            shift and go to state 20
    IF              shift and go to state 22
    NUMBER_VALUE    shift and go to state 27
    CHAR_VALUE      shift and go to state 28
    BOOL_VALUE      shift and go to state 29
    ID              shift and go to state 17
    NULL            shift and go to state 30
    FUNCTION        shift and go to state 32
    WHILE           shift and go to state 33
    MINUS           shift and go to state 25
    NOT             shift and go to state 34
    PLUS            shift and go to state 24

    statement                      shift and go to state 3
    statement_list                 shift and go to state 201
    empty                          shift and go to state 4
    expression                     shift and go to state 5
    variable_declaration           shift and go to state 6
    variable_assignment            shift and go to state 7
    type_declaration               shift and go to state 8
    function_declaration           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    binary_expression              shift and go to state 13
    unary_expression               shift and go to state 14
    value                          shift and go to state 15
    basic_var_assignment           shift and go to state 18
    object_var_assignment          shift and go to state 19
    function_header                shift and go to state 21
    while_header                   shift and go to state 23
    unary_operator                 shift and go to state 26
    atribute_access                shift and go to state 31

state 183

    (106) if_statements -> L_BRACKET statement statement_list R_BRACKET .

    ELSE            reduce using rule 106 (if_statements -> L_BRACKET statement statement_list R_BRACKET .)
    L_PARENTHESIS   reduce using rule 106 (if_statements -> L_BRACKET statement statement_list R_BRACKET .)
    LET             reduce using rule 106 (if_statements -> L_BRACKET statement statement_list R_BRACKET .)
    TYPE            reduce using rule 106 (if_statements -> L_BRACKET statement statement_list R_BRACKET .)
    IF              reduce using rule 106 (if_statements -> L_BRACKET statement statement_list R_BRACKET .)
    NUMBER_VALUE    reduce using rule 106 (if_statements -> L_BRACKET statement statement_list R_BRACKET .)
    CHAR_VALUE      reduce using rule 106 (if_statements -> L_BRACKET statement statement_list R_BRACKET .)
    BOOL_VALUE      reduce using rule 106 (if_statements -> L_BRACKET statement statement_list R_BRACKET .)
    ID              reduce using rule 106 (if_statements -> L_BRACKET statement statement_list R_BRACKET .)
    NULL            reduce using rule 106 (if_statements -> L_BRACKET statement statement_list R_BRACKET .)
    FUNCTION        reduce using rule 106 (if_statements -> L_BRACKET statement statement_list R_BRACKET .)
    WHILE           reduce using rule 106 (if_statements -> L_BRACKET statement statement_list R_BRACKET .)
    MINUS           reduce using rule 106 (if_statements -> L_BRACKET statement statement_list R_BRACKET .)
    NOT             reduce using rule 106 (if_statements -> L_BRACKET statement statement_list R_BRACKET .)
    PLUS            reduce using rule 106 (if_statements -> L_BRACKET statement statement_list R_BRACKET .)
    $end            reduce using rule 106 (if_statements -> L_BRACKET statement statement_list R_BRACKET .)
    RETURN          reduce using rule 106 (if_statements -> L_BRACKET statement statement_list R_BRACKET .)
    R_BRACKET       reduce using rule 106 (if_statements -> L_BRACKET statement statement_list R_BRACKET .)


state 184

    (97) function_params -> ID TWO_POINTS ID . COMMA function_params
    (98) function_params -> ID TWO_POINTS ID .

    COMMA           shift and go to state 202
    R_PARENTHESIS   reduce using rule 98 (function_params -> ID TWO_POINTS ID .)


state 185

    (95) function_params -> ID TWO_POINTS type . COMMA function_params
    (96) function_params -> ID TWO_POINTS type .

    COMMA           shift and go to state 203
    R_PARENTHESIS   reduce using rule 96 (function_params -> ID TWO_POINTS type .)


state 186

    (93) function_header -> FUNCTION ID L_PARENTHESIS function_params R_PARENTHESIS TWO_POINTS . return_type
    (100) return_type -> . type
    (101) return_type -> . ID
    (88) type -> . INT
    (89) type -> . FLOAT
    (90) type -> . CHARACTER
    (91) type -> . BOOLEAN

    ID              shift and go to state 204
    INT             shift and go to state 119
    FLOAT           shift and go to state 120
    CHARACTER       shift and go to state 121
    BOOLEAN         shift and go to state 122

    return_type                    shift and go to state 205
    type                           shift and go to state 206

state 187

    (62) object_body_content -> ID TWO_POINTS expression recursive_obejct_body_content .

    R_BRACKET       reduce using rule 62 (object_body_content -> ID TWO_POINTS expression recursive_obejct_body_content .)


state 188

    (66) recursive_obejct_body_content -> COMMA . ID TWO_POINTS expression recursive_obejct_body_content
    (67) recursive_obejct_body_content -> COMMA . QUOTED_ID TWO_POINTS expression recursive_obejct_body_content
    (68) recursive_obejct_body_content -> COMMA . ID TWO_POINTS object_body recursive_obejct_body_content
    (69) recursive_obejct_body_content -> COMMA . QUOTED_ID TWO_POINTS object_body recursive_obejct_body_content
    (71) recursive_obejct_body_content -> COMMA . empty
    (1) empty -> .

    ID              shift and go to state 207
    QUOTED_ID       shift and go to state 208
    R_BRACKET       reduce using rule 1 (empty -> .)

    empty                          shift and go to state 209

state 189

    (70) recursive_obejct_body_content -> empty .

    R_BRACKET       reduce using rule 70 (recursive_obejct_body_content -> empty .)


state 190

    (64) object_body_content -> ID TWO_POINTS object_body recursive_obejct_body_content .

    R_BRACKET       reduce using rule 64 (object_body_content -> ID TWO_POINTS object_body recursive_obejct_body_content .)


state 191

    (63) object_body_content -> QUOTED_ID TWO_POINTS expression recursive_obejct_body_content .

    R_BRACKET       reduce using rule 63 (object_body_content -> QUOTED_ID TWO_POINTS expression recursive_obejct_body_content .)


state 192

    (65) object_body_content -> QUOTED_ID TWO_POINTS object_body recursive_obejct_body_content .

    R_BRACKET       reduce using rule 65 (object_body_content -> QUOTED_ID TWO_POINTS object_body recursive_obejct_body_content .)


state 193

    (51) recursive_variable_declaration -> COMMA ID TWO_POINTS ID recursive_variable_declaration .

    SEMICOLON       reduce using rule 51 (recursive_variable_declaration -> COMMA ID TWO_POINTS ID recursive_variable_declaration .)
    ASSIGN          reduce using rule 51 (recursive_variable_declaration -> COMMA ID TWO_POINTS ID recursive_variable_declaration .)


state 194

    (45) recursive_atribute_access -> L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access .

    SEMICOLON       reduce using rule 45 (recursive_atribute_access -> L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access .)
    PLUS            reduce using rule 45 (recursive_atribute_access -> L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access .)
    MINUS           reduce using rule 45 (recursive_atribute_access -> L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access .)
    MULTIPLY        reduce using rule 45 (recursive_atribute_access -> L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access .)
    DIVIDE          reduce using rule 45 (recursive_atribute_access -> L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access .)
    AND             reduce using rule 45 (recursive_atribute_access -> L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access .)
    OR              reduce using rule 45 (recursive_atribute_access -> L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access .)
    EQUALS          reduce using rule 45 (recursive_atribute_access -> L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access .)
    GREATER_THAN    reduce using rule 45 (recursive_atribute_access -> L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access .)
    LESS_THAN       reduce using rule 45 (recursive_atribute_access -> L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access .)
    GREATER_EQUAL   reduce using rule 45 (recursive_atribute_access -> L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access .)
    LESS_EQUAL      reduce using rule 45 (recursive_atribute_access -> L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access .)
    ASSIGN          reduce using rule 45 (recursive_atribute_access -> L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access .)
    R_PARENTHESIS   reduce using rule 45 (recursive_atribute_access -> L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access .)
    COMMA           reduce using rule 45 (recursive_atribute_access -> L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access .)
    R_BRACKET       reduce using rule 45 (recursive_atribute_access -> L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access .)


state 195

    (76) type_body_content -> ID TWO_POINTS ID . type_body_content_recursive
    (80) type_body_content_recursive -> . COMMA ID TWO_POINTS type type_body_content_recursive
    (81) type_body_content_recursive -> . COMMA QUOTED_ID TWO_POINTS type type_body_content_recursive
    (82) type_body_content_recursive -> . COMMA ID TWO_POINTS ID type_body_content_recursive
    (83) type_body_content_recursive -> . COMMA QUOTED_ID TWO_POINTS ID type_body_content_recursive
    (84) type_body_content_recursive -> . COMMA ID TWO_POINTS type_body type_body_content_recursive
    (85) type_body_content_recursive -> . COMMA QUOTED_ID TWO_POINTS type_body type_body_content_recursive
    (86) type_body_content_recursive -> . empty
    (87) type_body_content_recursive -> . COMMA empty
    (1) empty -> .

    COMMA           shift and go to state 211
    R_BRACKET       reduce using rule 1 (empty -> .)

    type_body_content_recursive    shift and go to state 210
    empty                          shift and go to state 212

state 196

    (74) type_body_content -> ID TWO_POINTS type . type_body_content_recursive
    (80) type_body_content_recursive -> . COMMA ID TWO_POINTS type type_body_content_recursive
    (81) type_body_content_recursive -> . COMMA QUOTED_ID TWO_POINTS type type_body_content_recursive
    (82) type_body_content_recursive -> . COMMA ID TWO_POINTS ID type_body_content_recursive
    (83) type_body_content_recursive -> . COMMA QUOTED_ID TWO_POINTS ID type_body_content_recursive
    (84) type_body_content_recursive -> . COMMA ID TWO_POINTS type_body type_body_content_recursive
    (85) type_body_content_recursive -> . COMMA QUOTED_ID TWO_POINTS type_body type_body_content_recursive
    (86) type_body_content_recursive -> . empty
    (87) type_body_content_recursive -> . COMMA empty
    (1) empty -> .

    COMMA           shift and go to state 211
    R_BRACKET       reduce using rule 1 (empty -> .)

    type_body_content_recursive    shift and go to state 213
    empty                          shift and go to state 212

state 197

    (78) type_body_content -> ID TWO_POINTS type_body . type_body_content_recursive
    (80) type_body_content_recursive -> . COMMA ID TWO_POINTS type type_body_content_recursive
    (81) type_body_content_recursive -> . COMMA QUOTED_ID TWO_POINTS type type_body_content_recursive
    (82) type_body_content_recursive -> . COMMA ID TWO_POINTS ID type_body_content_recursive
    (83) type_body_content_recursive -> . COMMA QUOTED_ID TWO_POINTS ID type_body_content_recursive
    (84) type_body_content_recursive -> . COMMA ID TWO_POINTS type_body type_body_content_recursive
    (85) type_body_content_recursive -> . COMMA QUOTED_ID TWO_POINTS type_body type_body_content_recursive
    (86) type_body_content_recursive -> . empty
    (87) type_body_content_recursive -> . COMMA empty
    (1) empty -> .

    COMMA           shift and go to state 211
    R_BRACKET       reduce using rule 1 (empty -> .)

    type_body_content_recursive    shift and go to state 214
    empty                          shift and go to state 212

state 198

    (75) type_body_content -> QUOTED_ID TWO_POINTS type . type_body_content_recursive
    (80) type_body_content_recursive -> . COMMA ID TWO_POINTS type type_body_content_recursive
    (81) type_body_content_recursive -> . COMMA QUOTED_ID TWO_POINTS type type_body_content_recursive
    (82) type_body_content_recursive -> . COMMA ID TWO_POINTS ID type_body_content_recursive
    (83) type_body_content_recursive -> . COMMA QUOTED_ID TWO_POINTS ID type_body_content_recursive
    (84) type_body_content_recursive -> . COMMA ID TWO_POINTS type_body type_body_content_recursive
    (85) type_body_content_recursive -> . COMMA QUOTED_ID TWO_POINTS type_body type_body_content_recursive
    (86) type_body_content_recursive -> . empty
    (87) type_body_content_recursive -> . COMMA empty
    (1) empty -> .

    COMMA           shift and go to state 211
    R_BRACKET       reduce using rule 1 (empty -> .)

    type_body_content_recursive    shift and go to state 215
    empty                          shift and go to state 212

state 199

    (77) type_body_content -> QUOTED_ID TWO_POINTS ID . type_body_content_recursive
    (80) type_body_content_recursive -> . COMMA ID TWO_POINTS type type_body_content_recursive
    (81) type_body_content_recursive -> . COMMA QUOTED_ID TWO_POINTS type type_body_content_recursive
    (82) type_body_content_recursive -> . COMMA ID TWO_POINTS ID type_body_content_recursive
    (83) type_body_content_recursive -> . COMMA QUOTED_ID TWO_POINTS ID type_body_content_recursive
    (84) type_body_content_recursive -> . COMMA ID TWO_POINTS type_body type_body_content_recursive
    (85) type_body_content_recursive -> . COMMA QUOTED_ID TWO_POINTS type_body type_body_content_recursive
    (86) type_body_content_recursive -> . empty
    (87) type_body_content_recursive -> . COMMA empty
    (1) empty -> .

    COMMA           shift and go to state 211
    R_BRACKET       reduce using rule 1 (empty -> .)

    type_body_content_recursive    shift and go to state 216
    empty                          shift and go to state 212

state 200

    (79) type_body_content -> QUOTED_ID TWO_POINTS type_body . type_body_content_recursive
    (80) type_body_content_recursive -> . COMMA ID TWO_POINTS type type_body_content_recursive
    (81) type_body_content_recursive -> . COMMA QUOTED_ID TWO_POINTS type type_body_content_recursive
    (82) type_body_content_recursive -> . COMMA ID TWO_POINTS ID type_body_content_recursive
    (83) type_body_content_recursive -> . COMMA QUOTED_ID TWO_POINTS ID type_body_content_recursive
    (84) type_body_content_recursive -> . COMMA ID TWO_POINTS type_body type_body_content_recursive
    (85) type_body_content_recursive -> . COMMA QUOTED_ID TWO_POINTS type_body type_body_content_recursive
    (86) type_body_content_recursive -> . empty
    (87) type_body_content_recursive -> . COMMA empty
    (1) empty -> .

    COMMA           shift and go to state 211
    R_BRACKET       reduce using rule 1 (empty -> .)

    type_body_content_recursive    shift and go to state 217
    empty                          shift and go to state 212

state 201

    (107) else_statement -> ELSE L_BRACKET statement statement_list . R_BRACKET

    R_BRACKET       shift and go to state 218


state 202

    (97) function_params -> ID TWO_POINTS ID COMMA . function_params
    (95) function_params -> . ID TWO_POINTS type COMMA function_params
    (96) function_params -> . ID TWO_POINTS type
    (97) function_params -> . ID TWO_POINTS ID COMMA function_params
    (98) function_params -> . ID TWO_POINTS ID
    (99) function_params -> . empty
    (1) empty -> .

    ID              shift and go to state 140
    R_PARENTHESIS   reduce using rule 1 (empty -> .)

    function_params                shift and go to state 219
    empty                          shift and go to state 142

state 203

    (95) function_params -> ID TWO_POINTS type COMMA . function_params
    (95) function_params -> . ID TWO_POINTS type COMMA function_params
    (96) function_params -> . ID TWO_POINTS type
    (97) function_params -> . ID TWO_POINTS ID COMMA function_params
    (98) function_params -> . ID TWO_POINTS ID
    (99) function_params -> . empty
    (1) empty -> .

    ID              shift and go to state 140
    R_PARENTHESIS   reduce using rule 1 (empty -> .)

    function_params                shift and go to state 220
    empty                          shift and go to state 142

state 204

    (101) return_type -> ID .

    L_BRACKET       reduce using rule 101 (return_type -> ID .)


state 205

    (93) function_header -> FUNCTION ID L_PARENTHESIS function_params R_PARENTHESIS TWO_POINTS return_type .

    L_BRACKET       reduce using rule 93 (function_header -> FUNCTION ID L_PARENTHESIS function_params R_PARENTHESIS TWO_POINTS return_type .)


state 206

    (100) return_type -> type .

    L_BRACKET       reduce using rule 100 (return_type -> type .)


state 207

    (66) recursive_obejct_body_content -> COMMA ID . TWO_POINTS expression recursive_obejct_body_content
    (68) recursive_obejct_body_content -> COMMA ID . TWO_POINTS object_body recursive_obejct_body_content

    TWO_POINTS      shift and go to state 221


state 208

    (67) recursive_obejct_body_content -> COMMA QUOTED_ID . TWO_POINTS expression recursive_obejct_body_content
    (69) recursive_obejct_body_content -> COMMA QUOTED_ID . TWO_POINTS object_body recursive_obejct_body_content

    TWO_POINTS      shift and go to state 222


state 209

    (71) recursive_obejct_body_content -> COMMA empty .

    R_BRACKET       reduce using rule 71 (recursive_obejct_body_content -> COMMA empty .)


state 210

    (76) type_body_content -> ID TWO_POINTS ID type_body_content_recursive .

    R_BRACKET       reduce using rule 76 (type_body_content -> ID TWO_POINTS ID type_body_content_recursive .)


state 211

    (80) type_body_content_recursive -> COMMA . ID TWO_POINTS type type_body_content_recursive
    (81) type_body_content_recursive -> COMMA . QUOTED_ID TWO_POINTS type type_body_content_recursive
    (82) type_body_content_recursive -> COMMA . ID TWO_POINTS ID type_body_content_recursive
    (83) type_body_content_recursive -> COMMA . QUOTED_ID TWO_POINTS ID type_body_content_recursive
    (84) type_body_content_recursive -> COMMA . ID TWO_POINTS type_body type_body_content_recursive
    (85) type_body_content_recursive -> COMMA . QUOTED_ID TWO_POINTS type_body type_body_content_recursive
    (87) type_body_content_recursive -> COMMA . empty
    (1) empty -> .

    ID              shift and go to state 223
    QUOTED_ID       shift and go to state 224
    R_BRACKET       reduce using rule 1 (empty -> .)

    empty                          shift and go to state 225

state 212

    (86) type_body_content_recursive -> empty .

    R_BRACKET       reduce using rule 86 (type_body_content_recursive -> empty .)


state 213

    (74) type_body_content -> ID TWO_POINTS type type_body_content_recursive .

    R_BRACKET       reduce using rule 74 (type_body_content -> ID TWO_POINTS type type_body_content_recursive .)


state 214

    (78) type_body_content -> ID TWO_POINTS type_body type_body_content_recursive .

    R_BRACKET       reduce using rule 78 (type_body_content -> ID TWO_POINTS type_body type_body_content_recursive .)


state 215

    (75) type_body_content -> QUOTED_ID TWO_POINTS type type_body_content_recursive .

    R_BRACKET       reduce using rule 75 (type_body_content -> QUOTED_ID TWO_POINTS type type_body_content_recursive .)


state 216

    (77) type_body_content -> QUOTED_ID TWO_POINTS ID type_body_content_recursive .

    R_BRACKET       reduce using rule 77 (type_body_content -> QUOTED_ID TWO_POINTS ID type_body_content_recursive .)


state 217

    (79) type_body_content -> QUOTED_ID TWO_POINTS type_body type_body_content_recursive .

    R_BRACKET       reduce using rule 79 (type_body_content -> QUOTED_ID TWO_POINTS type_body type_body_content_recursive .)


state 218

    (107) else_statement -> ELSE L_BRACKET statement statement_list R_BRACKET .

    L_PARENTHESIS   reduce using rule 107 (else_statement -> ELSE L_BRACKET statement statement_list R_BRACKET .)
    LET             reduce using rule 107 (else_statement -> ELSE L_BRACKET statement statement_list R_BRACKET .)
    TYPE            reduce using rule 107 (else_statement -> ELSE L_BRACKET statement statement_list R_BRACKET .)
    IF              reduce using rule 107 (else_statement -> ELSE L_BRACKET statement statement_list R_BRACKET .)
    NUMBER_VALUE    reduce using rule 107 (else_statement -> ELSE L_BRACKET statement statement_list R_BRACKET .)
    CHAR_VALUE      reduce using rule 107 (else_statement -> ELSE L_BRACKET statement statement_list R_BRACKET .)
    BOOL_VALUE      reduce using rule 107 (else_statement -> ELSE L_BRACKET statement statement_list R_BRACKET .)
    ID              reduce using rule 107 (else_statement -> ELSE L_BRACKET statement statement_list R_BRACKET .)
    NULL            reduce using rule 107 (else_statement -> ELSE L_BRACKET statement statement_list R_BRACKET .)
    FUNCTION        reduce using rule 107 (else_statement -> ELSE L_BRACKET statement statement_list R_BRACKET .)
    WHILE           reduce using rule 107 (else_statement -> ELSE L_BRACKET statement statement_list R_BRACKET .)
    MINUS           reduce using rule 107 (else_statement -> ELSE L_BRACKET statement statement_list R_BRACKET .)
    NOT             reduce using rule 107 (else_statement -> ELSE L_BRACKET statement statement_list R_BRACKET .)
    PLUS            reduce using rule 107 (else_statement -> ELSE L_BRACKET statement statement_list R_BRACKET .)
    $end            reduce using rule 107 (else_statement -> ELSE L_BRACKET statement statement_list R_BRACKET .)
    RETURN          reduce using rule 107 (else_statement -> ELSE L_BRACKET statement statement_list R_BRACKET .)
    R_BRACKET       reduce using rule 107 (else_statement -> ELSE L_BRACKET statement statement_list R_BRACKET .)


state 219

    (97) function_params -> ID TWO_POINTS ID COMMA function_params .

    R_PARENTHESIS   reduce using rule 97 (function_params -> ID TWO_POINTS ID COMMA function_params .)


state 220

    (95) function_params -> ID TWO_POINTS type COMMA function_params .

    R_PARENTHESIS   reduce using rule 95 (function_params -> ID TWO_POINTS type COMMA function_params .)


state 221

    (66) recursive_obejct_body_content -> COMMA ID TWO_POINTS . expression recursive_obejct_body_content
    (68) recursive_obejct_body_content -> COMMA ID TWO_POINTS . object_body recursive_obejct_body_content
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . binary_expression
    (14) expression -> . unary_expression
    (15) expression -> . value
    (61) object_body -> . L_BRACKET object_body_content R_BRACKET
    (16) binary_expression -> . expression PLUS expression
    (17) binary_expression -> . expression MINUS expression
    (18) binary_expression -> . expression MULTIPLY expression
    (19) binary_expression -> . expression DIVIDE expression
    (20) binary_expression -> . expression AND expression
    (21) binary_expression -> . expression OR expression
    (22) binary_expression -> . expression EQUALS expression
    (23) binary_expression -> . expression GREATER_THAN expression
    (24) binary_expression -> . expression LESS_THAN expression
    (25) binary_expression -> . expression GREATER_EQUAL expression
    (26) binary_expression -> . expression LESS_EQUAL expression
    (27) unary_expression -> . unary_operator L_PARENTHESIS expression R_PARENTHESIS
    (28) unary_expression -> . unary_operator value
    (32) value -> . NUMBER_VALUE
    (33) value -> . CHAR_VALUE
    (34) value -> . BOOL_VALUE
    (35) value -> . ID
    (36) value -> . NULL
    (37) value -> . ID L_PARENTHESIS argument_list R_PARENTHESIS
    (38) value -> . ID DOT ID recursive_atribute_access
    (39) value -> . ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . PLUS

    L_PARENTHESIS   shift and go to state 12
    L_BRACKET       shift and go to state 86
    NUMBER_VALUE    shift and go to state 27
    CHAR_VALUE      shift and go to state 28
    BOOL_VALUE      shift and go to state 29
    ID              shift and go to state 53
    NULL            shift and go to state 30
    MINUS           shift and go to state 25
    NOT             shift and go to state 34
    PLUS            shift and go to state 24

    expression                     shift and go to state 226
    object_body                    shift and go to state 227
    binary_expression              shift and go to state 13
    unary_expression               shift and go to state 14
    value                          shift and go to state 15
    unary_operator                 shift and go to state 26

state 222

    (67) recursive_obejct_body_content -> COMMA QUOTED_ID TWO_POINTS . expression recursive_obejct_body_content
    (69) recursive_obejct_body_content -> COMMA QUOTED_ID TWO_POINTS . object_body recursive_obejct_body_content
    (12) expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (13) expression -> . binary_expression
    (14) expression -> . unary_expression
    (15) expression -> . value
    (61) object_body -> . L_BRACKET object_body_content R_BRACKET
    (16) binary_expression -> . expression PLUS expression
    (17) binary_expression -> . expression MINUS expression
    (18) binary_expression -> . expression MULTIPLY expression
    (19) binary_expression -> . expression DIVIDE expression
    (20) binary_expression -> . expression AND expression
    (21) binary_expression -> . expression OR expression
    (22) binary_expression -> . expression EQUALS expression
    (23) binary_expression -> . expression GREATER_THAN expression
    (24) binary_expression -> . expression LESS_THAN expression
    (25) binary_expression -> . expression GREATER_EQUAL expression
    (26) binary_expression -> . expression LESS_EQUAL expression
    (27) unary_expression -> . unary_operator L_PARENTHESIS expression R_PARENTHESIS
    (28) unary_expression -> . unary_operator value
    (32) value -> . NUMBER_VALUE
    (33) value -> . CHAR_VALUE
    (34) value -> . BOOL_VALUE
    (35) value -> . ID
    (36) value -> . NULL
    (37) value -> . ID L_PARENTHESIS argument_list R_PARENTHESIS
    (38) value -> . ID DOT ID recursive_atribute_access
    (39) value -> . ID L_SQ_BRACKET QUOTED_ID R_SQ_BRACKET recursive_atribute_access
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . NOT
    (31) unary_operator -> . PLUS

    L_PARENTHESIS   shift and go to state 12
    L_BRACKET       shift and go to state 86
    NUMBER_VALUE    shift and go to state 27
    CHAR_VALUE      shift and go to state 28
    BOOL_VALUE      shift and go to state 29
    ID              shift and go to state 53
    NULL            shift and go to state 30
    MINUS           shift and go to state 25
    NOT             shift and go to state 34
    PLUS            shift and go to state 24

    expression                     shift and go to state 228
    object_body                    shift and go to state 229
    binary_expression              shift and go to state 13
    unary_expression               shift and go to state 14
    value                          shift and go to state 15
    unary_operator                 shift and go to state 26

state 223

    (80) type_body_content_recursive -> COMMA ID . TWO_POINTS type type_body_content_recursive
    (82) type_body_content_recursive -> COMMA ID . TWO_POINTS ID type_body_content_recursive
    (84) type_body_content_recursive -> COMMA ID . TWO_POINTS type_body type_body_content_recursive

    TWO_POINTS      shift and go to state 230


state 224

    (81) type_body_content_recursive -> COMMA QUOTED_ID . TWO_POINTS type type_body_content_recursive
    (83) type_body_content_recursive -> COMMA QUOTED_ID . TWO_POINTS ID type_body_content_recursive
    (85) type_body_content_recursive -> COMMA QUOTED_ID . TWO_POINTS type_body type_body_content_recursive

    TWO_POINTS      shift and go to state 231


state 225

    (87) type_body_content_recursive -> COMMA empty .

    R_BRACKET       reduce using rule 87 (type_body_content_recursive -> COMMA empty .)


state 226

    (66) recursive_obejct_body_content -> COMMA ID TWO_POINTS expression . recursive_obejct_body_content
    (16) binary_expression -> expression . PLUS expression
    (17) binary_expression -> expression . MINUS expression
    (18) binary_expression -> expression . MULTIPLY expression
    (19) binary_expression -> expression . DIVIDE expression
    (20) binary_expression -> expression . AND expression
    (21) binary_expression -> expression . OR expression
    (22) binary_expression -> expression . EQUALS expression
    (23) binary_expression -> expression . GREATER_THAN expression
    (24) binary_expression -> expression . LESS_THAN expression
    (25) binary_expression -> expression . GREATER_EQUAL expression
    (26) binary_expression -> expression . LESS_EQUAL expression
    (66) recursive_obejct_body_content -> . COMMA ID TWO_POINTS expression recursive_obejct_body_content
    (67) recursive_obejct_body_content -> . COMMA QUOTED_ID TWO_POINTS expression recursive_obejct_body_content
    (68) recursive_obejct_body_content -> . COMMA ID TWO_POINTS object_body recursive_obejct_body_content
    (69) recursive_obejct_body_content -> . COMMA QUOTED_ID TWO_POINTS object_body recursive_obejct_body_content
    (70) recursive_obejct_body_content -> . empty
    (71) recursive_obejct_body_content -> . COMMA empty
    (1) empty -> .

    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    EQUALS          shift and go to state 43
    GREATER_THAN    shift and go to state 44
    LESS_THAN       shift and go to state 45
    GREATER_EQUAL   shift and go to state 46
    LESS_EQUAL      shift and go to state 47
    COMMA           shift and go to state 188
    R_BRACKET       reduce using rule 1 (empty -> .)

    recursive_obejct_body_content  shift and go to state 232
    empty                          shift and go to state 189

state 227

    (68) recursive_obejct_body_content -> COMMA ID TWO_POINTS object_body . recursive_obejct_body_content
    (66) recursive_obejct_body_content -> . COMMA ID TWO_POINTS expression recursive_obejct_body_content
    (67) recursive_obejct_body_content -> . COMMA QUOTED_ID TWO_POINTS expression recursive_obejct_body_content
    (68) recursive_obejct_body_content -> . COMMA ID TWO_POINTS object_body recursive_obejct_body_content
    (69) recursive_obejct_body_content -> . COMMA QUOTED_ID TWO_POINTS object_body recursive_obejct_body_content
    (70) recursive_obejct_body_content -> . empty
    (71) recursive_obejct_body_content -> . COMMA empty
    (1) empty -> .

    COMMA           shift and go to state 188
    R_BRACKET       reduce using rule 1 (empty -> .)

    recursive_obejct_body_content  shift and go to state 233
    empty                          shift and go to state 189

state 228

    (67) recursive_obejct_body_content -> COMMA QUOTED_ID TWO_POINTS expression . recursive_obejct_body_content
    (16) binary_expression -> expression . PLUS expression
    (17) binary_expression -> expression . MINUS expression
    (18) binary_expression -> expression . MULTIPLY expression
    (19) binary_expression -> expression . DIVIDE expression
    (20) binary_expression -> expression . AND expression
    (21) binary_expression -> expression . OR expression
    (22) binary_expression -> expression . EQUALS expression
    (23) binary_expression -> expression . GREATER_THAN expression
    (24) binary_expression -> expression . LESS_THAN expression
    (25) binary_expression -> expression . GREATER_EQUAL expression
    (26) binary_expression -> expression . LESS_EQUAL expression
    (66) recursive_obejct_body_content -> . COMMA ID TWO_POINTS expression recursive_obejct_body_content
    (67) recursive_obejct_body_content -> . COMMA QUOTED_ID TWO_POINTS expression recursive_obejct_body_content
    (68) recursive_obejct_body_content -> . COMMA ID TWO_POINTS object_body recursive_obejct_body_content
    (69) recursive_obejct_body_content -> . COMMA QUOTED_ID TWO_POINTS object_body recursive_obejct_body_content
    (70) recursive_obejct_body_content -> . empty
    (71) recursive_obejct_body_content -> . COMMA empty
    (1) empty -> .

    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    EQUALS          shift and go to state 43
    GREATER_THAN    shift and go to state 44
    LESS_THAN       shift and go to state 45
    GREATER_EQUAL   shift and go to state 46
    LESS_EQUAL      shift and go to state 47
    COMMA           shift and go to state 188
    R_BRACKET       reduce using rule 1 (empty -> .)

    recursive_obejct_body_content  shift and go to state 234
    empty                          shift and go to state 189

state 229

    (69) recursive_obejct_body_content -> COMMA QUOTED_ID TWO_POINTS object_body . recursive_obejct_body_content
    (66) recursive_obejct_body_content -> . COMMA ID TWO_POINTS expression recursive_obejct_body_content
    (67) recursive_obejct_body_content -> . COMMA QUOTED_ID TWO_POINTS expression recursive_obejct_body_content
    (68) recursive_obejct_body_content -> . COMMA ID TWO_POINTS object_body recursive_obejct_body_content
    (69) recursive_obejct_body_content -> . COMMA QUOTED_ID TWO_POINTS object_body recursive_obejct_body_content
    (70) recursive_obejct_body_content -> . empty
    (71) recursive_obejct_body_content -> . COMMA empty
    (1) empty -> .

    COMMA           shift and go to state 188
    R_BRACKET       reduce using rule 1 (empty -> .)

    recursive_obejct_body_content  shift and go to state 235
    empty                          shift and go to state 189

state 230

    (80) type_body_content_recursive -> COMMA ID TWO_POINTS . type type_body_content_recursive
    (82) type_body_content_recursive -> COMMA ID TWO_POINTS . ID type_body_content_recursive
    (84) type_body_content_recursive -> COMMA ID TWO_POINTS . type_body type_body_content_recursive
    (88) type -> . INT
    (89) type -> . FLOAT
    (90) type -> . CHARACTER
    (91) type -> . BOOLEAN
    (73) type_body -> . L_BRACKET type_body_content R_BRACKET

    ID              shift and go to state 236
    INT             shift and go to state 119
    FLOAT           shift and go to state 120
    CHARACTER       shift and go to state 121
    BOOLEAN         shift and go to state 122
    L_BRACKET       shift and go to state 131

    type                           shift and go to state 237
    type_body                      shift and go to state 238

state 231

    (81) type_body_content_recursive -> COMMA QUOTED_ID TWO_POINTS . type type_body_content_recursive
    (83) type_body_content_recursive -> COMMA QUOTED_ID TWO_POINTS . ID type_body_content_recursive
    (85) type_body_content_recursive -> COMMA QUOTED_ID TWO_POINTS . type_body type_body_content_recursive
    (88) type -> . INT
    (89) type -> . FLOAT
    (90) type -> . CHARACTER
    (91) type -> . BOOLEAN
    (73) type_body -> . L_BRACKET type_body_content R_BRACKET

    ID              shift and go to state 240
    INT             shift and go to state 119
    FLOAT           shift and go to state 120
    CHARACTER       shift and go to state 121
    BOOLEAN         shift and go to state 122
    L_BRACKET       shift and go to state 131

    type                           shift and go to state 239
    type_body                      shift and go to state 241

state 232

    (66) recursive_obejct_body_content -> COMMA ID TWO_POINTS expression recursive_obejct_body_content .

    R_BRACKET       reduce using rule 66 (recursive_obejct_body_content -> COMMA ID TWO_POINTS expression recursive_obejct_body_content .)


state 233

    (68) recursive_obejct_body_content -> COMMA ID TWO_POINTS object_body recursive_obejct_body_content .

    R_BRACKET       reduce using rule 68 (recursive_obejct_body_content -> COMMA ID TWO_POINTS object_body recursive_obejct_body_content .)


state 234

    (67) recursive_obejct_body_content -> COMMA QUOTED_ID TWO_POINTS expression recursive_obejct_body_content .

    R_BRACKET       reduce using rule 67 (recursive_obejct_body_content -> COMMA QUOTED_ID TWO_POINTS expression recursive_obejct_body_content .)


state 235

    (69) recursive_obejct_body_content -> COMMA QUOTED_ID TWO_POINTS object_body recursive_obejct_body_content .

    R_BRACKET       reduce using rule 69 (recursive_obejct_body_content -> COMMA QUOTED_ID TWO_POINTS object_body recursive_obejct_body_content .)


state 236

    (82) type_body_content_recursive -> COMMA ID TWO_POINTS ID . type_body_content_recursive
    (80) type_body_content_recursive -> . COMMA ID TWO_POINTS type type_body_content_recursive
    (81) type_body_content_recursive -> . COMMA QUOTED_ID TWO_POINTS type type_body_content_recursive
    (82) type_body_content_recursive -> . COMMA ID TWO_POINTS ID type_body_content_recursive
    (83) type_body_content_recursive -> . COMMA QUOTED_ID TWO_POINTS ID type_body_content_recursive
    (84) type_body_content_recursive -> . COMMA ID TWO_POINTS type_body type_body_content_recursive
    (85) type_body_content_recursive -> . COMMA QUOTED_ID TWO_POINTS type_body type_body_content_recursive
    (86) type_body_content_recursive -> . empty
    (87) type_body_content_recursive -> . COMMA empty
    (1) empty -> .

    COMMA           shift and go to state 211
    R_BRACKET       reduce using rule 1 (empty -> .)

    type_body_content_recursive    shift and go to state 242
    empty                          shift and go to state 212

state 237

    (80) type_body_content_recursive -> COMMA ID TWO_POINTS type . type_body_content_recursive
    (80) type_body_content_recursive -> . COMMA ID TWO_POINTS type type_body_content_recursive
    (81) type_body_content_recursive -> . COMMA QUOTED_ID TWO_POINTS type type_body_content_recursive
    (82) type_body_content_recursive -> . COMMA ID TWO_POINTS ID type_body_content_recursive
    (83) type_body_content_recursive -> . COMMA QUOTED_ID TWO_POINTS ID type_body_content_recursive
    (84) type_body_content_recursive -> . COMMA ID TWO_POINTS type_body type_body_content_recursive
    (85) type_body_content_recursive -> . COMMA QUOTED_ID TWO_POINTS type_body type_body_content_recursive
    (86) type_body_content_recursive -> . empty
    (87) type_body_content_recursive -> . COMMA empty
    (1) empty -> .

    COMMA           shift and go to state 211
    R_BRACKET       reduce using rule 1 (empty -> .)

    type_body_content_recursive    shift and go to state 243
    empty                          shift and go to state 212

state 238

    (84) type_body_content_recursive -> COMMA ID TWO_POINTS type_body . type_body_content_recursive
    (80) type_body_content_recursive -> . COMMA ID TWO_POINTS type type_body_content_recursive
    (81) type_body_content_recursive -> . COMMA QUOTED_ID TWO_POINTS type type_body_content_recursive
    (82) type_body_content_recursive -> . COMMA ID TWO_POINTS ID type_body_content_recursive
    (83) type_body_content_recursive -> . COMMA QUOTED_ID TWO_POINTS ID type_body_content_recursive
    (84) type_body_content_recursive -> . COMMA ID TWO_POINTS type_body type_body_content_recursive
    (85) type_body_content_recursive -> . COMMA QUOTED_ID TWO_POINTS type_body type_body_content_recursive
    (86) type_body_content_recursive -> . empty
    (87) type_body_content_recursive -> . COMMA empty
    (1) empty -> .

    COMMA           shift and go to state 211
    R_BRACKET       reduce using rule 1 (empty -> .)

    type_body_content_recursive    shift and go to state 244
    empty                          shift and go to state 212

state 239

    (81) type_body_content_recursive -> COMMA QUOTED_ID TWO_POINTS type . type_body_content_recursive
    (80) type_body_content_recursive -> . COMMA ID TWO_POINTS type type_body_content_recursive
    (81) type_body_content_recursive -> . COMMA QUOTED_ID TWO_POINTS type type_body_content_recursive
    (82) type_body_content_recursive -> . COMMA ID TWO_POINTS ID type_body_content_recursive
    (83) type_body_content_recursive -> . COMMA QUOTED_ID TWO_POINTS ID type_body_content_recursive
    (84) type_body_content_recursive -> . COMMA ID TWO_POINTS type_body type_body_content_recursive
    (85) type_body_content_recursive -> . COMMA QUOTED_ID TWO_POINTS type_body type_body_content_recursive
    (86) type_body_content_recursive -> . empty
    (87) type_body_content_recursive -> . COMMA empty
    (1) empty -> .

    COMMA           shift and go to state 211
    R_BRACKET       reduce using rule 1 (empty -> .)

    type_body_content_recursive    shift and go to state 245
    empty                          shift and go to state 212

state 240

    (83) type_body_content_recursive -> COMMA QUOTED_ID TWO_POINTS ID . type_body_content_recursive
    (80) type_body_content_recursive -> . COMMA ID TWO_POINTS type type_body_content_recursive
    (81) type_body_content_recursive -> . COMMA QUOTED_ID TWO_POINTS type type_body_content_recursive
    (82) type_body_content_recursive -> . COMMA ID TWO_POINTS ID type_body_content_recursive
    (83) type_body_content_recursive -> . COMMA QUOTED_ID TWO_POINTS ID type_body_content_recursive
    (84) type_body_content_recursive -> . COMMA ID TWO_POINTS type_body type_body_content_recursive
    (85) type_body_content_recursive -> . COMMA QUOTED_ID TWO_POINTS type_body type_body_content_recursive
    (86) type_body_content_recursive -> . empty
    (87) type_body_content_recursive -> . COMMA empty
    (1) empty -> .

    COMMA           shift and go to state 211
    R_BRACKET       reduce using rule 1 (empty -> .)

    type_body_content_recursive    shift and go to state 246
    empty                          shift and go to state 212

state 241

    (85) type_body_content_recursive -> COMMA QUOTED_ID TWO_POINTS type_body . type_body_content_recursive
    (80) type_body_content_recursive -> . COMMA ID TWO_POINTS type type_body_content_recursive
    (81) type_body_content_recursive -> . COMMA QUOTED_ID TWO_POINTS type type_body_content_recursive
    (82) type_body_content_recursive -> . COMMA ID TWO_POINTS ID type_body_content_recursive
    (83) type_body_content_recursive -> . COMMA QUOTED_ID TWO_POINTS ID type_body_content_recursive
    (84) type_body_content_recursive -> . COMMA ID TWO_POINTS type_body type_body_content_recursive
    (85) type_body_content_recursive -> . COMMA QUOTED_ID TWO_POINTS type_body type_body_content_recursive
    (86) type_body_content_recursive -> . empty
    (87) type_body_content_recursive -> . COMMA empty
    (1) empty -> .

    COMMA           shift and go to state 211
    R_BRACKET       reduce using rule 1 (empty -> .)

    type_body_content_recursive    shift and go to state 247
    empty                          shift and go to state 212

state 242

    (82) type_body_content_recursive -> COMMA ID TWO_POINTS ID type_body_content_recursive .

    R_BRACKET       reduce using rule 82 (type_body_content_recursive -> COMMA ID TWO_POINTS ID type_body_content_recursive .)


state 243

    (80) type_body_content_recursive -> COMMA ID TWO_POINTS type type_body_content_recursive .

    R_BRACKET       reduce using rule 80 (type_body_content_recursive -> COMMA ID TWO_POINTS type type_body_content_recursive .)


state 244

    (84) type_body_content_recursive -> COMMA ID TWO_POINTS type_body type_body_content_recursive .

    R_BRACKET       reduce using rule 84 (type_body_content_recursive -> COMMA ID TWO_POINTS type_body type_body_content_recursive .)


state 245

    (81) type_body_content_recursive -> COMMA QUOTED_ID TWO_POINTS type type_body_content_recursive .

    R_BRACKET       reduce using rule 81 (type_body_content_recursive -> COMMA QUOTED_ID TWO_POINTS type type_body_content_recursive .)


state 246

    (83) type_body_content_recursive -> COMMA QUOTED_ID TWO_POINTS ID type_body_content_recursive .

    R_BRACKET       reduce using rule 83 (type_body_content_recursive -> COMMA QUOTED_ID TWO_POINTS ID type_body_content_recursive .)


state 247

    (85) type_body_content_recursive -> COMMA QUOTED_ID TWO_POINTS type_body type_body_content_recursive .

    R_BRACKET       reduce using rule 85 (type_body_content_recursive -> COMMA QUOTED_ID TWO_POINTS type_body type_body_content_recursive .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ASSIGN in state 17 resolved as shift
